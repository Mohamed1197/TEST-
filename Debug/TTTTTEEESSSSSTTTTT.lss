
TTTTTEEESSSSSTTTTT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002562  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002562  000025d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001c2c  00000000  00000000  000025e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000cae  00000000  00000000  0000420c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004eba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004ffa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  0000516a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00006db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008a4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00008e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009607  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e6       	ldi	r30, 0x62	; 98
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 36       	cpi	r26, 0x68	; 104
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 5e 11 	call	0x22bc	; 0x22bc <main>
      7a:	0c 94 af 12 	jmp	0x255e	; 0x255e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 94 12 	jmp	0x2528	; 0x2528 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 78 12 	jmp	0x24f0	; 0x24f0 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 94 12 	jmp	0x2528	; 0x2528 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 84 12 	jmp	0x2508	; 0x2508 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 a0 12 	jmp	0x2540	; 0x2540 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 88 12 	jmp	0x2510	; 0x2510 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 a4 12 	jmp	0x2548	; 0x2548 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <MDIO_u8Init>:
#include "MDIO_config.h"
#include "MDIO_interface.h"
#include "MDIO_private.h"

u8 MDIO_u8Init            (void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	0f 92       	push	r0
     b3c:	cd b7       	in	r28, 0x3d	; 61
     b3e:	de b7       	in	r29, 0x3e	; 62
     DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
     b40:	ea e3       	ldi	r30, 0x3A	; 58
     b42:	f0 e0       	ldi	r31, 0x00	; 0
     b44:	10 82       	st	Z, r1
	                    DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION); 
     
	 DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
     b46:	e7 e3       	ldi	r30, 0x37	; 55
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	8f ef       	ldi	r24, 0xFF	; 255
     b4c:	80 83       	st	Z, r24
	                    DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION); 
     
	 DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
     b4e:	e4 e3       	ldi	r30, 0x34	; 52
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	10 82       	st	Z, r1
	                    DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION); 
     
	 DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
     b54:	e1 e3       	ldi	r30, 0x31	; 49
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	10 82       	st	Z, r1
	                    DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION); 
    /*Initial values for pins */
     PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
     b5a:	eb e3       	ldi	r30, 0x3B	; 59
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	10 82       	st	Z, r1
	                     DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE); 
																											   
	 PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
     b60:	e8 e3       	ldi	r30, 0x38	; 56
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	10 82       	st	Z, r1
	                     DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE); 
																											   
	 PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
     b66:	e5 e3       	ldi	r30, 0x35	; 53
     b68:	f0 e0       	ldi	r31, 0x00	; 0
     b6a:	10 82       	st	Z, r1
	                     DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE); 
																											   
	 PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
     b6c:	e2 e3       	ldi	r30, 0x32	; 50
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	10 82       	st	Z, r1
	                     DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);

}
     b72:	0f 90       	pop	r0
     b74:	cf 91       	pop	r28
     b76:	df 91       	pop	r29
     b78:	08 95       	ret

00000b7a <MDIO_u8SetPinDirection>:

u8 MDIO_u8SetPinDirection (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
     b7a:	df 93       	push	r29
     b7c:	cf 93       	push	r28
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
     b82:	2e 97       	sbiw	r28, 0x0e	; 14
     b84:	0f b6       	in	r0, 0x3f	; 63
     b86:	f8 94       	cli
     b88:	de bf       	out	0x3e, r29	; 62
     b8a:	0f be       	out	0x3f, r0	; 63
     b8c:	cd bf       	out	0x3d, r28	; 61
     b8e:	8a 83       	std	Y+2, r24	; 0x02
     b90:	6b 83       	std	Y+3, r22	; 0x03
     b92:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	89 83       	std	Y+1, r24	; 0x01
	/* Check 1- Valid Port  ID
	         2- Valid Pin ID
			 3- Valid Pin Direction */
    if((Copy_u8PortID <= DIO_u8_PORTD) && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
     b98:	8a 81       	ldd	r24, Y+2	; 0x02
     b9a:	84 30       	cpi	r24, 0x04	; 4
     b9c:	08 f0       	brcs	.+2      	; 0xba0 <MDIO_u8SetPinDirection+0x26>
     b9e:	0c c1       	rjmp	.+536    	; 0xdb8 <MDIO_u8SetPinDirection+0x23e>
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	88 30       	cpi	r24, 0x08	; 8
     ba4:	08 f0       	brcs	.+2      	; 0xba8 <MDIO_u8SetPinDirection+0x2e>
     ba6:	08 c1       	rjmp	.+528    	; 0xdb8 <MDIO_u8SetPinDirection+0x23e>
     ba8:	8c 81       	ldd	r24, Y+4	; 0x04
     baa:	88 23       	and	r24, r24
     bac:	21 f0       	breq	.+8      	; 0xbb6 <MDIO_u8SetPinDirection+0x3c>
     bae:	8c 81       	ldd	r24, Y+4	; 0x04
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	09 f0       	breq	.+2      	; 0xbb6 <MDIO_u8SetPinDirection+0x3c>
     bb4:	01 c1       	rjmp	.+514    	; 0xdb8 <MDIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortID)
     bb6:	8a 81       	ldd	r24, Y+2	; 0x02
     bb8:	28 2f       	mov	r18, r24
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	3e 87       	std	Y+14, r19	; 0x0e
     bbe:	2d 87       	std	Y+13, r18	; 0x0d
     bc0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bc4:	81 30       	cpi	r24, 0x01	; 1
     bc6:	91 05       	cpc	r25, r1
     bc8:	09 f4       	brne	.+2      	; 0xbcc <MDIO_u8SetPinDirection+0x52>
     bca:	4f c0       	rjmp	.+158    	; 0xc6a <MDIO_u8SetPinDirection+0xf0>
     bcc:	2d 85       	ldd	r18, Y+13	; 0x0d
     bce:	3e 85       	ldd	r19, Y+14	; 0x0e
     bd0:	22 30       	cpi	r18, 0x02	; 2
     bd2:	31 05       	cpc	r19, r1
     bd4:	2c f4       	brge	.+10     	; 0xbe0 <MDIO_u8SetPinDirection+0x66>
     bd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     bd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     bda:	00 97       	sbiw	r24, 0x00	; 0
     bdc:	71 f0       	breq	.+28     	; 0xbfa <MDIO_u8SetPinDirection+0x80>
     bde:	ed c0       	rjmp	.+474    	; 0xdba <MDIO_u8SetPinDirection+0x240>
     be0:	2d 85       	ldd	r18, Y+13	; 0x0d
     be2:	3e 85       	ldd	r19, Y+14	; 0x0e
     be4:	22 30       	cpi	r18, 0x02	; 2
     be6:	31 05       	cpc	r19, r1
     be8:	09 f4       	brne	.+2      	; 0xbec <MDIO_u8SetPinDirection+0x72>
     bea:	77 c0       	rjmp	.+238    	; 0xcda <MDIO_u8SetPinDirection+0x160>
     bec:	8d 85       	ldd	r24, Y+13	; 0x0d
     bee:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf0:	83 30       	cpi	r24, 0x03	; 3
     bf2:	91 05       	cpc	r25, r1
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <MDIO_u8SetPinDirection+0x7e>
     bf6:	a9 c0       	rjmp	.+338    	; 0xd4a <MDIO_u8SetPinDirection+0x1d0>
     bf8:	e0 c0       	rjmp	.+448    	; 0xdba <MDIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
     bfa:	8c 81       	ldd	r24, Y+4	; 0x04
     bfc:	28 2f       	mov	r18, r24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	3c 87       	std	Y+12, r19	; 0x0c
     c02:	2b 87       	std	Y+11, r18	; 0x0b
     c04:	8b 85       	ldd	r24, Y+11	; 0x0b
     c06:	9c 85       	ldd	r25, Y+12	; 0x0c
     c08:	00 97       	sbiw	r24, 0x00	; 0
     c0a:	d1 f0       	breq	.+52     	; 0xc40 <MDIO_u8SetPinDirection+0xc6>
     c0c:	2b 85       	ldd	r18, Y+11	; 0x0b
     c0e:	3c 85       	ldd	r19, Y+12	; 0x0c
     c10:	21 30       	cpi	r18, 0x01	; 1
     c12:	31 05       	cpc	r19, r1
     c14:	09 f0       	breq	.+2      	; 0xc18 <MDIO_u8SetPinDirection+0x9e>
     c16:	d1 c0       	rjmp	.+418    	; 0xdba <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinID);
     c18:	aa e3       	ldi	r26, 0x3A	; 58
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	ea e3       	ldi	r30, 0x3A	; 58
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	48 2f       	mov	r20, r24
     c24:	8b 81       	ldd	r24, Y+3	; 0x03
     c26:	28 2f       	mov	r18, r24
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	81 e0       	ldi	r24, 0x01	; 1
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	02 2e       	mov	r0, r18
     c30:	02 c0       	rjmp	.+4      	; 0xc36 <MDIO_u8SetPinDirection+0xbc>
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	0a 94       	dec	r0
     c38:	e2 f7       	brpl	.-8      	; 0xc32 <MDIO_u8SetPinDirection+0xb8>
     c3a:	84 2b       	or	r24, r20
     c3c:	8c 93       	st	X, r24
     c3e:	bd c0       	rjmp	.+378    	; 0xdba <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinID);
     c40:	aa e3       	ldi	r26, 0x3A	; 58
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	ea e3       	ldi	r30, 0x3A	; 58
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	48 2f       	mov	r20, r24
     c4c:	8b 81       	ldd	r24, Y+3	; 0x03
     c4e:	28 2f       	mov	r18, r24
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	02 2e       	mov	r0, r18
     c58:	02 c0       	rjmp	.+4      	; 0xc5e <MDIO_u8SetPinDirection+0xe4>
     c5a:	88 0f       	add	r24, r24
     c5c:	99 1f       	adc	r25, r25
     c5e:	0a 94       	dec	r0
     c60:	e2 f7       	brpl	.-8      	; 0xc5a <MDIO_u8SetPinDirection+0xe0>
     c62:	80 95       	com	r24
     c64:	84 23       	and	r24, r20
     c66:	8c 93       	st	X, r24
     c68:	a8 c0       	rjmp	.+336    	; 0xdba <MDIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
     c6a:	8c 81       	ldd	r24, Y+4	; 0x04
     c6c:	28 2f       	mov	r18, r24
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	3a 87       	std	Y+10, r19	; 0x0a
     c72:	29 87       	std	Y+9, r18	; 0x09
     c74:	89 85       	ldd	r24, Y+9	; 0x09
     c76:	9a 85       	ldd	r25, Y+10	; 0x0a
     c78:	00 97       	sbiw	r24, 0x00	; 0
     c7a:	d1 f0       	breq	.+52     	; 0xcb0 <MDIO_u8SetPinDirection+0x136>
     c7c:	29 85       	ldd	r18, Y+9	; 0x09
     c7e:	3a 85       	ldd	r19, Y+10	; 0x0a
     c80:	21 30       	cpi	r18, 0x01	; 1
     c82:	31 05       	cpc	r19, r1
     c84:	09 f0       	breq	.+2      	; 0xc88 <MDIO_u8SetPinDirection+0x10e>
     c86:	99 c0       	rjmp	.+306    	; 0xdba <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRB_u8_REG,Copy_u8PinID);
     c88:	a7 e3       	ldi	r26, 0x37	; 55
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e7 e3       	ldi	r30, 0x37	; 55
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	80 81       	ld	r24, Z
     c92:	48 2f       	mov	r20, r24
     c94:	8b 81       	ldd	r24, Y+3	; 0x03
     c96:	28 2f       	mov	r18, r24
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	02 2e       	mov	r0, r18
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <MDIO_u8SetPinDirection+0x12c>
     ca2:	88 0f       	add	r24, r24
     ca4:	99 1f       	adc	r25, r25
     ca6:	0a 94       	dec	r0
     ca8:	e2 f7       	brpl	.-8      	; 0xca2 <MDIO_u8SetPinDirection+0x128>
     caa:	84 2b       	or	r24, r20
     cac:	8c 93       	st	X, r24
     cae:	85 c0       	rjmp	.+266    	; 0xdba <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRB_u8_REG,Copy_u8PinID);
     cb0:	a7 e3       	ldi	r26, 0x37	; 55
     cb2:	b0 e0       	ldi	r27, 0x00	; 0
     cb4:	e7 e3       	ldi	r30, 0x37	; 55
     cb6:	f0 e0       	ldi	r31, 0x00	; 0
     cb8:	80 81       	ld	r24, Z
     cba:	48 2f       	mov	r20, r24
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	28 2f       	mov	r18, r24
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	81 e0       	ldi	r24, 0x01	; 1
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	02 2e       	mov	r0, r18
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <MDIO_u8SetPinDirection+0x154>
     cca:	88 0f       	add	r24, r24
     ccc:	99 1f       	adc	r25, r25
     cce:	0a 94       	dec	r0
     cd0:	e2 f7       	brpl	.-8      	; 0xcca <MDIO_u8SetPinDirection+0x150>
     cd2:	80 95       	com	r24
     cd4:	84 23       	and	r24, r20
     cd6:	8c 93       	st	X, r24
     cd8:	70 c0       	rjmp	.+224    	; 0xdba <MDIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
     cda:	8c 81       	ldd	r24, Y+4	; 0x04
     cdc:	28 2f       	mov	r18, r24
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	38 87       	std	Y+8, r19	; 0x08
     ce2:	2f 83       	std	Y+7, r18	; 0x07
     ce4:	8f 81       	ldd	r24, Y+7	; 0x07
     ce6:	98 85       	ldd	r25, Y+8	; 0x08
     ce8:	00 97       	sbiw	r24, 0x00	; 0
     cea:	d1 f0       	breq	.+52     	; 0xd20 <MDIO_u8SetPinDirection+0x1a6>
     cec:	2f 81       	ldd	r18, Y+7	; 0x07
     cee:	38 85       	ldd	r19, Y+8	; 0x08
     cf0:	21 30       	cpi	r18, 0x01	; 1
     cf2:	31 05       	cpc	r19, r1
     cf4:	09 f0       	breq	.+2      	; 0xcf8 <MDIO_u8SetPinDirection+0x17e>
     cf6:	61 c0       	rjmp	.+194    	; 0xdba <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRC_u8_REG,Copy_u8PinID);
     cf8:	a4 e3       	ldi	r26, 0x34	; 52
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e4 e3       	ldi	r30, 0x34	; 52
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	48 2f       	mov	r20, r24
     d04:	8b 81       	ldd	r24, Y+3	; 0x03
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	02 2e       	mov	r0, r18
     d10:	02 c0       	rjmp	.+4      	; 0xd16 <MDIO_u8SetPinDirection+0x19c>
     d12:	88 0f       	add	r24, r24
     d14:	99 1f       	adc	r25, r25
     d16:	0a 94       	dec	r0
     d18:	e2 f7       	brpl	.-8      	; 0xd12 <MDIO_u8SetPinDirection+0x198>
     d1a:	84 2b       	or	r24, r20
     d1c:	8c 93       	st	X, r24
     d1e:	4d c0       	rjmp	.+154    	; 0xdba <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRC_u8_REG,Copy_u8PinID);
     d20:	a4 e3       	ldi	r26, 0x34	; 52
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	e4 e3       	ldi	r30, 0x34	; 52
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	48 2f       	mov	r20, r24
     d2c:	8b 81       	ldd	r24, Y+3	; 0x03
     d2e:	28 2f       	mov	r18, r24
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	90 e0       	ldi	r25, 0x00	; 0
     d36:	02 2e       	mov	r0, r18
     d38:	02 c0       	rjmp	.+4      	; 0xd3e <MDIO_u8SetPinDirection+0x1c4>
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	0a 94       	dec	r0
     d40:	e2 f7       	brpl	.-8      	; 0xd3a <MDIO_u8SetPinDirection+0x1c0>
     d42:	80 95       	com	r24
     d44:	84 23       	and	r24, r20
     d46:	8c 93       	st	X, r24
     d48:	38 c0       	rjmp	.+112    	; 0xdba <MDIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	28 2f       	mov	r18, r24
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	3e 83       	std	Y+6, r19	; 0x06
     d52:	2d 83       	std	Y+5, r18	; 0x05
     d54:	8d 81       	ldd	r24, Y+5	; 0x05
     d56:	9e 81       	ldd	r25, Y+6	; 0x06
     d58:	00 97       	sbiw	r24, 0x00	; 0
     d5a:	c9 f0       	breq	.+50     	; 0xd8e <MDIO_u8SetPinDirection+0x214>
     d5c:	2d 81       	ldd	r18, Y+5	; 0x05
     d5e:	3e 81       	ldd	r19, Y+6	; 0x06
     d60:	21 30       	cpi	r18, 0x01	; 1
     d62:	31 05       	cpc	r19, r1
     d64:	51 f5       	brne	.+84     	; 0xdba <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRD_u8_REG,Copy_u8PinID);
     d66:	a1 e3       	ldi	r26, 0x31	; 49
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	e1 e3       	ldi	r30, 0x31	; 49
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <MDIO_u8SetPinDirection+0x20a>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <MDIO_u8SetPinDirection+0x206>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	16 c0       	rjmp	.+44     	; 0xdba <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRD_u8_REG,Copy_u8PinID);
     d8e:	a1 e3       	ldi	r26, 0x31	; 49
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	e1 e3       	ldi	r30, 0x31	; 49
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <MDIO_u8SetPinDirection+0x232>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <MDIO_u8SetPinDirection+0x22e>
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8c 93       	st	X, r24
     db6:	01 c0       	rjmp	.+2      	; 0xdba <MDIO_u8SetPinDirection+0x240>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
     db8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
     dba:	89 81       	ldd	r24, Y+1	; 0x01
}
     dbc:	2e 96       	adiw	r28, 0x0e	; 14
     dbe:	0f b6       	in	r0, 0x3f	; 63
     dc0:	f8 94       	cli
     dc2:	de bf       	out	0x3e, r29	; 62
     dc4:	0f be       	out	0x3f, r0	; 63
     dc6:	cd bf       	out	0x3d, r28	; 61
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <MDIO_u8SetPinValue>:
u8 MDIO_u8SetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinValue)
{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	2e 97       	sbiw	r28, 0x0e	; 14
     dd8:	0f b6       	in	r0, 0x3f	; 63
     dda:	f8 94       	cli
     ddc:	de bf       	out	0x3e, r29	; 62
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	cd bf       	out	0x3d, r28	; 61
     de2:	8a 83       	std	Y+2, r24	; 0x02
     de4:	6b 83       	std	Y+3, r22	; 0x03
     de6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
     de8:	81 e0       	ldi	r24, 0x01	; 1
     dea:	89 83       	std	Y+1, r24	; 0x01
	  if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_HIGH) || (Copy_u8PinValue == DIO_u8_LOW)))
     dec:	8a 81       	ldd	r24, Y+2	; 0x02
     dee:	84 30       	cpi	r24, 0x04	; 4
     df0:	08 f0       	brcs	.+2      	; 0xdf4 <MDIO_u8SetPinValue+0x26>
     df2:	0c c1       	rjmp	.+536    	; 0x100c <MDIO_u8SetPinValue+0x23e>
     df4:	8b 81       	ldd	r24, Y+3	; 0x03
     df6:	88 30       	cpi	r24, 0x08	; 8
     df8:	08 f0       	brcs	.+2      	; 0xdfc <MDIO_u8SetPinValue+0x2e>
     dfa:	08 c1       	rjmp	.+528    	; 0x100c <MDIO_u8SetPinValue+0x23e>
     dfc:	8c 81       	ldd	r24, Y+4	; 0x04
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	21 f0       	breq	.+8      	; 0xe0a <MDIO_u8SetPinValue+0x3c>
     e02:	8c 81       	ldd	r24, Y+4	; 0x04
     e04:	88 23       	and	r24, r24
     e06:	09 f0       	breq	.+2      	; 0xe0a <MDIO_u8SetPinValue+0x3c>
     e08:	01 c1       	rjmp	.+514    	; 0x100c <MDIO_u8SetPinValue+0x23e>
	  {
		  switch (Copy_u8PortID)
     e0a:	8a 81       	ldd	r24, Y+2	; 0x02
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	3e 87       	std	Y+14, r19	; 0x0e
     e12:	2d 87       	std	Y+13, r18	; 0x0d
     e14:	8d 85       	ldd	r24, Y+13	; 0x0d
     e16:	9e 85       	ldd	r25, Y+14	; 0x0e
     e18:	81 30       	cpi	r24, 0x01	; 1
     e1a:	91 05       	cpc	r25, r1
     e1c:	09 f4       	brne	.+2      	; 0xe20 <MDIO_u8SetPinValue+0x52>
     e1e:	4f c0       	rjmp	.+158    	; 0xebe <MDIO_u8SetPinValue+0xf0>
     e20:	2d 85       	ldd	r18, Y+13	; 0x0d
     e22:	3e 85       	ldd	r19, Y+14	; 0x0e
     e24:	22 30       	cpi	r18, 0x02	; 2
     e26:	31 05       	cpc	r19, r1
     e28:	2c f4       	brge	.+10     	; 0xe34 <MDIO_u8SetPinValue+0x66>
     e2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     e2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     e2e:	00 97       	sbiw	r24, 0x00	; 0
     e30:	71 f0       	breq	.+28     	; 0xe4e <MDIO_u8SetPinValue+0x80>
     e32:	ed c0       	rjmp	.+474    	; 0x100e <MDIO_u8SetPinValue+0x240>
     e34:	2d 85       	ldd	r18, Y+13	; 0x0d
     e36:	3e 85       	ldd	r19, Y+14	; 0x0e
     e38:	22 30       	cpi	r18, 0x02	; 2
     e3a:	31 05       	cpc	r19, r1
     e3c:	09 f4       	brne	.+2      	; 0xe40 <MDIO_u8SetPinValue+0x72>
     e3e:	77 c0       	rjmp	.+238    	; 0xf2e <MDIO_u8SetPinValue+0x160>
     e40:	8d 85       	ldd	r24, Y+13	; 0x0d
     e42:	9e 85       	ldd	r25, Y+14	; 0x0e
     e44:	83 30       	cpi	r24, 0x03	; 3
     e46:	91 05       	cpc	r25, r1
     e48:	09 f4       	brne	.+2      	; 0xe4c <MDIO_u8SetPinValue+0x7e>
     e4a:	a9 c0       	rjmp	.+338    	; 0xf9e <MDIO_u8SetPinValue+0x1d0>
     e4c:	e0 c0       	rjmp	.+448    	; 0x100e <MDIO_u8SetPinValue+0x240>
		  {
			  case DIO_u8_PORTA:
			     switch(Copy_u8PinValue)
     e4e:	8c 81       	ldd	r24, Y+4	; 0x04
     e50:	28 2f       	mov	r18, r24
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	3c 87       	std	Y+12, r19	; 0x0c
     e56:	2b 87       	std	Y+11, r18	; 0x0b
     e58:	8b 85       	ldd	r24, Y+11	; 0x0b
     e5a:	9c 85       	ldd	r25, Y+12	; 0x0c
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	d1 f0       	breq	.+52     	; 0xe94 <MDIO_u8SetPinValue+0xc6>
     e60:	2b 85       	ldd	r18, Y+11	; 0x0b
     e62:	3c 85       	ldd	r19, Y+12	; 0x0c
     e64:	21 30       	cpi	r18, 0x01	; 1
     e66:	31 05       	cpc	r19, r1
     e68:	09 f0       	breq	.+2      	; 0xe6c <MDIO_u8SetPinValue+0x9e>
     e6a:	d1 c0       	rjmp	.+418    	; 0x100e <MDIO_u8SetPinValue+0x240>
				 {
					case DIO_u8_HIGH:
					 SET_BIT(PORTA_u8_REG,Copy_u8PinID);
     e6c:	ab e3       	ldi	r26, 0x3B	; 59
     e6e:	b0 e0       	ldi	r27, 0x00	; 0
     e70:	eb e3       	ldi	r30, 0x3B	; 59
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	80 81       	ld	r24, Z
     e76:	48 2f       	mov	r20, r24
     e78:	8b 81       	ldd	r24, Y+3	; 0x03
     e7a:	28 2f       	mov	r18, r24
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	02 2e       	mov	r0, r18
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <MDIO_u8SetPinValue+0xbc>
     e86:	88 0f       	add	r24, r24
     e88:	99 1f       	adc	r25, r25
     e8a:	0a 94       	dec	r0
     e8c:	e2 f7       	brpl	.-8      	; 0xe86 <MDIO_u8SetPinValue+0xb8>
     e8e:	84 2b       	or	r24, r20
     e90:	8c 93       	st	X, r24
     e92:	bd c0       	rjmp	.+378    	; 0x100e <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTA_u8_REG,Copy_u8PinID);
     e94:	ab e3       	ldi	r26, 0x3B	; 59
     e96:	b0 e0       	ldi	r27, 0x00	; 0
     e98:	eb e3       	ldi	r30, 0x3B	; 59
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	80 81       	ld	r24, Z
     e9e:	48 2f       	mov	r20, r24
     ea0:	8b 81       	ldd	r24, Y+3	; 0x03
     ea2:	28 2f       	mov	r18, r24
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	02 2e       	mov	r0, r18
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <MDIO_u8SetPinValue+0xe4>
     eae:	88 0f       	add	r24, r24
     eb0:	99 1f       	adc	r25, r25
     eb2:	0a 94       	dec	r0
     eb4:	e2 f7       	brpl	.-8      	; 0xeae <MDIO_u8SetPinValue+0xe0>
     eb6:	80 95       	com	r24
     eb8:	84 23       	and	r24, r20
     eba:	8c 93       	st	X, r24
     ebc:	a8 c0       	rjmp	.+336    	; 0x100e <MDIO_u8SetPinValue+0x240>
					break;   
				 }
			   break;
			   case DIO_u8_PORTB:
			     switch(Copy_u8PinValue)
     ebe:	8c 81       	ldd	r24, Y+4	; 0x04
     ec0:	28 2f       	mov	r18, r24
     ec2:	30 e0       	ldi	r19, 0x00	; 0
     ec4:	3a 87       	std	Y+10, r19	; 0x0a
     ec6:	29 87       	std	Y+9, r18	; 0x09
     ec8:	89 85       	ldd	r24, Y+9	; 0x09
     eca:	9a 85       	ldd	r25, Y+10	; 0x0a
     ecc:	00 97       	sbiw	r24, 0x00	; 0
     ece:	d1 f0       	breq	.+52     	; 0xf04 <MDIO_u8SetPinValue+0x136>
     ed0:	29 85       	ldd	r18, Y+9	; 0x09
     ed2:	3a 85       	ldd	r19, Y+10	; 0x0a
     ed4:	21 30       	cpi	r18, 0x01	; 1
     ed6:	31 05       	cpc	r19, r1
     ed8:	09 f0       	breq	.+2      	; 0xedc <MDIO_u8SetPinValue+0x10e>
     eda:	99 c0       	rjmp	.+306    	; 0x100e <MDIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTB_u8_REG,Copy_u8PinID);
     edc:	a8 e3       	ldi	r26, 0x38	; 56
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	e8 e3       	ldi	r30, 0x38	; 56
     ee2:	f0 e0       	ldi	r31, 0x00	; 0
     ee4:	80 81       	ld	r24, Z
     ee6:	48 2f       	mov	r20, r24
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	28 2f       	mov	r18, r24
     eec:	30 e0       	ldi	r19, 0x00	; 0
     eee:	81 e0       	ldi	r24, 0x01	; 1
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	02 2e       	mov	r0, r18
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <MDIO_u8SetPinValue+0x12c>
     ef6:	88 0f       	add	r24, r24
     ef8:	99 1f       	adc	r25, r25
     efa:	0a 94       	dec	r0
     efc:	e2 f7       	brpl	.-8      	; 0xef6 <MDIO_u8SetPinValue+0x128>
     efe:	84 2b       	or	r24, r20
     f00:	8c 93       	st	X, r24
     f02:	85 c0       	rjmp	.+266    	; 0x100e <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTB_u8_REG,Copy_u8PinID);
     f04:	a8 e3       	ldi	r26, 0x38	; 56
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e8 e3       	ldi	r30, 0x38	; 56
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	48 2f       	mov	r20, r24
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	28 2f       	mov	r18, r24
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <MDIO_u8SetPinValue+0x154>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <MDIO_u8SetPinValue+0x150>
     f26:	80 95       	com	r24
     f28:	84 23       	and	r24, r20
     f2a:	8c 93       	st	X, r24
     f2c:	70 c0       	rjmp	.+224    	; 0x100e <MDIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTC:
			     switch(Copy_u8PinValue)
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	28 2f       	mov	r18, r24
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	38 87       	std	Y+8, r19	; 0x08
     f36:	2f 83       	std	Y+7, r18	; 0x07
     f38:	8f 81       	ldd	r24, Y+7	; 0x07
     f3a:	98 85       	ldd	r25, Y+8	; 0x08
     f3c:	00 97       	sbiw	r24, 0x00	; 0
     f3e:	d1 f0       	breq	.+52     	; 0xf74 <MDIO_u8SetPinValue+0x1a6>
     f40:	2f 81       	ldd	r18, Y+7	; 0x07
     f42:	38 85       	ldd	r19, Y+8	; 0x08
     f44:	21 30       	cpi	r18, 0x01	; 1
     f46:	31 05       	cpc	r19, r1
     f48:	09 f0       	breq	.+2      	; 0xf4c <MDIO_u8SetPinValue+0x17e>
     f4a:	61 c0       	rjmp	.+194    	; 0x100e <MDIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTC_u8_REG,Copy_u8PinID);
     f4c:	a5 e3       	ldi	r26, 0x35	; 53
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	e5 e3       	ldi	r30, 0x35	; 53
     f52:	f0 e0       	ldi	r31, 0x00	; 0
     f54:	80 81       	ld	r24, Z
     f56:	48 2f       	mov	r20, r24
     f58:	8b 81       	ldd	r24, Y+3	; 0x03
     f5a:	28 2f       	mov	r18, r24
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	02 2e       	mov	r0, r18
     f64:	02 c0       	rjmp	.+4      	; 0xf6a <MDIO_u8SetPinValue+0x19c>
     f66:	88 0f       	add	r24, r24
     f68:	99 1f       	adc	r25, r25
     f6a:	0a 94       	dec	r0
     f6c:	e2 f7       	brpl	.-8      	; 0xf66 <MDIO_u8SetPinValue+0x198>
     f6e:	84 2b       	or	r24, r20
     f70:	8c 93       	st	X, r24
     f72:	4d c0       	rjmp	.+154    	; 0x100e <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTC_u8_REG,Copy_u8PinID);
     f74:	a5 e3       	ldi	r26, 0x35	; 53
     f76:	b0 e0       	ldi	r27, 0x00	; 0
     f78:	e5 e3       	ldi	r30, 0x35	; 53
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	80 81       	ld	r24, Z
     f7e:	48 2f       	mov	r20, r24
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 2e       	mov	r0, r18
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <MDIO_u8SetPinValue+0x1c4>
     f8e:	88 0f       	add	r24, r24
     f90:	99 1f       	adc	r25, r25
     f92:	0a 94       	dec	r0
     f94:	e2 f7       	brpl	.-8      	; 0xf8e <MDIO_u8SetPinValue+0x1c0>
     f96:	80 95       	com	r24
     f98:	84 23       	and	r24, r20
     f9a:	8c 93       	st	X, r24
     f9c:	38 c0       	rjmp	.+112    	; 0x100e <MDIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTD:
			     switch(Copy_u8PinValue)
     f9e:	8c 81       	ldd	r24, Y+4	; 0x04
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	3e 83       	std	Y+6, r19	; 0x06
     fa6:	2d 83       	std	Y+5, r18	; 0x05
     fa8:	8d 81       	ldd	r24, Y+5	; 0x05
     faa:	9e 81       	ldd	r25, Y+6	; 0x06
     fac:	00 97       	sbiw	r24, 0x00	; 0
     fae:	c9 f0       	breq	.+50     	; 0xfe2 <MDIO_u8SetPinValue+0x214>
     fb0:	2d 81       	ldd	r18, Y+5	; 0x05
     fb2:	3e 81       	ldd	r19, Y+6	; 0x06
     fb4:	21 30       	cpi	r18, 0x01	; 1
     fb6:	31 05       	cpc	r19, r1
     fb8:	51 f5       	brne	.+84     	; 0x100e <MDIO_u8SetPinValue+0x240>
				  { 
					case DIO_u8_HIGH:
					 SET_BIT(PORTD_u8_REG,Copy_u8PinID);
     fba:	a2 e3       	ldi	r26, 0x32	; 50
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e2 e3       	ldi	r30, 0x32	; 50
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	48 2f       	mov	r20, r24
     fc6:	8b 81       	ldd	r24, Y+3	; 0x03
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	02 2e       	mov	r0, r18
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <MDIO_u8SetPinValue+0x20a>
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <MDIO_u8SetPinValue+0x206>
     fdc:	84 2b       	or	r24, r20
     fde:	8c 93       	st	X, r24
     fe0:	16 c0       	rjmp	.+44     	; 0x100e <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTD_u8_REG,Copy_u8PinID);
     fe2:	a2 e3       	ldi	r26, 0x32	; 50
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e2 e3       	ldi	r30, 0x32	; 50
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	48 2f       	mov	r20, r24
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	02 2e       	mov	r0, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <MDIO_u8SetPinValue+0x232>
     ffc:	88 0f       	add	r24, r24
     ffe:	99 1f       	adc	r25, r25
    1000:	0a 94       	dec	r0
    1002:	e2 f7       	brpl	.-8      	; 0xffc <MDIO_u8SetPinValue+0x22e>
    1004:	80 95       	com	r24
    1006:	84 23       	and	r24, r20
    1008:	8c 93       	st	X, r24
    100a:	01 c0       	rjmp	.+2      	; 0x100e <MDIO_u8SetPinValue+0x240>
			   break;
		   }
	  }
	  else
	  {
	      Local_u8ReturnState = STD_TYPES_NOK;
    100c:	19 82       	std	Y+1, r1	; 0x01
	  }
	return Local_u8ReturnState;
    100e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1010:	2e 96       	adiw	r28, 0x0e	; 14
    1012:	0f b6       	in	r0, 0x3f	; 63
    1014:	f8 94       	cli
    1016:	de bf       	out	0x3e, r29	; 62
    1018:	0f be       	out	0x3f, r0	; 63
    101a:	cd bf       	out	0x3d, r28	; 61
    101c:	cf 91       	pop	r28
    101e:	df 91       	pop	r29
    1020:	08 95       	ret

00001022 <MDIO_u8GetPinValue>:
u8 MDIO_u8GetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8ReturnedPinValue)
{
    1022:	df 93       	push	r29
    1024:	cf 93       	push	r28
    1026:	cd b7       	in	r28, 0x3d	; 61
    1028:	de b7       	in	r29, 0x3e	; 62
    102a:	27 97       	sbiw	r28, 0x07	; 7
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	8a 83       	std	Y+2, r24	; 0x02
    1038:	6b 83       	std	Y+3, r22	; 0x03
    103a:	5d 83       	std	Y+5, r21	; 0x05
    103c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1042:	8a 81       	ldd	r24, Y+2	; 0x02
    1044:	84 30       	cpi	r24, 0x04	; 4
    1046:	08 f0       	brcs	.+2      	; 0x104a <MDIO_u8GetPinValue+0x28>
    1048:	ea c0       	rjmp	.+468    	; 0x121e <MDIO_u8GetPinValue+0x1fc>
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	88 30       	cpi	r24, 0x08	; 8
    104e:	08 f0       	brcs	.+2      	; 0x1052 <MDIO_u8GetPinValue+0x30>
    1050:	e6 c0       	rjmp	.+460    	; 0x121e <MDIO_u8GetPinValue+0x1fc>
    1052:	8c 81       	ldd	r24, Y+4	; 0x04
    1054:	9d 81       	ldd	r25, Y+5	; 0x05
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	09 f4       	brne	.+2      	; 0x105c <MDIO_u8GetPinValue+0x3a>
    105a:	e1 c0       	rjmp	.+450    	; 0x121e <MDIO_u8GetPinValue+0x1fc>
	{
		switch (Copy_u8PortID)
    105c:	8a 81       	ldd	r24, Y+2	; 0x02
    105e:	28 2f       	mov	r18, r24
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	3f 83       	std	Y+7, r19	; 0x07
    1064:	2e 83       	std	Y+6, r18	; 0x06
    1066:	4e 81       	ldd	r20, Y+6	; 0x06
    1068:	5f 81       	ldd	r21, Y+7	; 0x07
    106a:	41 30       	cpi	r20, 0x01	; 1
    106c:	51 05       	cpc	r21, r1
    106e:	09 f4       	brne	.+2      	; 0x1072 <MDIO_u8GetPinValue+0x50>
    1070:	48 c0       	rjmp	.+144    	; 0x1102 <MDIO_u8GetPinValue+0xe0>
    1072:	8e 81       	ldd	r24, Y+6	; 0x06
    1074:	9f 81       	ldd	r25, Y+7	; 0x07
    1076:	82 30       	cpi	r24, 0x02	; 2
    1078:	91 05       	cpc	r25, r1
    107a:	34 f4       	brge	.+12     	; 0x1088 <MDIO_u8GetPinValue+0x66>
    107c:	2e 81       	ldd	r18, Y+6	; 0x06
    107e:	3f 81       	ldd	r19, Y+7	; 0x07
    1080:	21 15       	cp	r18, r1
    1082:	31 05       	cpc	r19, r1
    1084:	71 f0       	breq	.+28     	; 0x10a2 <MDIO_u8GetPinValue+0x80>
    1086:	cc c0       	rjmp	.+408    	; 0x1220 <MDIO_u8GetPinValue+0x1fe>
    1088:	4e 81       	ldd	r20, Y+6	; 0x06
    108a:	5f 81       	ldd	r21, Y+7	; 0x07
    108c:	42 30       	cpi	r20, 0x02	; 2
    108e:	51 05       	cpc	r21, r1
    1090:	09 f4       	brne	.+2      	; 0x1094 <MDIO_u8GetPinValue+0x72>
    1092:	67 c0       	rjmp	.+206    	; 0x1162 <MDIO_u8GetPinValue+0x140>
    1094:	8e 81       	ldd	r24, Y+6	; 0x06
    1096:	9f 81       	ldd	r25, Y+7	; 0x07
    1098:	83 30       	cpi	r24, 0x03	; 3
    109a:	91 05       	cpc	r25, r1
    109c:	09 f4       	brne	.+2      	; 0x10a0 <MDIO_u8GetPinValue+0x7e>
    109e:	90 c0       	rjmp	.+288    	; 0x11c0 <MDIO_u8GetPinValue+0x19e>
    10a0:	bf c0       	rjmp	.+382    	; 0x1220 <MDIO_u8GetPinValue+0x1fe>
		{
			case DIO_u8_PORTA: 
			   if(GET_BIT(PINA_u8_REG,Copy_u8PinID)== 0)
    10a2:	e9 e3       	ldi	r30, 0x39	; 57
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	28 2f       	mov	r18, r24
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	88 2f       	mov	r24, r24
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	a9 01       	movw	r20, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <MDIO_u8GetPinValue+0x98>
    10b6:	55 95       	asr	r21
    10b8:	47 95       	ror	r20
    10ba:	8a 95       	dec	r24
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <MDIO_u8GetPinValue+0x94>
    10be:	ca 01       	movw	r24, r20
    10c0:	81 70       	andi	r24, 0x01	; 1
    10c2:	90 70       	andi	r25, 0x00	; 0
    10c4:	00 97       	sbiw	r24, 0x00	; 0
    10c6:	21 f4       	brne	.+8      	; 0x10d0 <MDIO_u8GetPinValue+0xae>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    10c8:	ec 81       	ldd	r30, Y+4	; 0x04
    10ca:	fd 81       	ldd	r31, Y+5	; 0x05
    10cc:	10 82       	st	Z, r1
    10ce:	a8 c0       	rjmp	.+336    	; 0x1220 <MDIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINA_u8_REG,Copy_u8PinID)!=0)
    10d0:	e9 e3       	ldi	r30, 0x39	; 57
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	28 2f       	mov	r18, r24
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	88 2f       	mov	r24, r24
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a9 01       	movw	r20, r18
    10e2:	02 c0       	rjmp	.+4      	; 0x10e8 <MDIO_u8GetPinValue+0xc6>
    10e4:	55 95       	asr	r21
    10e6:	47 95       	ror	r20
    10e8:	8a 95       	dec	r24
    10ea:	e2 f7       	brpl	.-8      	; 0x10e4 <MDIO_u8GetPinValue+0xc2>
    10ec:	ca 01       	movw	r24, r20
    10ee:	81 70       	andi	r24, 0x01	; 1
    10f0:	90 70       	andi	r25, 0x00	; 0
    10f2:	88 23       	and	r24, r24
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <MDIO_u8GetPinValue+0xd6>
    10f6:	94 c0       	rjmp	.+296    	; 0x1220 <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    10f8:	ec 81       	ldd	r30, Y+4	; 0x04
    10fa:	fd 81       	ldd	r31, Y+5	; 0x05
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	80 83       	st	Z, r24
    1100:	8f c0       	rjmp	.+286    	; 0x1220 <MDIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTB: 
			   if(GET_BIT(PINB_u8_REG,Copy_u8PinID)== 0)
    1102:	e6 e3       	ldi	r30, 0x36	; 54
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	88 2f       	mov	r24, r24
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	a9 01       	movw	r20, r18
    1114:	02 c0       	rjmp	.+4      	; 0x111a <MDIO_u8GetPinValue+0xf8>
    1116:	55 95       	asr	r21
    1118:	47 95       	ror	r20
    111a:	8a 95       	dec	r24
    111c:	e2 f7       	brpl	.-8      	; 0x1116 <MDIO_u8GetPinValue+0xf4>
    111e:	ca 01       	movw	r24, r20
    1120:	81 70       	andi	r24, 0x01	; 1
    1122:	90 70       	andi	r25, 0x00	; 0
    1124:	00 97       	sbiw	r24, 0x00	; 0
    1126:	21 f4       	brne	.+8      	; 0x1130 <MDIO_u8GetPinValue+0x10e>
			    {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1128:	ec 81       	ldd	r30, Y+4	; 0x04
    112a:	fd 81       	ldd	r31, Y+5	; 0x05
    112c:	10 82       	st	Z, r1
    112e:	78 c0       	rjmp	.+240    	; 0x1220 <MDIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINB_u8_REG,Copy_u8PinID)!=0)
    1130:	e6 e3       	ldi	r30, 0x36	; 54
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	80 81       	ld	r24, Z
    1136:	28 2f       	mov	r18, r24
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	88 2f       	mov	r24, r24
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a9 01       	movw	r20, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <MDIO_u8GetPinValue+0x126>
    1144:	55 95       	asr	r21
    1146:	47 95       	ror	r20
    1148:	8a 95       	dec	r24
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <MDIO_u8GetPinValue+0x122>
    114c:	ca 01       	movw	r24, r20
    114e:	81 70       	andi	r24, 0x01	; 1
    1150:	90 70       	andi	r25, 0x00	; 0
    1152:	88 23       	and	r24, r24
    1154:	09 f4       	brne	.+2      	; 0x1158 <MDIO_u8GetPinValue+0x136>
    1156:	64 c0       	rjmp	.+200    	; 0x1220 <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1158:	ec 81       	ldd	r30, Y+4	; 0x04
    115a:	fd 81       	ldd	r31, Y+5	; 0x05
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	80 83       	st	Z, r24
    1160:	5f c0       	rjmp	.+190    	; 0x1220 <MDIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTC: 
			   if(GET_BIT(PINC_u8_REG,Copy_u8PinID)== 0)
    1162:	e3 e3       	ldi	r30, 0x33	; 51
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	28 2f       	mov	r18, r24
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	88 2f       	mov	r24, r24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	a9 01       	movw	r20, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <MDIO_u8GetPinValue+0x158>
    1176:	55 95       	asr	r21
    1178:	47 95       	ror	r20
    117a:	8a 95       	dec	r24
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <MDIO_u8GetPinValue+0x154>
    117e:	ca 01       	movw	r24, r20
    1180:	81 70       	andi	r24, 0x01	; 1
    1182:	90 70       	andi	r25, 0x00	; 0
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	21 f4       	brne	.+8      	; 0x1190 <MDIO_u8GetPinValue+0x16e>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1188:	ec 81       	ldd	r30, Y+4	; 0x04
    118a:	fd 81       	ldd	r31, Y+5	; 0x05
    118c:	10 82       	st	Z, r1
    118e:	48 c0       	rjmp	.+144    	; 0x1220 <MDIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINC_u8_REG,Copy_u8PinID)!=0)
    1190:	e3 e3       	ldi	r30, 0x33	; 51
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	88 2f       	mov	r24, r24
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	a9 01       	movw	r20, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <MDIO_u8GetPinValue+0x186>
    11a4:	55 95       	asr	r21
    11a6:	47 95       	ror	r20
    11a8:	8a 95       	dec	r24
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <MDIO_u8GetPinValue+0x182>
    11ac:	ca 01       	movw	r24, r20
    11ae:	81 70       	andi	r24, 0x01	; 1
    11b0:	90 70       	andi	r25, 0x00	; 0
    11b2:	88 23       	and	r24, r24
    11b4:	a9 f1       	breq	.+106    	; 0x1220 <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    11b6:	ec 81       	ldd	r30, Y+4	; 0x04
    11b8:	fd 81       	ldd	r31, Y+5	; 0x05
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	80 83       	st	Z, r24
    11be:	30 c0       	rjmp	.+96     	; 0x1220 <MDIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTD: 
			   if(GET_BIT(PIND_u8_REG,Copy_u8PinID)== 0)
    11c0:	e0 e3       	ldi	r30, 0x30	; 48
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	88 2f       	mov	r24, r24
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	a9 01       	movw	r20, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <MDIO_u8GetPinValue+0x1b6>
    11d4:	55 95       	asr	r21
    11d6:	47 95       	ror	r20
    11d8:	8a 95       	dec	r24
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <MDIO_u8GetPinValue+0x1b2>
    11dc:	ca 01       	movw	r24, r20
    11de:	81 70       	andi	r24, 0x01	; 1
    11e0:	90 70       	andi	r25, 0x00	; 0
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	21 f4       	brne	.+8      	; 0x11ee <MDIO_u8GetPinValue+0x1cc>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    11e6:	ec 81       	ldd	r30, Y+4	; 0x04
    11e8:	fd 81       	ldd	r31, Y+5	; 0x05
    11ea:	10 82       	st	Z, r1
    11ec:	19 c0       	rjmp	.+50     	; 0x1220 <MDIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PIND_u8_REG,Copy_u8PinID)!=0)
    11ee:	e0 e3       	ldi	r30, 0x30	; 48
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	28 2f       	mov	r18, r24
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	88 2f       	mov	r24, r24
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	a9 01       	movw	r20, r18
    1200:	02 c0       	rjmp	.+4      	; 0x1206 <MDIO_u8GetPinValue+0x1e4>
    1202:	55 95       	asr	r21
    1204:	47 95       	ror	r20
    1206:	8a 95       	dec	r24
    1208:	e2 f7       	brpl	.-8      	; 0x1202 <MDIO_u8GetPinValue+0x1e0>
    120a:	ca 01       	movw	r24, r20
    120c:	81 70       	andi	r24, 0x01	; 1
    120e:	90 70       	andi	r25, 0x00	; 0
    1210:	88 23       	and	r24, r24
    1212:	31 f0       	breq	.+12     	; 0x1220 <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1214:	ec 81       	ldd	r30, Y+4	; 0x04
    1216:	fd 81       	ldd	r31, Y+5	; 0x05
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	80 83       	st	Z, r24
    121c:	01 c0       	rjmp	.+2      	; 0x1220 <MDIO_u8GetPinValue+0x1fe>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    121e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1220:	89 81       	ldd	r24, Y+1	; 0x01
}
    1222:	27 96       	adiw	r28, 0x07	; 7
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	cf 91       	pop	r28
    1230:	df 91       	pop	r29
    1232:	08 95       	ret

00001234 <MDIO_u8SetPortDirection>:
u8 MDIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection )
{
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	2d 97       	sbiw	r28, 0x0d	; 13
    123e:	0f b6       	in	r0, 0x3f	; 63
    1240:	f8 94       	cli
    1242:	de bf       	out	0x3e, r29	; 62
    1244:	0f be       	out	0x3f, r0	; 63
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	8a 83       	std	Y+2, r24	; 0x02
    124a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD) && ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT)))
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	84 30       	cpi	r24, 0x04	; 4
    1254:	08 f0       	brcs	.+2      	; 0x1258 <MDIO_u8SetPortDirection+0x24>
    1256:	87 c0       	rjmp	.+270    	; 0x1366 <MDIO_u8SetPortDirection+0x132>
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	21 f0       	breq	.+8      	; 0x1266 <MDIO_u8SetPortDirection+0x32>
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	88 23       	and	r24, r24
    1262:	09 f0       	breq	.+2      	; 0x1266 <MDIO_u8SetPortDirection+0x32>
    1264:	80 c0       	rjmp	.+256    	; 0x1366 <MDIO_u8SetPortDirection+0x132>
	{
		switch(Copy_u8PortID)
    1266:	8a 81       	ldd	r24, Y+2	; 0x02
    1268:	28 2f       	mov	r18, r24
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	3d 87       	std	Y+13, r19	; 0x0d
    126e:	2c 87       	std	Y+12, r18	; 0x0c
    1270:	8c 85       	ldd	r24, Y+12	; 0x0c
    1272:	9d 85       	ldd	r25, Y+13	; 0x0d
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	91 05       	cpc	r25, r1
    1278:	71 f1       	breq	.+92     	; 0x12d6 <MDIO_u8SetPortDirection+0xa2>
    127a:	2c 85       	ldd	r18, Y+12	; 0x0c
    127c:	3d 85       	ldd	r19, Y+13	; 0x0d
    127e:	22 30       	cpi	r18, 0x02	; 2
    1280:	31 05       	cpc	r19, r1
    1282:	2c f4       	brge	.+10     	; 0x128e <MDIO_u8SetPortDirection+0x5a>
    1284:	8c 85       	ldd	r24, Y+12	; 0x0c
    1286:	9d 85       	ldd	r25, Y+13	; 0x0d
    1288:	00 97       	sbiw	r24, 0x00	; 0
    128a:	69 f0       	breq	.+26     	; 0x12a6 <MDIO_u8SetPortDirection+0x72>
    128c:	6d c0       	rjmp	.+218    	; 0x1368 <MDIO_u8SetPortDirection+0x134>
    128e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1290:	3d 85       	ldd	r19, Y+13	; 0x0d
    1292:	22 30       	cpi	r18, 0x02	; 2
    1294:	31 05       	cpc	r19, r1
    1296:	b9 f1       	breq	.+110    	; 0x1306 <MDIO_u8SetPortDirection+0xd2>
    1298:	8c 85       	ldd	r24, Y+12	; 0x0c
    129a:	9d 85       	ldd	r25, Y+13	; 0x0d
    129c:	83 30       	cpi	r24, 0x03	; 3
    129e:	91 05       	cpc	r25, r1
    12a0:	09 f4       	brne	.+2      	; 0x12a4 <MDIO_u8SetPortDirection+0x70>
    12a2:	49 c0       	rjmp	.+146    	; 0x1336 <MDIO_u8SetPortDirection+0x102>
    12a4:	61 c0       	rjmp	.+194    	; 0x1368 <MDIO_u8SetPortDirection+0x134>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PortDirection)
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	3b 87       	std	Y+11, r19	; 0x0b
    12ae:	2a 87       	std	Y+10, r18	; 0x0a
    12b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    12b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	31 f0       	breq	.+12     	; 0x12c4 <MDIO_u8SetPortDirection+0x90>
    12b8:	2a 85       	ldd	r18, Y+10	; 0x0a
    12ba:	3b 85       	ldd	r19, Y+11	; 0x0b
    12bc:	21 30       	cpi	r18, 0x01	; 1
    12be:	31 05       	cpc	r19, r1
    12c0:	29 f0       	breq	.+10     	; 0x12cc <MDIO_u8SetPortDirection+0x98>
    12c2:	52 c0       	rjmp	.+164    	; 0x1368 <MDIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRA_u8_REG = 0x00;break;
    12c4:	ea e3       	ldi	r30, 0x3A	; 58
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	10 82       	st	Z, r1
    12ca:	4e c0       	rjmp	.+156    	; 0x1368 <MDIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRA_u8_REG = 0xFF;break;
    12cc:	ea e3       	ldi	r30, 0x3A	; 58
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	8f ef       	ldi	r24, 0xFF	; 255
    12d2:	80 83       	st	Z, r24
    12d4:	49 c0       	rjmp	.+146    	; 0x1368 <MDIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PortDirection)
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	39 87       	std	Y+9, r19	; 0x09
    12de:	28 87       	std	Y+8, r18	; 0x08
    12e0:	88 85       	ldd	r24, Y+8	; 0x08
    12e2:	99 85       	ldd	r25, Y+9	; 0x09
    12e4:	00 97       	sbiw	r24, 0x00	; 0
    12e6:	31 f0       	breq	.+12     	; 0x12f4 <MDIO_u8SetPortDirection+0xc0>
    12e8:	28 85       	ldd	r18, Y+8	; 0x08
    12ea:	39 85       	ldd	r19, Y+9	; 0x09
    12ec:	21 30       	cpi	r18, 0x01	; 1
    12ee:	31 05       	cpc	r19, r1
    12f0:	29 f0       	breq	.+10     	; 0x12fc <MDIO_u8SetPortDirection+0xc8>
    12f2:	3a c0       	rjmp	.+116    	; 0x1368 <MDIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRB_u8_REG = 0x00;break;
    12f4:	e7 e3       	ldi	r30, 0x37	; 55
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	10 82       	st	Z, r1
    12fa:	36 c0       	rjmp	.+108    	; 0x1368 <MDIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRB_u8_REG = 0xFF;break;
    12fc:	e7 e3       	ldi	r30, 0x37	; 55
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	8f ef       	ldi	r24, 0xFF	; 255
    1302:	80 83       	st	Z, r24
    1304:	31 c0       	rjmp	.+98     	; 0x1368 <MDIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PortDirection)
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	28 2f       	mov	r18, r24
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	3f 83       	std	Y+7, r19	; 0x07
    130e:	2e 83       	std	Y+6, r18	; 0x06
    1310:	8e 81       	ldd	r24, Y+6	; 0x06
    1312:	9f 81       	ldd	r25, Y+7	; 0x07
    1314:	00 97       	sbiw	r24, 0x00	; 0
    1316:	31 f0       	breq	.+12     	; 0x1324 <MDIO_u8SetPortDirection+0xf0>
    1318:	2e 81       	ldd	r18, Y+6	; 0x06
    131a:	3f 81       	ldd	r19, Y+7	; 0x07
    131c:	21 30       	cpi	r18, 0x01	; 1
    131e:	31 05       	cpc	r19, r1
    1320:	29 f0       	breq	.+10     	; 0x132c <MDIO_u8SetPortDirection+0xf8>
    1322:	22 c0       	rjmp	.+68     	; 0x1368 <MDIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRC_u8_REG = 0x00;break;
    1324:	e4 e3       	ldi	r30, 0x34	; 52
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	10 82       	st	Z, r1
    132a:	1e c0       	rjmp	.+60     	; 0x1368 <MDIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRC_u8_REG = 0xFF;break;
    132c:	e4 e3       	ldi	r30, 0x34	; 52
    132e:	f0 e0       	ldi	r31, 0x00	; 0
    1330:	8f ef       	ldi	r24, 0xFF	; 255
    1332:	80 83       	st	Z, r24
    1334:	19 c0       	rjmp	.+50     	; 0x1368 <MDIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PortDirection)
    1336:	8b 81       	ldd	r24, Y+3	; 0x03
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	3d 83       	std	Y+5, r19	; 0x05
    133e:	2c 83       	std	Y+4, r18	; 0x04
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	9d 81       	ldd	r25, Y+5	; 0x05
    1344:	00 97       	sbiw	r24, 0x00	; 0
    1346:	31 f0       	breq	.+12     	; 0x1354 <MDIO_u8SetPortDirection+0x120>
    1348:	2c 81       	ldd	r18, Y+4	; 0x04
    134a:	3d 81       	ldd	r19, Y+5	; 0x05
    134c:	21 30       	cpi	r18, 0x01	; 1
    134e:	31 05       	cpc	r19, r1
    1350:	29 f0       	breq	.+10     	; 0x135c <MDIO_u8SetPortDirection+0x128>
    1352:	0a c0       	rjmp	.+20     	; 0x1368 <MDIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRD_u8_REG = 0x00;break;
    1354:	e1 e3       	ldi	r30, 0x31	; 49
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	10 82       	st	Z, r1
    135a:	06 c0       	rjmp	.+12     	; 0x1368 <MDIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRD_u8_REG = 0xFF;break;
    135c:	e1 e3       	ldi	r30, 0x31	; 49
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	80 83       	st	Z, r24
    1364:	01 c0       	rjmp	.+2      	; 0x1368 <MDIO_u8SetPortDirection+0x134>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    1366:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1368:	89 81       	ldd	r24, Y+1	; 0x01
}
    136a:	2d 96       	adiw	r28, 0x0d	; 13
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <MDIO_u8SetPortValue>:

u8 MDIO_u8SetPortValue    (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	00 d0       	rcall	.+0      	; 0x1382 <MDIO_u8SetPortValue+0x6>
    1382:	00 d0       	rcall	.+0      	; 0x1384 <MDIO_u8SetPortValue+0x8>
    1384:	0f 92       	push	r0
    1386:	cd b7       	in	r28, 0x3d	; 61
    1388:	de b7       	in	r29, 0x3e	; 62
    138a:	8a 83       	std	Y+2, r24	; 0x02
    138c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID)
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	3d 83       	std	Y+5, r19	; 0x05
    139a:	2c 83       	std	Y+4, r18	; 0x04
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	9d 81       	ldd	r25, Y+5	; 0x05
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	91 05       	cpc	r25, r1
    13a4:	d1 f0       	breq	.+52     	; 0x13da <MDIO_u8SetPortValue+0x5e>
    13a6:	2c 81       	ldd	r18, Y+4	; 0x04
    13a8:	3d 81       	ldd	r19, Y+5	; 0x05
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	2c f4       	brge	.+10     	; 0x13ba <MDIO_u8SetPortValue+0x3e>
    13b0:	8c 81       	ldd	r24, Y+4	; 0x04
    13b2:	9d 81       	ldd	r25, Y+5	; 0x05
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	61 f0       	breq	.+24     	; 0x13d0 <MDIO_u8SetPortValue+0x54>
    13b8:	1f c0       	rjmp	.+62     	; 0x13f8 <MDIO_u8SetPortValue+0x7c>
    13ba:	2c 81       	ldd	r18, Y+4	; 0x04
    13bc:	3d 81       	ldd	r19, Y+5	; 0x05
    13be:	22 30       	cpi	r18, 0x02	; 2
    13c0:	31 05       	cpc	r19, r1
    13c2:	81 f0       	breq	.+32     	; 0x13e4 <MDIO_u8SetPortValue+0x68>
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	9d 81       	ldd	r25, Y+5	; 0x05
    13c8:	83 30       	cpi	r24, 0x03	; 3
    13ca:	91 05       	cpc	r25, r1
    13cc:	81 f0       	breq	.+32     	; 0x13ee <MDIO_u8SetPortValue+0x72>
    13ce:	14 c0       	rjmp	.+40     	; 0x13f8 <MDIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:PORTA_u8_REG = Copy_u8PortValue; break;
    13d0:	eb e3       	ldi	r30, 0x3B	; 59
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	80 83       	st	Z, r24
    13d8:	10 c0       	rjmp	.+32     	; 0x13fa <MDIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:PORTB_u8_REG = Copy_u8PortValue; break;
    13da:	e8 e3       	ldi	r30, 0x38	; 56
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	80 83       	st	Z, r24
    13e2:	0b c0       	rjmp	.+22     	; 0x13fa <MDIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:PORTC_u8_REG = Copy_u8PortValue; break;
    13e4:	e5 e3       	ldi	r30, 0x35	; 53
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	80 83       	st	Z, r24
    13ec:	06 c0       	rjmp	.+12     	; 0x13fa <MDIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:PORTD_u8_REG = Copy_u8PortValue; break;
    13ee:	e2 e3       	ldi	r30, 0x32	; 50
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	80 83       	st	Z, r24
    13f6:	01 c0       	rjmp	.+2      	; 0x13fa <MDIO_u8SetPortValue+0x7e>
		default : Local_u8ReturnState = STD_TYPES_NOK;
    13f8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    13fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	0f 90       	pop	r0
    1402:	0f 90       	pop	r0
    1404:	0f 90       	pop	r0
    1406:	cf 91       	pop	r28
    1408:	df 91       	pop	r29
    140a:	08 95       	ret

0000140c <MDIO_u8Set4PinsValue>:

u8 MDIO_u8Set4PinsValue    (u8 Copy_u8PortID, u8 Copy_u8PinStart, u8 Copy_u8PortValue)
{
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	00 d0       	rcall	.+0      	; 0x1412 <MDIO_u8Set4PinsValue+0x6>
    1412:	00 d0       	rcall	.+0      	; 0x1414 <MDIO_u8Set4PinsValue+0x8>
    1414:	00 d0       	rcall	.+0      	; 0x1416 <MDIO_u8Set4PinsValue+0xa>
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
    141a:	8a 83       	std	Y+2, r24	; 0x02
    141c:	6b 83       	std	Y+3, r22	; 0x03
    141e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1420:	81 e0       	ldi	r24, 0x01	; 1
    1422:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PinStart<=4)
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	85 30       	cpi	r24, 0x05	; 5
    1428:	08 f0       	brcs	.+2      	; 0x142c <MDIO_u8Set4PinsValue+0x20>
    142a:	c7 c0       	rjmp	.+398    	; 0x15ba <MDIO_u8Set4PinsValue+0x1ae>
	{
		switch(Copy_u8PortID)
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	3e 83       	std	Y+6, r19	; 0x06
    1434:	2d 83       	std	Y+5, r18	; 0x05
    1436:	6d 81       	ldd	r22, Y+5	; 0x05
    1438:	7e 81       	ldd	r23, Y+6	; 0x06
    143a:	61 30       	cpi	r22, 0x01	; 1
    143c:	71 05       	cpc	r23, r1
    143e:	09 f4       	brne	.+2      	; 0x1442 <MDIO_u8Set4PinsValue+0x36>
    1440:	41 c0       	rjmp	.+130    	; 0x14c4 <MDIO_u8Set4PinsValue+0xb8>
    1442:	8d 81       	ldd	r24, Y+5	; 0x05
    1444:	9e 81       	ldd	r25, Y+6	; 0x06
    1446:	82 30       	cpi	r24, 0x02	; 2
    1448:	91 05       	cpc	r25, r1
    144a:	34 f4       	brge	.+12     	; 0x1458 <MDIO_u8Set4PinsValue+0x4c>
    144c:	2d 81       	ldd	r18, Y+5	; 0x05
    144e:	3e 81       	ldd	r19, Y+6	; 0x06
    1450:	21 15       	cp	r18, r1
    1452:	31 05       	cpc	r19, r1
    1454:	71 f0       	breq	.+28     	; 0x1472 <MDIO_u8Set4PinsValue+0x66>
    1456:	b2 c0       	rjmp	.+356    	; 0x15bc <MDIO_u8Set4PinsValue+0x1b0>
    1458:	6d 81       	ldd	r22, Y+5	; 0x05
    145a:	7e 81       	ldd	r23, Y+6	; 0x06
    145c:	62 30       	cpi	r22, 0x02	; 2
    145e:	71 05       	cpc	r23, r1
    1460:	09 f4       	brne	.+2      	; 0x1464 <MDIO_u8Set4PinsValue+0x58>
    1462:	59 c0       	rjmp	.+178    	; 0x1516 <MDIO_u8Set4PinsValue+0x10a>
    1464:	8d 81       	ldd	r24, Y+5	; 0x05
    1466:	9e 81       	ldd	r25, Y+6	; 0x06
    1468:	83 30       	cpi	r24, 0x03	; 3
    146a:	91 05       	cpc	r25, r1
    146c:	09 f4       	brne	.+2      	; 0x1470 <MDIO_u8Set4PinsValue+0x64>
    146e:	7c c0       	rjmp	.+248    	; 0x1568 <MDIO_u8Set4PinsValue+0x15c>
    1470:	a5 c0       	rjmp	.+330    	; 0x15bc <MDIO_u8Set4PinsValue+0x1b0>
		{
		case DIO_u8_PORTA:
			PORTA_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    1472:	ab e3       	ldi	r26, 0x3B	; 59
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	eb e3       	ldi	r30, 0x3B	; 59
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	48 2f       	mov	r20, r24
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	8f e0       	ldi	r24, 0x0F	; 15
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 c0       	rjmp	.+4      	; 0x148e <MDIO_u8Set4PinsValue+0x82>
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	2a 95       	dec	r18
    1490:	e2 f7       	brpl	.-8      	; 0x148a <MDIO_u8Set4PinsValue+0x7e>
    1492:	80 95       	com	r24
    1494:	84 23       	and	r24, r20
    1496:	8c 93       	st	X, r24
			PORTA_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    1498:	ab e3       	ldi	r26, 0x3B	; 59
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	eb e3       	ldi	r30, 0x3B	; 59
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	48 2f       	mov	r20, r24
    14a4:	8c 81       	ldd	r24, Y+4	; 0x04
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	b9 01       	movw	r22, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <MDIO_u8Set4PinsValue+0xac>
    14b4:	66 0f       	add	r22, r22
    14b6:	77 1f       	adc	r23, r23
    14b8:	8a 95       	dec	r24
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <MDIO_u8Set4PinsValue+0xa8>
    14bc:	cb 01       	movw	r24, r22
    14be:	84 2b       	or	r24, r20
    14c0:	8c 93       	st	X, r24
    14c2:	7c c0       	rjmp	.+248    	; 0x15bc <MDIO_u8Set4PinsValue+0x1b0>
			break;
		case DIO_u8_PORTB:
			PORTB_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    14c4:	a8 e3       	ldi	r26, 0x38	; 56
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e8 e3       	ldi	r30, 0x38	; 56
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	48 2f       	mov	r20, r24
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	28 2f       	mov	r18, r24
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	8f e0       	ldi	r24, 0x0F	; 15
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <MDIO_u8Set4PinsValue+0xd4>
    14dc:	88 0f       	add	r24, r24
    14de:	99 1f       	adc	r25, r25
    14e0:	2a 95       	dec	r18
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <MDIO_u8Set4PinsValue+0xd0>
    14e4:	80 95       	com	r24
    14e6:	84 23       	and	r24, r20
    14e8:	8c 93       	st	X, r24
			PORTB_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    14ea:	a8 e3       	ldi	r26, 0x38	; 56
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	e8 e3       	ldi	r30, 0x38	; 56
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	48 2f       	mov	r20, r24
    14f6:	8c 81       	ldd	r24, Y+4	; 0x04
    14f8:	28 2f       	mov	r18, r24
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	8b 81       	ldd	r24, Y+3	; 0x03
    14fe:	88 2f       	mov	r24, r24
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	b9 01       	movw	r22, r18
    1504:	02 c0       	rjmp	.+4      	; 0x150a <MDIO_u8Set4PinsValue+0xfe>
    1506:	66 0f       	add	r22, r22
    1508:	77 1f       	adc	r23, r23
    150a:	8a 95       	dec	r24
    150c:	e2 f7       	brpl	.-8      	; 0x1506 <MDIO_u8Set4PinsValue+0xfa>
    150e:	cb 01       	movw	r24, r22
    1510:	84 2b       	or	r24, r20
    1512:	8c 93       	st	X, r24
    1514:	53 c0       	rjmp	.+166    	; 0x15bc <MDIO_u8Set4PinsValue+0x1b0>
			break;
		case DIO_u8_PORTC:
			PORTC_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    1516:	a5 e3       	ldi	r26, 0x35	; 53
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e5 e3       	ldi	r30, 0x35	; 53
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	48 2f       	mov	r20, r24
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	28 2f       	mov	r18, r24
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	8f e0       	ldi	r24, 0x0F	; 15
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <MDIO_u8Set4PinsValue+0x126>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	2a 95       	dec	r18
    1534:	e2 f7       	brpl	.-8      	; 0x152e <MDIO_u8Set4PinsValue+0x122>
    1536:	80 95       	com	r24
    1538:	84 23       	and	r24, r20
    153a:	8c 93       	st	X, r24
			PORTC_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    153c:	a5 e3       	ldi	r26, 0x35	; 53
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e5 e3       	ldi	r30, 0x35	; 53
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	48 2f       	mov	r20, r24
    1548:	8c 81       	ldd	r24, Y+4	; 0x04
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	88 2f       	mov	r24, r24
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	b9 01       	movw	r22, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <MDIO_u8Set4PinsValue+0x150>
    1558:	66 0f       	add	r22, r22
    155a:	77 1f       	adc	r23, r23
    155c:	8a 95       	dec	r24
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <MDIO_u8Set4PinsValue+0x14c>
    1560:	cb 01       	movw	r24, r22
    1562:	84 2b       	or	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	2a c0       	rjmp	.+84     	; 0x15bc <MDIO_u8Set4PinsValue+0x1b0>
			break;
		case DIO_u8_PORTD:

			PORTD_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    1568:	a2 e3       	ldi	r26, 0x32	; 50
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e2 e3       	ldi	r30, 0x32	; 50
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	8b 81       	ldd	r24, Y+3	; 0x03
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	8f e0       	ldi	r24, 0x0F	; 15
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <MDIO_u8Set4PinsValue+0x178>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	2a 95       	dec	r18
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <MDIO_u8Set4PinsValue+0x174>
    1588:	80 95       	com	r24
    158a:	84 23       	and	r24, r20
    158c:	8c 93       	st	X, r24
			PORTD_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    158e:	a2 e3       	ldi	r26, 0x32	; 50
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e2 e3       	ldi	r30, 0x32	; 50
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	88 2f       	mov	r24, r24
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	b9 01       	movw	r22, r18
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <MDIO_u8Set4PinsValue+0x1a2>
    15aa:	66 0f       	add	r22, r22
    15ac:	77 1f       	adc	r23, r23
    15ae:	8a 95       	dec	r24
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <MDIO_u8Set4PinsValue+0x19e>
    15b2:	cb 01       	movw	r24, r22
    15b4:	84 2b       	or	r24, r20
    15b6:	8c 93       	st	X, r24
    15b8:	01 c0       	rjmp	.+2      	; 0x15bc <MDIO_u8Set4PinsValue+0x1b0>

		}
	}
	else
		{
			Local_u8ReturnState = STD_TYPES_NOK;
    15ba:	19 82       	std	Y+1, r1	; 0x01
		}
	return Local_u8ReturnState;
    15bc:	89 81       	ldd	r24, Y+1	; 0x01

}
    15be:	26 96       	adiw	r28, 0x06	; 6
    15c0:	0f b6       	in	r0, 0x3f	; 63
    15c2:	f8 94       	cli
    15c4:	de bf       	out	0x3e, r29	; 62
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	cd bf       	out	0x3d, r28	; 61
    15ca:	cf 91       	pop	r28
    15cc:	df 91       	pop	r29
    15ce:	08 95       	ret

000015d0 <MDIO_u8GetPortValue>:


u8 MDIO_u8GetPortValue    (u8 Copy_u8PortID, u8 * Copy_pu8ReturnedPortValue)
{
    15d0:	df 93       	push	r29
    15d2:	cf 93       	push	r28
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <MDIO_u8GetPortValue+0x6>
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <MDIO_u8GetPortValue+0x8>
    15d8:	00 d0       	rcall	.+0      	; 0x15da <MDIO_u8GetPortValue+0xa>
    15da:	cd b7       	in	r28, 0x3d	; 61
    15dc:	de b7       	in	r29, 0x3e	; 62
    15de:	8a 83       	std	Y+2, r24	; 0x02
    15e0:	7c 83       	std	Y+4, r23	; 0x04
    15e2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	9c 81       	ldd	r25, Y+4	; 0x04
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	e9 f1       	breq	.+122    	; 0x166a <MDIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	3e 83       	std	Y+6, r19	; 0x06
    15f8:	2d 83       	std	Y+5, r18	; 0x05
    15fa:	8d 81       	ldd	r24, Y+5	; 0x05
    15fc:	9e 81       	ldd	r25, Y+6	; 0x06
    15fe:	81 30       	cpi	r24, 0x01	; 1
    1600:	91 05       	cpc	r25, r1
    1602:	e1 f0       	breq	.+56     	; 0x163c <MDIO_u8GetPortValue+0x6c>
    1604:	2d 81       	ldd	r18, Y+5	; 0x05
    1606:	3e 81       	ldd	r19, Y+6	; 0x06
    1608:	22 30       	cpi	r18, 0x02	; 2
    160a:	31 05       	cpc	r19, r1
    160c:	2c f4       	brge	.+10     	; 0x1618 <MDIO_u8GetPortValue+0x48>
    160e:	8d 81       	ldd	r24, Y+5	; 0x05
    1610:	9e 81       	ldd	r25, Y+6	; 0x06
    1612:	00 97       	sbiw	r24, 0x00	; 0
    1614:	61 f0       	breq	.+24     	; 0x162e <MDIO_u8GetPortValue+0x5e>
    1616:	27 c0       	rjmp	.+78     	; 0x1666 <MDIO_u8GetPortValue+0x96>
    1618:	2d 81       	ldd	r18, Y+5	; 0x05
    161a:	3e 81       	ldd	r19, Y+6	; 0x06
    161c:	22 30       	cpi	r18, 0x02	; 2
    161e:	31 05       	cpc	r19, r1
    1620:	a1 f0       	breq	.+40     	; 0x164a <MDIO_u8GetPortValue+0x7a>
    1622:	8d 81       	ldd	r24, Y+5	; 0x05
    1624:	9e 81       	ldd	r25, Y+6	; 0x06
    1626:	83 30       	cpi	r24, 0x03	; 3
    1628:	91 05       	cpc	r25, r1
    162a:	b1 f0       	breq	.+44     	; 0x1658 <MDIO_u8GetPortValue+0x88>
    162c:	1c c0       	rjmp	.+56     	; 0x1666 <MDIO_u8GetPortValue+0x96>
		{
		   case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = PINA_u8_REG; break;
    162e:	e9 e3       	ldi	r30, 0x39	; 57
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	80 81       	ld	r24, Z
    1634:	eb 81       	ldd	r30, Y+3	; 0x03
    1636:	fc 81       	ldd	r31, Y+4	; 0x04
    1638:	80 83       	st	Z, r24
    163a:	18 c0       	rjmp	.+48     	; 0x166c <MDIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = PINB_u8_REG; break;
    163c:	e6 e3       	ldi	r30, 0x36	; 54
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	eb 81       	ldd	r30, Y+3	; 0x03
    1644:	fc 81       	ldd	r31, Y+4	; 0x04
    1646:	80 83       	st	Z, r24
    1648:	11 c0       	rjmp	.+34     	; 0x166c <MDIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = PINC_u8_REG; break;
    164a:	e3 e3       	ldi	r30, 0x33	; 51
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	eb 81       	ldd	r30, Y+3	; 0x03
    1652:	fc 81       	ldd	r31, Y+4	; 0x04
    1654:	80 83       	st	Z, r24
    1656:	0a c0       	rjmp	.+20     	; 0x166c <MDIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = PIND_u8_REG; break;
    1658:	e0 e3       	ldi	r30, 0x30	; 48
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	eb 81       	ldd	r30, Y+3	; 0x03
    1660:	fc 81       	ldd	r31, Y+4	; 0x04
    1662:	80 83       	st	Z, r24
    1664:	03 c0       	rjmp	.+6      	; 0x166c <MDIO_u8GetPortValue+0x9c>
		   default : Local_u8ReturnState = STD_TYPES_NOK;
    1666:	19 82       	std	Y+1, r1	; 0x01
    1668:	01 c0       	rjmp	.+2      	; 0x166c <MDIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    166a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    166c:	89 81       	ldd	r24, Y+1	; 0x01
}
    166e:	26 96       	adiw	r28, 0x06	; 6
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <HLCD_voidInit>:
#include "HLCD_interface.h"
#include "HLCD_private.h"
#include "HLCD_config.h"

void HLCD_voidInit     (void)
{
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	cd b7       	in	r28, 0x3d	; 61
    1686:	de b7       	in	r29, 0x3e	; 62
    1688:	e8 97       	sbiw	r28, 0x38	; 56
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	a8 e4       	ldi	r26, 0x48	; 72
    169a:	b2 e4       	ldi	r27, 0x42	; 66
    169c:	8d ab       	std	Y+53, r24	; 0x35
    169e:	9e ab       	std	Y+54, r25	; 0x36
    16a0:	af ab       	std	Y+55, r26	; 0x37
    16a2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a4:	6d a9       	ldd	r22, Y+53	; 0x35
    16a6:	7e a9       	ldd	r23, Y+54	; 0x36
    16a8:	8f a9       	ldd	r24, Y+55	; 0x37
    16aa:	98 ad       	ldd	r25, Y+56	; 0x38
    16ac:	20 e0       	ldi	r18, 0x00	; 0
    16ae:	30 e0       	ldi	r19, 0x00	; 0
    16b0:	4a ef       	ldi	r20, 0xFA	; 250
    16b2:	54 e4       	ldi	r21, 0x44	; 68
    16b4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16b8:	dc 01       	movw	r26, r24
    16ba:	cb 01       	movw	r24, r22
    16bc:	89 ab       	std	Y+49, r24	; 0x31
    16be:	9a ab       	std	Y+50, r25	; 0x32
    16c0:	ab ab       	std	Y+51, r26	; 0x33
    16c2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16c4:	69 a9       	ldd	r22, Y+49	; 0x31
    16c6:	7a a9       	ldd	r23, Y+50	; 0x32
    16c8:	8b a9       	ldd	r24, Y+51	; 0x33
    16ca:	9c a9       	ldd	r25, Y+52	; 0x34
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	40 e8       	ldi	r20, 0x80	; 128
    16d2:	5f e3       	ldi	r21, 0x3F	; 63
    16d4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16d8:	88 23       	and	r24, r24
    16da:	2c f4       	brge	.+10     	; 0x16e6 <HLCD_voidInit+0x66>
		__ticks = 1;
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	98 ab       	std	Y+48, r25	; 0x30
    16e2:	8f a7       	std	Y+47, r24	; 0x2f
    16e4:	3f c0       	rjmp	.+126    	; 0x1764 <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    16e6:	69 a9       	ldd	r22, Y+49	; 0x31
    16e8:	7a a9       	ldd	r23, Y+50	; 0x32
    16ea:	8b a9       	ldd	r24, Y+51	; 0x33
    16ec:	9c a9       	ldd	r25, Y+52	; 0x34
    16ee:	20 e0       	ldi	r18, 0x00	; 0
    16f0:	3f ef       	ldi	r19, 0xFF	; 255
    16f2:	4f e7       	ldi	r20, 0x7F	; 127
    16f4:	57 e4       	ldi	r21, 0x47	; 71
    16f6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16fa:	18 16       	cp	r1, r24
    16fc:	4c f5       	brge	.+82     	; 0x1750 <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16fe:	6d a9       	ldd	r22, Y+53	; 0x35
    1700:	7e a9       	ldd	r23, Y+54	; 0x36
    1702:	8f a9       	ldd	r24, Y+55	; 0x37
    1704:	98 ad       	ldd	r25, Y+56	; 0x38
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	40 e2       	ldi	r20, 0x20	; 32
    170c:	51 e4       	ldi	r21, 0x41	; 65
    170e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1712:	dc 01       	movw	r26, r24
    1714:	cb 01       	movw	r24, r22
    1716:	bc 01       	movw	r22, r24
    1718:	cd 01       	movw	r24, r26
    171a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    171e:	dc 01       	movw	r26, r24
    1720:	cb 01       	movw	r24, r22
    1722:	98 ab       	std	Y+48, r25	; 0x30
    1724:	8f a7       	std	Y+47, r24	; 0x2f
    1726:	0f c0       	rjmp	.+30     	; 0x1746 <HLCD_voidInit+0xc6>
    1728:	88 ec       	ldi	r24, 0xC8	; 200
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	9e a7       	std	Y+46, r25	; 0x2e
    172e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1730:	8d a5       	ldd	r24, Y+45	; 0x2d
    1732:	9e a5       	ldd	r25, Y+46	; 0x2e
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	f1 f7       	brne	.-4      	; 0x1734 <HLCD_voidInit+0xb4>
    1738:	9e a7       	std	Y+46, r25	; 0x2e
    173a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    173c:	8f a5       	ldd	r24, Y+47	; 0x2f
    173e:	98 a9       	ldd	r25, Y+48	; 0x30
    1740:	01 97       	sbiw	r24, 0x01	; 1
    1742:	98 ab       	std	Y+48, r25	; 0x30
    1744:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1746:	8f a5       	ldd	r24, Y+47	; 0x2f
    1748:	98 a9       	ldd	r25, Y+48	; 0x30
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	69 f7       	brne	.-38     	; 0x1728 <HLCD_voidInit+0xa8>
    174e:	14 c0       	rjmp	.+40     	; 0x1778 <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1750:	69 a9       	ldd	r22, Y+49	; 0x31
    1752:	7a a9       	ldd	r23, Y+50	; 0x32
    1754:	8b a9       	ldd	r24, Y+51	; 0x33
    1756:	9c a9       	ldd	r25, Y+52	; 0x34
    1758:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	98 ab       	std	Y+48, r25	; 0x30
    1762:	8f a7       	std	Y+47, r24	; 0x2f
    1764:	8f a5       	ldd	r24, Y+47	; 0x2f
    1766:	98 a9       	ldd	r25, Y+48	; 0x30
    1768:	9c a7       	std	Y+44, r25	; 0x2c
    176a:	8b a7       	std	Y+43, r24	; 0x2b
    176c:	8b a5       	ldd	r24, Y+43	; 0x2b
    176e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	f1 f7       	brne	.-4      	; 0x1770 <HLCD_voidInit+0xf0>
    1774:	9c a7       	std	Y+44, r25	; 0x2c
    1776:	8b a7       	std	Y+43, r24	; 0x2b
	{


		_delay_ms(50);
		/*send function set command*/
		HLCD_voidSendCmnd(FUNCTION_SET_4BITS>>4);
    1778:	82 e0       	ldi	r24, 0x02	; 2
    177a:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
		HLCD_voidSendCmnd(FUNCTION_SET_4BITS>>4);
    177e:	82 e0       	ldi	r24, 0x02	; 2
    1780:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
		HLCD_voidSendCmnd(FUNCTION_SET_4BITS);
    1784:	88 e2       	ldi	r24, 0x28	; 40
    1786:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	a0 e8       	ldi	r26, 0x80	; 128
    1790:	bf e3       	ldi	r27, 0x3F	; 63
    1792:	8f a3       	std	Y+39, r24	; 0x27
    1794:	98 a7       	std	Y+40, r25	; 0x28
    1796:	a9 a7       	std	Y+41, r26	; 0x29
    1798:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    179a:	6f a1       	ldd	r22, Y+39	; 0x27
    179c:	78 a5       	ldd	r23, Y+40	; 0x28
    179e:	89 a5       	ldd	r24, Y+41	; 0x29
    17a0:	9a a5       	ldd	r25, Y+42	; 0x2a
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	4a ef       	ldi	r20, 0xFA	; 250
    17a8:	54 e4       	ldi	r21, 0x44	; 68
    17aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17ae:	dc 01       	movw	r26, r24
    17b0:	cb 01       	movw	r24, r22
    17b2:	8b a3       	std	Y+35, r24	; 0x23
    17b4:	9c a3       	std	Y+36, r25	; 0x24
    17b6:	ad a3       	std	Y+37, r26	; 0x25
    17b8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17ba:	6b a1       	ldd	r22, Y+35	; 0x23
    17bc:	7c a1       	ldd	r23, Y+36	; 0x24
    17be:	8d a1       	ldd	r24, Y+37	; 0x25
    17c0:	9e a1       	ldd	r25, Y+38	; 0x26
    17c2:	20 e0       	ldi	r18, 0x00	; 0
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	40 e8       	ldi	r20, 0x80	; 128
    17c8:	5f e3       	ldi	r21, 0x3F	; 63
    17ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17ce:	88 23       	and	r24, r24
    17d0:	2c f4       	brge	.+10     	; 0x17dc <HLCD_voidInit+0x15c>
		__ticks = 1;
    17d2:	81 e0       	ldi	r24, 0x01	; 1
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	9a a3       	std	Y+34, r25	; 0x22
    17d8:	89 a3       	std	Y+33, r24	; 0x21
    17da:	3f c0       	rjmp	.+126    	; 0x185a <HLCD_voidInit+0x1da>
	else if (__tmp > 65535)
    17dc:	6b a1       	ldd	r22, Y+35	; 0x23
    17de:	7c a1       	ldd	r23, Y+36	; 0x24
    17e0:	8d a1       	ldd	r24, Y+37	; 0x25
    17e2:	9e a1       	ldd	r25, Y+38	; 0x26
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	3f ef       	ldi	r19, 0xFF	; 255
    17e8:	4f e7       	ldi	r20, 0x7F	; 127
    17ea:	57 e4       	ldi	r21, 0x47	; 71
    17ec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17f0:	18 16       	cp	r1, r24
    17f2:	4c f5       	brge	.+82     	; 0x1846 <HLCD_voidInit+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17f4:	6f a1       	ldd	r22, Y+39	; 0x27
    17f6:	78 a5       	ldd	r23, Y+40	; 0x28
    17f8:	89 a5       	ldd	r24, Y+41	; 0x29
    17fa:	9a a5       	ldd	r25, Y+42	; 0x2a
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e2       	ldi	r20, 0x20	; 32
    1802:	51 e4       	ldi	r21, 0x41	; 65
    1804:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	bc 01       	movw	r22, r24
    180e:	cd 01       	movw	r24, r26
    1810:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	9a a3       	std	Y+34, r25	; 0x22
    181a:	89 a3       	std	Y+33, r24	; 0x21
    181c:	0f c0       	rjmp	.+30     	; 0x183c <HLCD_voidInit+0x1bc>
    181e:	88 ec       	ldi	r24, 0xC8	; 200
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	98 a3       	std	Y+32, r25	; 0x20
    1824:	8f 8f       	std	Y+31, r24	; 0x1f
    1826:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1828:	98 a1       	ldd	r25, Y+32	; 0x20
    182a:	01 97       	sbiw	r24, 0x01	; 1
    182c:	f1 f7       	brne	.-4      	; 0x182a <HLCD_voidInit+0x1aa>
    182e:	98 a3       	std	Y+32, r25	; 0x20
    1830:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1832:	89 a1       	ldd	r24, Y+33	; 0x21
    1834:	9a a1       	ldd	r25, Y+34	; 0x22
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	9a a3       	std	Y+34, r25	; 0x22
    183a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    183c:	89 a1       	ldd	r24, Y+33	; 0x21
    183e:	9a a1       	ldd	r25, Y+34	; 0x22
    1840:	00 97       	sbiw	r24, 0x00	; 0
    1842:	69 f7       	brne	.-38     	; 0x181e <HLCD_voidInit+0x19e>
    1844:	14 c0       	rjmp	.+40     	; 0x186e <HLCD_voidInit+0x1ee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1846:	6b a1       	ldd	r22, Y+35	; 0x23
    1848:	7c a1       	ldd	r23, Y+36	; 0x24
    184a:	8d a1       	ldd	r24, Y+37	; 0x25
    184c:	9e a1       	ldd	r25, Y+38	; 0x26
    184e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1852:	dc 01       	movw	r26, r24
    1854:	cb 01       	movw	r24, r22
    1856:	9a a3       	std	Y+34, r25	; 0x22
    1858:	89 a3       	std	Y+33, r24	; 0x21
    185a:	89 a1       	ldd	r24, Y+33	; 0x21
    185c:	9a a1       	ldd	r25, Y+34	; 0x22
    185e:	9e 8f       	std	Y+30, r25	; 0x1e
    1860:	8d 8f       	std	Y+29, r24	; 0x1d
    1862:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1864:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1866:	01 97       	sbiw	r24, 0x01	; 1
    1868:	f1 f7       	brne	.-4      	; 0x1866 <HLCD_voidInit+0x1e6>
    186a:	9e 8f       	std	Y+30, r25	; 0x1e
    186c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		HLCD_voidSendCmnd(LCD_DISPLAY_ON_OFF>>4);
    186e:	80 e0       	ldi	r24, 0x00	; 0
    1870:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
		HLCD_voidSendCmnd(LCD_DISPLAY_ON_OFF);
    1874:	8c e0       	ldi	r24, 0x0C	; 12
    1876:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	a0 e8       	ldi	r26, 0x80	; 128
    1880:	bf e3       	ldi	r27, 0x3F	; 63
    1882:	89 8f       	std	Y+25, r24	; 0x19
    1884:	9a 8f       	std	Y+26, r25	; 0x1a
    1886:	ab 8f       	std	Y+27, r26	; 0x1b
    1888:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    188a:	69 8d       	ldd	r22, Y+25	; 0x19
    188c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    188e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1890:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	4a ef       	ldi	r20, 0xFA	; 250
    1898:	54 e4       	ldi	r21, 0x44	; 68
    189a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	8d 8b       	std	Y+21, r24	; 0x15
    18a4:	9e 8b       	std	Y+22, r25	; 0x16
    18a6:	af 8b       	std	Y+23, r26	; 0x17
    18a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18aa:	6d 89       	ldd	r22, Y+21	; 0x15
    18ac:	7e 89       	ldd	r23, Y+22	; 0x16
    18ae:	8f 89       	ldd	r24, Y+23	; 0x17
    18b0:	98 8d       	ldd	r25, Y+24	; 0x18
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	40 e8       	ldi	r20, 0x80	; 128
    18b8:	5f e3       	ldi	r21, 0x3F	; 63
    18ba:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18be:	88 23       	and	r24, r24
    18c0:	2c f4       	brge	.+10     	; 0x18cc <HLCD_voidInit+0x24c>
		__ticks = 1;
    18c2:	81 e0       	ldi	r24, 0x01	; 1
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	9c 8b       	std	Y+20, r25	; 0x14
    18c8:	8b 8b       	std	Y+19, r24	; 0x13
    18ca:	3f c0       	rjmp	.+126    	; 0x194a <HLCD_voidInit+0x2ca>
	else if (__tmp > 65535)
    18cc:	6d 89       	ldd	r22, Y+21	; 0x15
    18ce:	7e 89       	ldd	r23, Y+22	; 0x16
    18d0:	8f 89       	ldd	r24, Y+23	; 0x17
    18d2:	98 8d       	ldd	r25, Y+24	; 0x18
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	3f ef       	ldi	r19, 0xFF	; 255
    18d8:	4f e7       	ldi	r20, 0x7F	; 127
    18da:	57 e4       	ldi	r21, 0x47	; 71
    18dc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18e0:	18 16       	cp	r1, r24
    18e2:	4c f5       	brge	.+82     	; 0x1936 <HLCD_voidInit+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18e4:	69 8d       	ldd	r22, Y+25	; 0x19
    18e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	40 e2       	ldi	r20, 0x20	; 32
    18f2:	51 e4       	ldi	r21, 0x41	; 65
    18f4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18f8:	dc 01       	movw	r26, r24
    18fa:	cb 01       	movw	r24, r22
    18fc:	bc 01       	movw	r22, r24
    18fe:	cd 01       	movw	r24, r26
    1900:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1904:	dc 01       	movw	r26, r24
    1906:	cb 01       	movw	r24, r22
    1908:	9c 8b       	std	Y+20, r25	; 0x14
    190a:	8b 8b       	std	Y+19, r24	; 0x13
    190c:	0f c0       	rjmp	.+30     	; 0x192c <HLCD_voidInit+0x2ac>
    190e:	88 ec       	ldi	r24, 0xC8	; 200
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	9a 8b       	std	Y+18, r25	; 0x12
    1914:	89 8b       	std	Y+17, r24	; 0x11
    1916:	89 89       	ldd	r24, Y+17	; 0x11
    1918:	9a 89       	ldd	r25, Y+18	; 0x12
    191a:	01 97       	sbiw	r24, 0x01	; 1
    191c:	f1 f7       	brne	.-4      	; 0x191a <HLCD_voidInit+0x29a>
    191e:	9a 8b       	std	Y+18, r25	; 0x12
    1920:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1922:	8b 89       	ldd	r24, Y+19	; 0x13
    1924:	9c 89       	ldd	r25, Y+20	; 0x14
    1926:	01 97       	sbiw	r24, 0x01	; 1
    1928:	9c 8b       	std	Y+20, r25	; 0x14
    192a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    192c:	8b 89       	ldd	r24, Y+19	; 0x13
    192e:	9c 89       	ldd	r25, Y+20	; 0x14
    1930:	00 97       	sbiw	r24, 0x00	; 0
    1932:	69 f7       	brne	.-38     	; 0x190e <HLCD_voidInit+0x28e>
    1934:	14 c0       	rjmp	.+40     	; 0x195e <HLCD_voidInit+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1936:	6d 89       	ldd	r22, Y+21	; 0x15
    1938:	7e 89       	ldd	r23, Y+22	; 0x16
    193a:	8f 89       	ldd	r24, Y+23	; 0x17
    193c:	98 8d       	ldd	r25, Y+24	; 0x18
    193e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1942:	dc 01       	movw	r26, r24
    1944:	cb 01       	movw	r24, r22
    1946:	9c 8b       	std	Y+20, r25	; 0x14
    1948:	8b 8b       	std	Y+19, r24	; 0x13
    194a:	8b 89       	ldd	r24, Y+19	; 0x13
    194c:	9c 89       	ldd	r25, Y+20	; 0x14
    194e:	98 8b       	std	Y+16, r25	; 0x10
    1950:	8f 87       	std	Y+15, r24	; 0x0f
    1952:	8f 85       	ldd	r24, Y+15	; 0x0f
    1954:	98 89       	ldd	r25, Y+16	; 0x10
    1956:	01 97       	sbiw	r24, 0x01	; 1
    1958:	f1 f7       	brne	.-4      	; 0x1956 <HLCD_voidInit+0x2d6>
    195a:	98 8b       	std	Y+16, r25	; 0x10
    195c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		HLCD_voidSendCmnd(LCD_DISPLAY_CLEAR>>4);
    195e:	80 e0       	ldi	r24, 0x00	; 0
    1960:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
		HLCD_voidSendCmnd(LCD_DISPLAY_CLEAR);
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	a0 e0       	ldi	r26, 0x00	; 0
    1970:	b0 e4       	ldi	r27, 0x40	; 64
    1972:	8b 87       	std	Y+11, r24	; 0x0b
    1974:	9c 87       	std	Y+12, r25	; 0x0c
    1976:	ad 87       	std	Y+13, r26	; 0x0d
    1978:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197a:	6b 85       	ldd	r22, Y+11	; 0x0b
    197c:	7c 85       	ldd	r23, Y+12	; 0x0c
    197e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1980:	9e 85       	ldd	r25, Y+14	; 0x0e
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	4a ef       	ldi	r20, 0xFA	; 250
    1988:	54 e4       	ldi	r21, 0x44	; 68
    198a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	8f 83       	std	Y+7, r24	; 0x07
    1994:	98 87       	std	Y+8, r25	; 0x08
    1996:	a9 87       	std	Y+9, r26	; 0x09
    1998:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    199a:	6f 81       	ldd	r22, Y+7	; 0x07
    199c:	78 85       	ldd	r23, Y+8	; 0x08
    199e:	89 85       	ldd	r24, Y+9	; 0x09
    19a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e8       	ldi	r20, 0x80	; 128
    19a8:	5f e3       	ldi	r21, 0x3F	; 63
    19aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19ae:	88 23       	and	r24, r24
    19b0:	2c f4       	brge	.+10     	; 0x19bc <HLCD_voidInit+0x33c>
		__ticks = 1;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	9e 83       	std	Y+6, r25	; 0x06
    19b8:	8d 83       	std	Y+5, r24	; 0x05
    19ba:	3f c0       	rjmp	.+126    	; 0x1a3a <HLCD_voidInit+0x3ba>
	else if (__tmp > 65535)
    19bc:	6f 81       	ldd	r22, Y+7	; 0x07
    19be:	78 85       	ldd	r23, Y+8	; 0x08
    19c0:	89 85       	ldd	r24, Y+9	; 0x09
    19c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	3f ef       	ldi	r19, 0xFF	; 255
    19c8:	4f e7       	ldi	r20, 0x7F	; 127
    19ca:	57 e4       	ldi	r21, 0x47	; 71
    19cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19d0:	18 16       	cp	r1, r24
    19d2:	4c f5       	brge	.+82     	; 0x1a26 <HLCD_voidInit+0x3a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19da:	9e 85       	ldd	r25, Y+14	; 0x0e
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e2       	ldi	r20, 0x20	; 32
    19e2:	51 e4       	ldi	r21, 0x41	; 65
    19e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	bc 01       	movw	r22, r24
    19ee:	cd 01       	movw	r24, r26
    19f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	8d 83       	std	Y+5, r24	; 0x05
    19fc:	0f c0       	rjmp	.+30     	; 0x1a1c <HLCD_voidInit+0x39c>
    19fe:	88 ec       	ldi	r24, 0xC8	; 200
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	9c 83       	std	Y+4, r25	; 0x04
    1a04:	8b 83       	std	Y+3, r24	; 0x03
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <HLCD_voidInit+0x38a>
    1a0e:	9c 83       	std	Y+4, r25	; 0x04
    1a10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a12:	8d 81       	ldd	r24, Y+5	; 0x05
    1a14:	9e 81       	ldd	r25, Y+6	; 0x06
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	9e 83       	std	Y+6, r25	; 0x06
    1a1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	69 f7       	brne	.-38     	; 0x19fe <HLCD_voidInit+0x37e>
    1a24:	14 c0       	rjmp	.+40     	; 0x1a4e <HLCD_voidInit+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a26:	6f 81       	ldd	r22, Y+7	; 0x07
    1a28:	78 85       	ldd	r23, Y+8	; 0x08
    1a2a:	89 85       	ldd	r24, Y+9	; 0x09
    1a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	9e 83       	std	Y+6, r25	; 0x06
    1a38:	8d 83       	std	Y+5, r24	; 0x05
    1a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3e:	9a 83       	std	Y+2, r25	; 0x02
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	9a 81       	ldd	r25, Y+2	; 0x02
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	f1 f7       	brne	.-4      	; 0x1a46 <HLCD_voidInit+0x3c6>
    1a4a:	9a 83       	std	Y+2, r25	; 0x02
    1a4c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		HLCD_voidSendCmnd(LCD_ENTRY_MODE>>4);
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
		HLCD_voidSendCmnd(LCD_ENTRY_MODE);
    1a54:	86 e0       	ldi	r24, 0x06	; 6
    1a56:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
	}
#endif

}
    1a5a:	e8 96       	adiw	r28, 0x38	; 56
    1a5c:	0f b6       	in	r0, 0x3f	; 63
    1a5e:	f8 94       	cli
    1a60:	de bf       	out	0x3e, r29	; 62
    1a62:	0f be       	out	0x3f, r0	; 63
    1a64:	cd bf       	out	0x3d, r28	; 61
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <HLCD_voidClear>:

void HLCD_voidClear       (void)
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	cd b7       	in	r28, 0x3d	; 61
    1a72:	de b7       	in	r29, 0x3e	; 62
    1a74:	2e 97       	sbiw	r28, 0x0e	; 14
    1a76:	0f b6       	in	r0, 0x3f	; 63
    1a78:	f8 94       	cli
    1a7a:	de bf       	out	0x3e, r29	; 62
    1a7c:	0f be       	out	0x3f, r0	; 63
    1a7e:	cd bf       	out	0x3d, r28	; 61
		HLCD_voidSendCmnd(LCD_DISPLAY_CLEAR);
		_delay_ms(2);
	}
#elif(LCD_MODE == LCD_4_BIT_MODE)
	{
		HLCD_voidSendCmnd(LCD_DISPLAY_CLEAR>>4);
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
		HLCD_voidSendCmnd(LCD_DISPLAY_CLEAR);
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
    1a8c:	80 e0       	ldi	r24, 0x00	; 0
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	a0 e0       	ldi	r26, 0x00	; 0
    1a92:	b0 e4       	ldi	r27, 0x40	; 64
    1a94:	8b 87       	std	Y+11, r24	; 0x0b
    1a96:	9c 87       	std	Y+12, r25	; 0x0c
    1a98:	ad 87       	std	Y+13, r26	; 0x0d
    1a9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	4a ef       	ldi	r20, 0xFA	; 250
    1aaa:	54 e4       	ldi	r21, 0x44	; 68
    1aac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ab0:	dc 01       	movw	r26, r24
    1ab2:	cb 01       	movw	r24, r22
    1ab4:	8f 83       	std	Y+7, r24	; 0x07
    1ab6:	98 87       	std	Y+8, r25	; 0x08
    1ab8:	a9 87       	std	Y+9, r26	; 0x09
    1aba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1abc:	6f 81       	ldd	r22, Y+7	; 0x07
    1abe:	78 85       	ldd	r23, Y+8	; 0x08
    1ac0:	89 85       	ldd	r24, Y+9	; 0x09
    1ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	40 e8       	ldi	r20, 0x80	; 128
    1aca:	5f e3       	ldi	r21, 0x3F	; 63
    1acc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ad0:	88 23       	and	r24, r24
    1ad2:	2c f4       	brge	.+10     	; 0x1ade <HLCD_voidClear+0x72>
		__ticks = 1;
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	9e 83       	std	Y+6, r25	; 0x06
    1ada:	8d 83       	std	Y+5, r24	; 0x05
    1adc:	3f c0       	rjmp	.+126    	; 0x1b5c <HLCD_voidClear+0xf0>
	else if (__tmp > 65535)
    1ade:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae0:	78 85       	ldd	r23, Y+8	; 0x08
    1ae2:	89 85       	ldd	r24, Y+9	; 0x09
    1ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	3f ef       	ldi	r19, 0xFF	; 255
    1aea:	4f e7       	ldi	r20, 0x7F	; 127
    1aec:	57 e4       	ldi	r21, 0x47	; 71
    1aee:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1af2:	18 16       	cp	r1, r24
    1af4:	4c f5       	brge	.+82     	; 0x1b48 <HLCD_voidClear+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1af8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1afa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1afc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	40 e2       	ldi	r20, 0x20	; 32
    1b04:	51 e4       	ldi	r21, 0x41	; 65
    1b06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b0a:	dc 01       	movw	r26, r24
    1b0c:	cb 01       	movw	r24, r22
    1b0e:	bc 01       	movw	r22, r24
    1b10:	cd 01       	movw	r24, r26
    1b12:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b16:	dc 01       	movw	r26, r24
    1b18:	cb 01       	movw	r24, r22
    1b1a:	9e 83       	std	Y+6, r25	; 0x06
    1b1c:	8d 83       	std	Y+5, r24	; 0x05
    1b1e:	0f c0       	rjmp	.+30     	; 0x1b3e <HLCD_voidClear+0xd2>
    1b20:	88 ec       	ldi	r24, 0xC8	; 200
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	9c 83       	std	Y+4, r25	; 0x04
    1b26:	8b 83       	std	Y+3, r24	; 0x03
    1b28:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <HLCD_voidClear+0xc0>
    1b30:	9c 83       	std	Y+4, r25	; 0x04
    1b32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b34:	8d 81       	ldd	r24, Y+5	; 0x05
    1b36:	9e 81       	ldd	r25, Y+6	; 0x06
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	9e 83       	std	Y+6, r25	; 0x06
    1b3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b40:	9e 81       	ldd	r25, Y+6	; 0x06
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	69 f7       	brne	.-38     	; 0x1b20 <HLCD_voidClear+0xb4>
    1b46:	14 c0       	rjmp	.+40     	; 0x1b70 <HLCD_voidClear+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b48:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4a:	78 85       	ldd	r23, Y+8	; 0x08
    1b4c:	89 85       	ldd	r24, Y+9	; 0x09
    1b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b54:	dc 01       	movw	r26, r24
    1b56:	cb 01       	movw	r24, r22
    1b58:	9e 83       	std	Y+6, r25	; 0x06
    1b5a:	8d 83       	std	Y+5, r24	; 0x05
    1b5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b60:	9a 83       	std	Y+2, r25	; 0x02
    1b62:	89 83       	std	Y+1, r24	; 0x01
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	9a 81       	ldd	r25, Y+2	; 0x02
    1b68:	01 97       	sbiw	r24, 0x01	; 1
    1b6a:	f1 f7       	brne	.-4      	; 0x1b68 <HLCD_voidClear+0xfc>
    1b6c:	9a 83       	std	Y+2, r25	; 0x02
    1b6e:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}
#endif
}
    1b70:	2e 96       	adiw	r28, 0x0e	; 14
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
    1b7c:	cf 91       	pop	r28
    1b7e:	df 91       	pop	r29
    1b80:	08 95       	ret

00001b82 <HLCD_voidCursorBlinkerOff>:

void HLCD_voidCursorBlinkerOff(void)
{
    1b82:	df 93       	push	r29
    1b84:	cf 93       	push	r28
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	2e 97       	sbiw	r28, 0x0e	; 14
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	de bf       	out	0x3e, r29	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	cd bf       	out	0x3d, r28	; 61
		HLCD_voidSendCmnd(LCD_BLINKER_OFF);
		_delay_ms(2);
	}
#elif(LCD_MODE == LCD_4_BIT_MODE)
	{
		HLCD_voidSendCmnd(LCD_BLINKER_OFF>>4);
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
		HLCD_voidSendCmnd(LCD_BLINKER_OFF);
    1b9c:	8c e0       	ldi	r24, 0x0C	; 12
    1b9e:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	a0 e0       	ldi	r26, 0x00	; 0
    1ba8:	b0 e4       	ldi	r27, 0x40	; 64
    1baa:	8b 87       	std	Y+11, r24	; 0x0b
    1bac:	9c 87       	std	Y+12, r25	; 0x0c
    1bae:	ad 87       	std	Y+13, r26	; 0x0d
    1bb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	4a ef       	ldi	r20, 0xFA	; 250
    1bc0:	54 e4       	ldi	r21, 0x44	; 68
    1bc2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	8f 83       	std	Y+7, r24	; 0x07
    1bcc:	98 87       	std	Y+8, r25	; 0x08
    1bce:	a9 87       	std	Y+9, r26	; 0x09
    1bd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bd2:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd4:	78 85       	ldd	r23, Y+8	; 0x08
    1bd6:	89 85       	ldd	r24, Y+9	; 0x09
    1bd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bda:	20 e0       	ldi	r18, 0x00	; 0
    1bdc:	30 e0       	ldi	r19, 0x00	; 0
    1bde:	40 e8       	ldi	r20, 0x80	; 128
    1be0:	5f e3       	ldi	r21, 0x3F	; 63
    1be2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1be6:	88 23       	and	r24, r24
    1be8:	2c f4       	brge	.+10     	; 0x1bf4 <HLCD_voidCursorBlinkerOff+0x72>
		__ticks = 1;
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	9e 83       	std	Y+6, r25	; 0x06
    1bf0:	8d 83       	std	Y+5, r24	; 0x05
    1bf2:	3f c0       	rjmp	.+126    	; 0x1c72 <HLCD_voidCursorBlinkerOff+0xf0>
	else if (__tmp > 65535)
    1bf4:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf6:	78 85       	ldd	r23, Y+8	; 0x08
    1bf8:	89 85       	ldd	r24, Y+9	; 0x09
    1bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	3f ef       	ldi	r19, 0xFF	; 255
    1c00:	4f e7       	ldi	r20, 0x7F	; 127
    1c02:	57 e4       	ldi	r21, 0x47	; 71
    1c04:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c08:	18 16       	cp	r1, r24
    1c0a:	4c f5       	brge	.+82     	; 0x1c5e <HLCD_voidCursorBlinkerOff+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c10:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c12:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	40 e2       	ldi	r20, 0x20	; 32
    1c1a:	51 e4       	ldi	r21, 0x41	; 65
    1c1c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	bc 01       	movw	r22, r24
    1c26:	cd 01       	movw	r24, r26
    1c28:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	9e 83       	std	Y+6, r25	; 0x06
    1c32:	8d 83       	std	Y+5, r24	; 0x05
    1c34:	0f c0       	rjmp	.+30     	; 0x1c54 <HLCD_voidCursorBlinkerOff+0xd2>
    1c36:	88 ec       	ldi	r24, 0xC8	; 200
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	9c 83       	std	Y+4, r25	; 0x04
    1c3c:	8b 83       	std	Y+3, r24	; 0x03
    1c3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c40:	9c 81       	ldd	r25, Y+4	; 0x04
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	f1 f7       	brne	.-4      	; 0x1c42 <HLCD_voidCursorBlinkerOff+0xc0>
    1c46:	9c 83       	std	Y+4, r25	; 0x04
    1c48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c4a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4e:	01 97       	sbiw	r24, 0x01	; 1
    1c50:	9e 83       	std	Y+6, r25	; 0x06
    1c52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c54:	8d 81       	ldd	r24, Y+5	; 0x05
    1c56:	9e 81       	ldd	r25, Y+6	; 0x06
    1c58:	00 97       	sbiw	r24, 0x00	; 0
    1c5a:	69 f7       	brne	.-38     	; 0x1c36 <HLCD_voidCursorBlinkerOff+0xb4>
    1c5c:	14 c0       	rjmp	.+40     	; 0x1c86 <HLCD_voidCursorBlinkerOff+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c60:	78 85       	ldd	r23, Y+8	; 0x08
    1c62:	89 85       	ldd	r24, Y+9	; 0x09
    1c64:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	9e 83       	std	Y+6, r25	; 0x06
    1c70:	8d 83       	std	Y+5, r24	; 0x05
    1c72:	8d 81       	ldd	r24, Y+5	; 0x05
    1c74:	9e 81       	ldd	r25, Y+6	; 0x06
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	89 81       	ldd	r24, Y+1	; 0x01
    1c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7e:	01 97       	sbiw	r24, 0x01	; 1
    1c80:	f1 f7       	brne	.-4      	; 0x1c7e <HLCD_voidCursorBlinkerOff+0xfc>
    1c82:	9a 83       	std	Y+2, r25	; 0x02
    1c84:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}
#endif

}
    1c86:	2e 96       	adiw	r28, 0x0e	; 14
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	08 95       	ret

00001c98 <HLCD_voidSendCmnd>:

void HLCD_voidSendCmnd (u8 Copy_u8Cmnd)
{
    1c98:	df 93       	push	r29
    1c9a:	cf 93       	push	r28
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	2f 97       	sbiw	r28, 0x0f	; 15
    1ca2:	0f b6       	in	r0, 0x3f	; 63
    1ca4:	f8 94       	cli
    1ca6:	de bf       	out	0x3e, r29	; 62
    1ca8:	0f be       	out	0x3f, r0	; 63
    1caa:	cd bf       	out	0x3d, r28	; 61
    1cac:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(1);
	}
#elif(LCD_MODE == LCD_4_BIT_MODE)
	{
		/* Rs = 0 */
		MDIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	60 e0       	ldi	r22, 0x00	; 0
    1cb2:	40 e0       	ldi	r20, 0x00	; 0
    1cb4:	0e 94 e7 06 	call	0xdce	; 0xdce <MDIO_u8SetPinValue>
		/* Rw = 0 */
		MDIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1cb8:	81 e0       	ldi	r24, 0x01	; 1
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	0e 94 e7 06 	call	0xdce	; 0xdce <MDIO_u8SetPinValue>

		/* Send Cmnd byte to the Data Pins of LCD */
		MDIO_u8Set4PinsValue(LCD_u8_DATA_PORT,LCD_u8_4BIT_START_PIN,Copy_u8Cmnd);
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	64 e0       	ldi	r22, 0x04	; 4
    1cc6:	4f 85       	ldd	r20, Y+15	; 0x0f
    1cc8:	0e 94 06 0a 	call	0x140c	; 0x140c <MDIO_u8Set4PinsValue>

		/* Pulse of Enable E = 1 , E = 0 */
		MDIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	62 e0       	ldi	r22, 0x02	; 2
    1cd0:	41 e0       	ldi	r20, 0x01	; 1
    1cd2:	0e 94 e7 06 	call	0xdce	; 0xdce <MDIO_u8SetPinValue>
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a0 e0       	ldi	r26, 0x00	; 0
    1cdc:	b0 e4       	ldi	r27, 0x40	; 64
    1cde:	8b 87       	std	Y+11, r24	; 0x0b
    1ce0:	9c 87       	std	Y+12, r25	; 0x0c
    1ce2:	ad 87       	std	Y+13, r26	; 0x0d
    1ce4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ce8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cea:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cec:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cee:	20 e0       	ldi	r18, 0x00	; 0
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	4a ef       	ldi	r20, 0xFA	; 250
    1cf4:	54 e4       	ldi	r21, 0x44	; 68
    1cf6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	8f 83       	std	Y+7, r24	; 0x07
    1d00:	98 87       	std	Y+8, r25	; 0x08
    1d02:	a9 87       	std	Y+9, r26	; 0x09
    1d04:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d06:	6f 81       	ldd	r22, Y+7	; 0x07
    1d08:	78 85       	ldd	r23, Y+8	; 0x08
    1d0a:	89 85       	ldd	r24, Y+9	; 0x09
    1d0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e8       	ldi	r20, 0x80	; 128
    1d14:	5f e3       	ldi	r21, 0x3F	; 63
    1d16:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d1a:	88 23       	and	r24, r24
    1d1c:	2c f4       	brge	.+10     	; 0x1d28 <HLCD_voidSendCmnd+0x90>
		__ticks = 1;
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	9e 83       	std	Y+6, r25	; 0x06
    1d24:	8d 83       	std	Y+5, r24	; 0x05
    1d26:	3f c0       	rjmp	.+126    	; 0x1da6 <HLCD_voidSendCmnd+0x10e>
	else if (__tmp > 65535)
    1d28:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2a:	78 85       	ldd	r23, Y+8	; 0x08
    1d2c:	89 85       	ldd	r24, Y+9	; 0x09
    1d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d30:	20 e0       	ldi	r18, 0x00	; 0
    1d32:	3f ef       	ldi	r19, 0xFF	; 255
    1d34:	4f e7       	ldi	r20, 0x7F	; 127
    1d36:	57 e4       	ldi	r21, 0x47	; 71
    1d38:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d3c:	18 16       	cp	r1, r24
    1d3e:	4c f5       	brge	.+82     	; 0x1d92 <HLCD_voidSendCmnd+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d40:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d42:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d44:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d46:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 e2       	ldi	r20, 0x20	; 32
    1d4e:	51 e4       	ldi	r21, 0x41	; 65
    1d50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	bc 01       	movw	r22, r24
    1d5a:	cd 01       	movw	r24, r26
    1d5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	9e 83       	std	Y+6, r25	; 0x06
    1d66:	8d 83       	std	Y+5, r24	; 0x05
    1d68:	0f c0       	rjmp	.+30     	; 0x1d88 <HLCD_voidSendCmnd+0xf0>
    1d6a:	88 ec       	ldi	r24, 0xC8	; 200
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	9c 83       	std	Y+4, r25	; 0x04
    1d70:	8b 83       	std	Y+3, r24	; 0x03
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	9c 81       	ldd	r25, Y+4	; 0x04
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <HLCD_voidSendCmnd+0xde>
    1d7a:	9c 83       	std	Y+4, r25	; 0x04
    1d7c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d80:	9e 81       	ldd	r25, Y+6	; 0x06
    1d82:	01 97       	sbiw	r24, 0x01	; 1
    1d84:	9e 83       	std	Y+6, r25	; 0x06
    1d86:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d88:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8c:	00 97       	sbiw	r24, 0x00	; 0
    1d8e:	69 f7       	brne	.-38     	; 0x1d6a <HLCD_voidSendCmnd+0xd2>
    1d90:	14 c0       	rjmp	.+40     	; 0x1dba <HLCD_voidSendCmnd+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d92:	6f 81       	ldd	r22, Y+7	; 0x07
    1d94:	78 85       	ldd	r23, Y+8	; 0x08
    1d96:	89 85       	ldd	r24, Y+9	; 0x09
    1d98:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d9e:	dc 01       	movw	r26, r24
    1da0:	cb 01       	movw	r24, r22
    1da2:	9e 83       	std	Y+6, r25	; 0x06
    1da4:	8d 83       	std	Y+5, r24	; 0x05
    1da6:	8d 81       	ldd	r24, Y+5	; 0x05
    1da8:	9e 81       	ldd	r25, Y+6	; 0x06
    1daa:	9a 83       	std	Y+2, r25	; 0x02
    1dac:	89 83       	std	Y+1, r24	; 0x01
    1dae:	89 81       	ldd	r24, Y+1	; 0x01
    1db0:	9a 81       	ldd	r25, Y+2	; 0x02
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <HLCD_voidSendCmnd+0x11a>
    1db6:	9a 83       	std	Y+2, r25	; 0x02
    1db8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		MDIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    1dba:	81 e0       	ldi	r24, 0x01	; 1
    1dbc:	62 e0       	ldi	r22, 0x02	; 2
    1dbe:	40 e0       	ldi	r20, 0x00	; 0
    1dc0:	0e 94 e7 06 	call	0xdce	; 0xdce <MDIO_u8SetPinValue>

	}
#endif

}
    1dc4:	2f 96       	adiw	r28, 0x0f	; 15
    1dc6:	0f b6       	in	r0, 0x3f	; 63
    1dc8:	f8 94       	cli
    1dca:	de bf       	out	0x3e, r29	; 62
    1dcc:	0f be       	out	0x3f, r0	; 63
    1dce:	cd bf       	out	0x3d, r28	; 61
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <HLCD_voidSendChar>:

void HLCD_voidSendChar (u8 Copy_u8Char)
{
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	cd b7       	in	r28, 0x3d	; 61
    1ddc:	de b7       	in	r29, 0x3e	; 62
    1dde:	2f 97       	sbiw	r28, 0x0f	; 15
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	f8 94       	cli
    1de4:	de bf       	out	0x3e, r29	; 62
    1de6:	0f be       	out	0x3f, r0	; 63
    1de8:	cd bf       	out	0x3d, r28	; 61
    1dea:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(1);
	}
#elif(LCD_MODE == LCD_4_BIT_MODE)
	{
		/* Rs = 1 */
		MDIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	60 e0       	ldi	r22, 0x00	; 0
    1df0:	41 e0       	ldi	r20, 0x01	; 1
    1df2:	0e 94 e7 06 	call	0xdce	; 0xdce <MDIO_u8SetPinValue>
		/* Rw = 0 */
		MDIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	61 e0       	ldi	r22, 0x01	; 1
    1dfa:	40 e0       	ldi	r20, 0x00	; 0
    1dfc:	0e 94 e7 06 	call	0xdce	; 0xdce <MDIO_u8SetPinValue>

		/* Send Char byte to the Data Pins of LCD */
		MDIO_u8Set4PinsValue(LCD_u8_DATA_PORT,LCD_u8_4BIT_START_PIN,Copy_u8Char);
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	64 e0       	ldi	r22, 0x04	; 4
    1e04:	4f 85       	ldd	r20, Y+15	; 0x0f
    1e06:	0e 94 06 0a 	call	0x140c	; 0x140c <MDIO_u8Set4PinsValue>
		/* Pulse of Enable E = 1 , E = 0 */
		MDIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	62 e0       	ldi	r22, 0x02	; 2
    1e0e:	41 e0       	ldi	r20, 0x01	; 1
    1e10:	0e 94 e7 06 	call	0xdce	; 0xdce <MDIO_u8SetPinValue>
    1e14:	80 e0       	ldi	r24, 0x00	; 0
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	a0 e0       	ldi	r26, 0x00	; 0
    1e1a:	b0 e4       	ldi	r27, 0x40	; 64
    1e1c:	8b 87       	std	Y+11, r24	; 0x0b
    1e1e:	9c 87       	std	Y+12, r25	; 0x0c
    1e20:	ad 87       	std	Y+13, r26	; 0x0d
    1e22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	4a ef       	ldi	r20, 0xFA	; 250
    1e32:	54 e4       	ldi	r21, 0x44	; 68
    1e34:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	8f 83       	std	Y+7, r24	; 0x07
    1e3e:	98 87       	std	Y+8, r25	; 0x08
    1e40:	a9 87       	std	Y+9, r26	; 0x09
    1e42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e44:	6f 81       	ldd	r22, Y+7	; 0x07
    1e46:	78 85       	ldd	r23, Y+8	; 0x08
    1e48:	89 85       	ldd	r24, Y+9	; 0x09
    1e4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	40 e8       	ldi	r20, 0x80	; 128
    1e52:	5f e3       	ldi	r21, 0x3F	; 63
    1e54:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e58:	88 23       	and	r24, r24
    1e5a:	2c f4       	brge	.+10     	; 0x1e66 <HLCD_voidSendChar+0x90>
		__ticks = 1;
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	9e 83       	std	Y+6, r25	; 0x06
    1e62:	8d 83       	std	Y+5, r24	; 0x05
    1e64:	3f c0       	rjmp	.+126    	; 0x1ee4 <HLCD_voidSendChar+0x10e>
	else if (__tmp > 65535)
    1e66:	6f 81       	ldd	r22, Y+7	; 0x07
    1e68:	78 85       	ldd	r23, Y+8	; 0x08
    1e6a:	89 85       	ldd	r24, Y+9	; 0x09
    1e6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	3f ef       	ldi	r19, 0xFF	; 255
    1e72:	4f e7       	ldi	r20, 0x7F	; 127
    1e74:	57 e4       	ldi	r21, 0x47	; 71
    1e76:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e7a:	18 16       	cp	r1, r24
    1e7c:	4c f5       	brge	.+82     	; 0x1ed0 <HLCD_voidSendChar+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e2       	ldi	r20, 0x20	; 32
    1e8c:	51 e4       	ldi	r21, 0x41	; 65
    1e8e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	bc 01       	movw	r22, r24
    1e98:	cd 01       	movw	r24, r26
    1e9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	9e 83       	std	Y+6, r25	; 0x06
    1ea4:	8d 83       	std	Y+5, r24	; 0x05
    1ea6:	0f c0       	rjmp	.+30     	; 0x1ec6 <HLCD_voidSendChar+0xf0>
    1ea8:	88 ec       	ldi	r24, 0xC8	; 200
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	9c 83       	std	Y+4, r25	; 0x04
    1eae:	8b 83       	std	Y+3, r24	; 0x03
    1eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb4:	01 97       	sbiw	r24, 0x01	; 1
    1eb6:	f1 f7       	brne	.-4      	; 0x1eb4 <HLCD_voidSendChar+0xde>
    1eb8:	9c 83       	std	Y+4, r25	; 0x04
    1eba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ebc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ebe:	9e 81       	ldd	r25, Y+6	; 0x06
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	9e 83       	std	Y+6, r25	; 0x06
    1ec4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ec6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ec8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eca:	00 97       	sbiw	r24, 0x00	; 0
    1ecc:	69 f7       	brne	.-38     	; 0x1ea8 <HLCD_voidSendChar+0xd2>
    1ece:	14 c0       	rjmp	.+40     	; 0x1ef8 <HLCD_voidSendChar+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed2:	78 85       	ldd	r23, Y+8	; 0x08
    1ed4:	89 85       	ldd	r24, Y+9	; 0x09
    1ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	9e 83       	std	Y+6, r25	; 0x06
    1ee2:	8d 83       	std	Y+5, r24	; 0x05
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee8:	9a 83       	std	Y+2, r25	; 0x02
    1eea:	89 83       	std	Y+1, r24	; 0x01
    1eec:	89 81       	ldd	r24, Y+1	; 0x01
    1eee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef0:	01 97       	sbiw	r24, 0x01	; 1
    1ef2:	f1 f7       	brne	.-4      	; 0x1ef0 <HLCD_voidSendChar+0x11a>
    1ef4:	9a 83       	std	Y+2, r25	; 0x02
    1ef6:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		MDIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	62 e0       	ldi	r22, 0x02	; 2
    1efc:	40 e0       	ldi	r20, 0x00	; 0
    1efe:	0e 94 e7 06 	call	0xdce	; 0xdce <MDIO_u8SetPinValue>

	}
#endif

}
    1f02:	2f 96       	adiw	r28, 0x0f	; 15
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	cf 91       	pop	r28
    1f10:	df 91       	pop	r29
    1f12:	08 95       	ret

00001f14 <HLCD_voidWriteChar>:

void HLCD_voidWriteChar (u8 Copy_u8Char)
{
    1f14:	df 93       	push	r29
    1f16:	cf 93       	push	r28
    1f18:	0f 92       	push	r0
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	89 83       	std	Y+1, r24	; 0x01
	{
		HLCD_voidSendChar ( Copy_u8Char);
	}
#elif(LCD_MODE == LCD_4_BIT_MODE)
	{
		HLCD_voidSendChar ( Copy_u8Char>>4);
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
    1f22:	82 95       	swap	r24
    1f24:	8f 70       	andi	r24, 0x0F	; 15
    1f26:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <HLCD_voidSendChar>
		HLCD_voidSendChar ( Copy_u8Char);
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <HLCD_voidSendChar>
	}
#endif

}
    1f30:	0f 90       	pop	r0
    1f32:	cf 91       	pop	r28
    1f34:	df 91       	pop	r29
    1f36:	08 95       	ret

00001f38 <HLCD_voidWriteString>:
void HLCD_voidWriteString (u8 * Copy_pu8String)
{
    1f38:	df 93       	push	r29
    1f3a:	cf 93       	push	r28
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <HLCD_voidWriteString+0x6>
    1f3e:	00 d0       	rcall	.+0      	; 0x1f40 <HLCD_voidWriteString+0x8>
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	9c 83       	std	Y+4, r25	; 0x04
    1f46:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_pu8String != NULL )
    1f48:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4c:	00 97       	sbiw	r24, 0x00	; 0
    1f4e:	21 f1       	breq	.+72     	; 0x1f98 <HLCD_voidWriteString+0x60>
	{
		u8 x = 0;
    1f50:	1a 82       	std	Y+2, r1	; 0x02
		u8 i = 0;
    1f52:	19 82       	std	Y+1, r1	; 0x01
    1f54:	16 c0       	rjmp	.+44     	; 0x1f82 <HLCD_voidWriteString+0x4a>
		while(Copy_pu8String[x] != '\0')
		{
			x++ ;
    1f56:	8a 81       	ldd	r24, Y+2	; 0x02
    1f58:	8f 5f       	subi	r24, 0xFF	; 255
    1f5a:	8a 83       	std	Y+2, r24	; 0x02
    1f5c:	0e c0       	rjmp	.+28     	; 0x1f7a <HLCD_voidWriteString+0x42>
			for(  ; i < x; i++)
			{
				/* Write Character on LCD */
				HLCD_voidWriteChar (Copy_pu8String[i]);
    1f5e:	89 81       	ldd	r24, Y+1	; 0x01
    1f60:	28 2f       	mov	r18, r24
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	9c 81       	ldd	r25, Y+4	; 0x04
    1f68:	fc 01       	movw	r30, r24
    1f6a:	e2 0f       	add	r30, r18
    1f6c:	f3 1f       	adc	r31, r19
    1f6e:	80 81       	ld	r24, Z
    1f70:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <HLCD_voidWriteChar>
		u8 x = 0;
		u8 i = 0;
		while(Copy_pu8String[x] != '\0')
		{
			x++ ;
			for(  ; i < x; i++)
    1f74:	89 81       	ldd	r24, Y+1	; 0x01
    1f76:	8f 5f       	subi	r24, 0xFF	; 255
    1f78:	89 83       	std	Y+1, r24	; 0x01
    1f7a:	99 81       	ldd	r25, Y+1	; 0x01
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	98 17       	cp	r25, r24
    1f80:	70 f3       	brcs	.-36     	; 0x1f5e <HLCD_voidWriteString+0x26>
{
	if(Copy_pu8String != NULL )
	{
		u8 x = 0;
		u8 i = 0;
		while(Copy_pu8String[x] != '\0')
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	28 2f       	mov	r18, r24
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	e2 0f       	add	r30, r18
    1f90:	f3 1f       	adc	r31, r19
    1f92:	80 81       	ld	r24, Z
    1f94:	88 23       	and	r24, r24
    1f96:	f9 f6       	brne	.-66     	; 0x1f56 <HLCD_voidWriteString+0x1e>
			}

		}
	}

}
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	cf 91       	pop	r28
    1fa2:	df 91       	pop	r29
    1fa4:	08 95       	ret

00001fa6 <HLCD_u8_GoTo_XY>:
u8 HLCD_u8_GoTo_XY     (u8 Copy_u8X,u8 Copy_u8Y)
{
    1fa6:	df 93       	push	r29
    1fa8:	cf 93       	push	r28
    1faa:	00 d0       	rcall	.+0      	; 0x1fac <HLCD_u8_GoTo_XY+0x6>
    1fac:	00 d0       	rcall	.+0      	; 0x1fae <HLCD_u8_GoTo_XY+0x8>
    1fae:	00 d0       	rcall	.+0      	; 0x1fb0 <HLCD_u8_GoTo_XY+0xa>
    1fb0:	cd b7       	in	r28, 0x3d	; 61
    1fb2:	de b7       	in	r29, 0x3e	; 62
    1fb4:	8a 83       	std	Y+2, r24	; 0x02
    1fb6:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ReturnState = STD_TYPES_OK;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8X <=1)&&(Copy_u8Y <= 39))
    1fbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbe:	82 30       	cpi	r24, 0x02	; 2
    1fc0:	d0 f5       	brcc	.+116    	; 0x2036 <HLCD_u8_GoTo_XY+0x90>
    1fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc4:	88 32       	cpi	r24, 0x28	; 40
    1fc6:	b8 f5       	brcc	.+110    	; 0x2036 <HLCD_u8_GoTo_XY+0x90>
			case LCD_u8_LINE1 : HLCD_voidSendCmnd(0xC0 + Copy_u8Y);break;
			}
		}
#elif(LCD_MODE == LCD_4_BIT_MODE)
		{
			switch(Copy_u8X)
    1fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fca:	28 2f       	mov	r18, r24
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	3d 83       	std	Y+5, r19	; 0x05
    1fd0:	2c 83       	std	Y+4, r18	; 0x04
    1fd2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	31 f0       	breq	.+12     	; 0x1fe6 <HLCD_u8_GoTo_XY+0x40>
    1fda:	2c 81       	ldd	r18, Y+4	; 0x04
    1fdc:	3d 81       	ldd	r19, Y+5	; 0x05
    1fde:	21 30       	cpi	r18, 0x01	; 1
    1fe0:	31 05       	cpc	r19, r1
    1fe2:	a9 f0       	breq	.+42     	; 0x200e <HLCD_u8_GoTo_XY+0x68>
    1fe4:	29 c0       	rjmp	.+82     	; 0x2038 <HLCD_u8_GoTo_XY+0x92>
			{

			case LCD_u8_LINE0 :
				HLCD_voidSendCmnd((0x80 + Copy_u8Y)>>4);
    1fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe8:	88 2f       	mov	r24, r24
    1fea:	90 e0       	ldi	r25, 0x00	; 0
    1fec:	80 58       	subi	r24, 0x80	; 128
    1fee:	9f 4f       	sbci	r25, 0xFF	; 255
    1ff0:	95 95       	asr	r25
    1ff2:	87 95       	ror	r24
    1ff4:	95 95       	asr	r25
    1ff6:	87 95       	ror	r24
    1ff8:	95 95       	asr	r25
    1ffa:	87 95       	ror	r24
    1ffc:	95 95       	asr	r25
    1ffe:	87 95       	ror	r24
    2000:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
			    HLCD_voidSendCmnd (0x80 + Copy_u8Y);
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	80 58       	subi	r24, 0x80	; 128
    2008:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
    200c:	15 c0       	rjmp	.+42     	; 0x2038 <HLCD_u8_GoTo_XY+0x92>
			break;

			case LCD_u8_LINE1 :
				HLCD_voidSendCmnd((0xC0 + Copy_u8Y)>>4);
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	88 2f       	mov	r24, r24
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	80 54       	subi	r24, 0x40	; 64
    2016:	9f 4f       	sbci	r25, 0xFF	; 255
    2018:	95 95       	asr	r25
    201a:	87 95       	ror	r24
    201c:	95 95       	asr	r25
    201e:	87 95       	ror	r24
    2020:	95 95       	asr	r25
    2022:	87 95       	ror	r24
    2024:	95 95       	asr	r25
    2026:	87 95       	ror	r24
    2028:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
				HLCD_voidSendCmnd( 0xC0 + Copy_u8Y);
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	80 54       	subi	r24, 0x40	; 64
    2030:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
    2034:	01 c0       	rjmp	.+2      	; 0x2038 <HLCD_u8_GoTo_XY+0x92>
#endif

	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    2036:	19 82       	std	Y+1, r1	; 0x01
	}


}
    2038:	26 96       	adiw	r28, 0x06	; 6
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	de bf       	out	0x3e, r29	; 62
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	cd bf       	out	0x3d, r28	; 61
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <HLCD_voidWriteNumber>:
void HLCD_voidWriteNumber (u32  Copy_u32Num)
{
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	cd b7       	in	r28, 0x3d	; 61
    2050:	de b7       	in	r29, 0x3e	; 62
    2052:	66 97       	sbiw	r28, 0x16	; 22
    2054:	0f b6       	in	r0, 0x3f	; 63
    2056:	f8 94       	cli
    2058:	de bf       	out	0x3e, r29	; 62
    205a:	0f be       	out	0x3f, r0	; 63
    205c:	cd bf       	out	0x3d, r28	; 61
    205e:	6b 8b       	std	Y+19, r22	; 0x13
    2060:	7c 8b       	std	Y+20, r23	; 0x14
    2062:	8d 8b       	std	Y+21, r24	; 0x15
    2064:	9e 8b       	std	Y+22, r25	; 0x16

	u8 Arr[10];
	u8 Local_Remainder = 1;
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	88 87       	std	Y+8, r24	; 0x08
	u32 Local_Number = Copy_u32Num;
    206a:	8b 89       	ldd	r24, Y+19	; 0x13
    206c:	9c 89       	ldd	r25, Y+20	; 0x14
    206e:	ad 89       	ldd	r26, Y+21	; 0x15
    2070:	be 89       	ldd	r27, Y+22	; 0x16
    2072:	8c 83       	std	Y+4, r24	; 0x04
    2074:	9d 83       	std	Y+5, r25	; 0x05
    2076:	ae 83       	std	Y+6, r26	; 0x06
    2078:	bf 83       	std	Y+7, r27	; 0x07
	u8 Local_Counter = 0;
    207a:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_Counter2 ;


	for(u8 initial = 10 ; initial >=1 ; initial--)
    207c:	8a e0       	ldi	r24, 0x0A	; 10
    207e:	89 83       	std	Y+1, r24	; 0x01
    2080:	42 c0       	rjmp	.+132    	; 0x2106 <HLCD_voidWriteNumber+0xbc>
	{
		Local_Remainder = Local_Number % 10 ;
    2082:	8c 81       	ldd	r24, Y+4	; 0x04
    2084:	9d 81       	ldd	r25, Y+5	; 0x05
    2086:	ae 81       	ldd	r26, Y+6	; 0x06
    2088:	bf 81       	ldd	r27, Y+7	; 0x07
    208a:	2a e0       	ldi	r18, 0x0A	; 10
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	50 e0       	ldi	r21, 0x00	; 0
    2092:	bc 01       	movw	r22, r24
    2094:	cd 01       	movw	r24, r26
    2096:	0e 94 56 12 	call	0x24ac	; 0x24ac <__udivmodsi4>
    209a:	dc 01       	movw	r26, r24
    209c:	cb 01       	movw	r24, r22
    209e:	88 87       	std	Y+8, r24	; 0x08
		Local_Number    = Local_Number /10 ;
    20a0:	8c 81       	ldd	r24, Y+4	; 0x04
    20a2:	9d 81       	ldd	r25, Y+5	; 0x05
    20a4:	ae 81       	ldd	r26, Y+6	; 0x06
    20a6:	bf 81       	ldd	r27, Y+7	; 0x07
    20a8:	2a e0       	ldi	r18, 0x0A	; 10
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	50 e0       	ldi	r21, 0x00	; 0
    20b0:	bc 01       	movw	r22, r24
    20b2:	cd 01       	movw	r24, r26
    20b4:	0e 94 56 12 	call	0x24ac	; 0x24ac <__udivmodsi4>
    20b8:	da 01       	movw	r26, r20
    20ba:	c9 01       	movw	r24, r18
    20bc:	8c 83       	std	Y+4, r24	; 0x04
    20be:	9d 83       	std	Y+5, r25	; 0x05
    20c0:	ae 83       	std	Y+6, r26	; 0x06
    20c2:	bf 83       	std	Y+7, r27	; 0x07

		if((Local_Remainder ==0) && (Local_Number<1) && (Local_Counter>0) )
    20c4:	88 85       	ldd	r24, Y+8	; 0x08
    20c6:	88 23       	and	r24, r24
    20c8:	59 f4       	brne	.+22     	; 0x20e0 <HLCD_voidWriteNumber+0x96>
    20ca:	8c 81       	ldd	r24, Y+4	; 0x04
    20cc:	9d 81       	ldd	r25, Y+5	; 0x05
    20ce:	ae 81       	ldd	r26, Y+6	; 0x06
    20d0:	bf 81       	ldd	r27, Y+7	; 0x07
    20d2:	00 97       	sbiw	r24, 0x00	; 0
    20d4:	a1 05       	cpc	r26, r1
    20d6:	b1 05       	cpc	r27, r1
    20d8:	19 f4       	brne	.+6      	; 0x20e0 <HLCD_voidWriteNumber+0x96>
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	88 23       	and	r24, r24
    20de:	b9 f4       	brne	.+46     	; 0x210e <HLCD_voidWriteNumber+0xc4>
		{
			break;
		}
		Local_Counter ++;
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	8f 5f       	subi	r24, 0xFF	; 255
    20e4:	8b 83       	std	Y+3, r24	; 0x03
		Arr[initial-1] = Local_Remainder ;
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	88 2f       	mov	r24, r24
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	9c 01       	movw	r18, r24
    20ee:	21 50       	subi	r18, 0x01	; 1
    20f0:	30 40       	sbci	r19, 0x00	; 0
    20f2:	ce 01       	movw	r24, r28
    20f4:	09 96       	adiw	r24, 0x09	; 9
    20f6:	fc 01       	movw	r30, r24
    20f8:	e2 0f       	add	r30, r18
    20fa:	f3 1f       	adc	r31, r19
    20fc:	88 85       	ldd	r24, Y+8	; 0x08
    20fe:	80 83       	st	Z, r24
	u32 Local_Number = Copy_u32Num;
	u8 Local_Counter = 0;
	u8 Local_Counter2 ;


	for(u8 initial = 10 ; initial >=1 ; initial--)
    2100:	89 81       	ldd	r24, Y+1	; 0x01
    2102:	81 50       	subi	r24, 0x01	; 1
    2104:	89 83       	std	Y+1, r24	; 0x01
    2106:	89 81       	ldd	r24, Y+1	; 0x01
    2108:	88 23       	and	r24, r24
    210a:	09 f0       	breq	.+2      	; 0x210e <HLCD_voidWriteNumber+0xc4>
    210c:	ba cf       	rjmp	.-140    	; 0x2082 <HLCD_voidWriteNumber+0x38>
		}
		Local_Counter ++;
		Arr[initial-1] = Local_Remainder ;
	}

	for(Local_Counter2 = 10 - Local_Counter; Local_Counter2 < 10 ; Local_Counter2 ++)
    210e:	8a e0       	ldi	r24, 0x0A	; 10
    2110:	9b 81       	ldd	r25, Y+3	; 0x03
    2112:	89 1b       	sub	r24, r25
    2114:	8a 83       	std	Y+2, r24	; 0x02
    2116:	0f c0       	rjmp	.+30     	; 0x2136 <HLCD_voidWriteNumber+0xec>
	{
		HLCD_voidWriteChar(Arr[Local_Counter2]+48);
    2118:	8a 81       	ldd	r24, Y+2	; 0x02
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	ce 01       	movw	r24, r28
    2120:	09 96       	adiw	r24, 0x09	; 9
    2122:	fc 01       	movw	r30, r24
    2124:	e2 0f       	add	r30, r18
    2126:	f3 1f       	adc	r31, r19
    2128:	80 81       	ld	r24, Z
    212a:	80 5d       	subi	r24, 0xD0	; 208
    212c:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <HLCD_voidWriteChar>
		}
		Local_Counter ++;
		Arr[initial-1] = Local_Remainder ;
	}

	for(Local_Counter2 = 10 - Local_Counter; Local_Counter2 < 10 ; Local_Counter2 ++)
    2130:	8a 81       	ldd	r24, Y+2	; 0x02
    2132:	8f 5f       	subi	r24, 0xFF	; 255
    2134:	8a 83       	std	Y+2, r24	; 0x02
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	8a 30       	cpi	r24, 0x0A	; 10
    213a:	70 f3       	brcs	.-36     	; 0x2118 <HLCD_voidWriteNumber+0xce>
		HLCD_voidWriteChar(Arr[Local_Counter2]+48);
	}



}
    213c:	66 96       	adiw	r28, 0x16	; 22
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <HLCD_voidSendSpecialChar>:

void HLCD_voidSendSpecialChar(u8 Copy_u8CharNo,u8 Copy_u8X,u8 Copy_u8Y,u8 * Copy_PSpecialChar)
{
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	28 97       	sbiw	r28, 0x08	; 8
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61
    2162:	8a 83       	std	Y+2, r24	; 0x02
    2164:	6b 83       	std	Y+3, r22	; 0x03
    2166:	4c 83       	std	Y+4, r20	; 0x04
    2168:	3e 83       	std	Y+6, r19	; 0x06
    216a:	2d 83       	std	Y+5, r18	; 0x05
			break;
		}
	}
#elif(LCD_MODE == LCD_4_BIT_MODE)
	{
		switch(Copy_u8CharNo)
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	28 2f       	mov	r18, r24
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	38 87       	std	Y+8, r19	; 0x08
    2174:	2f 83       	std	Y+7, r18	; 0x07
    2176:	8f 81       	ldd	r24, Y+7	; 0x07
    2178:	98 85       	ldd	r25, Y+8	; 0x08
    217a:	83 30       	cpi	r24, 0x03	; 3
    217c:	91 05       	cpc	r25, r1
    217e:	09 f4       	brne	.+2      	; 0x2182 <HLCD_voidSendSpecialChar+0x34>
    2180:	3e c0       	rjmp	.+124    	; 0x21fe <HLCD_voidSendSpecialChar+0xb0>
    2182:	2f 81       	ldd	r18, Y+7	; 0x07
    2184:	38 85       	ldd	r19, Y+8	; 0x08
    2186:	24 30       	cpi	r18, 0x04	; 4
    2188:	31 05       	cpc	r19, r1
    218a:	7c f4       	brge	.+30     	; 0x21aa <HLCD_voidSendSpecialChar+0x5c>
    218c:	8f 81       	ldd	r24, Y+7	; 0x07
    218e:	98 85       	ldd	r25, Y+8	; 0x08
    2190:	81 30       	cpi	r24, 0x01	; 1
    2192:	91 05       	cpc	r25, r1
    2194:	31 f1       	breq	.+76     	; 0x21e2 <HLCD_voidSendSpecialChar+0x94>
    2196:	2f 81       	ldd	r18, Y+7	; 0x07
    2198:	38 85       	ldd	r19, Y+8	; 0x08
    219a:	22 30       	cpi	r18, 0x02	; 2
    219c:	31 05       	cpc	r19, r1
    219e:	44 f5       	brge	.+80     	; 0x21f0 <HLCD_voidSendSpecialChar+0xa2>
    21a0:	8f 81       	ldd	r24, Y+7	; 0x07
    21a2:	98 85       	ldd	r25, Y+8	; 0x08
    21a4:	00 97       	sbiw	r24, 0x00	; 0
    21a6:	b1 f0       	breq	.+44     	; 0x21d4 <HLCD_voidSendSpecialChar+0x86>
    21a8:	4c c0       	rjmp	.+152    	; 0x2242 <HLCD_voidSendSpecialChar+0xf4>
    21aa:	2f 81       	ldd	r18, Y+7	; 0x07
    21ac:	38 85       	ldd	r19, Y+8	; 0x08
    21ae:	25 30       	cpi	r18, 0x05	; 5
    21b0:	31 05       	cpc	r19, r1
    21b2:	99 f1       	breq	.+102    	; 0x221a <HLCD_voidSendSpecialChar+0xcc>
    21b4:	8f 81       	ldd	r24, Y+7	; 0x07
    21b6:	98 85       	ldd	r25, Y+8	; 0x08
    21b8:	85 30       	cpi	r24, 0x05	; 5
    21ba:	91 05       	cpc	r25, r1
    21bc:	3c f1       	brlt	.+78     	; 0x220c <HLCD_voidSendSpecialChar+0xbe>
    21be:	2f 81       	ldd	r18, Y+7	; 0x07
    21c0:	38 85       	ldd	r19, Y+8	; 0x08
    21c2:	26 30       	cpi	r18, 0x06	; 6
    21c4:	31 05       	cpc	r19, r1
    21c6:	81 f1       	breq	.+96     	; 0x2228 <HLCD_voidSendSpecialChar+0xda>
    21c8:	8f 81       	ldd	r24, Y+7	; 0x07
    21ca:	98 85       	ldd	r25, Y+8	; 0x08
    21cc:	87 30       	cpi	r24, 0x07	; 7
    21ce:	91 05       	cpc	r25, r1
    21d0:	91 f1       	breq	.+100    	; 0x2236 <HLCD_voidSendSpecialChar+0xe8>
    21d2:	37 c0       	rjmp	.+110    	; 0x2242 <HLCD_voidSendSpecialChar+0xf4>
		{
		case 0:
			HLCD_voidSendCmnd(0b01000000>>4);
    21d4:	84 e0       	ldi	r24, 0x04	; 4
    21d6:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
			HLCD_voidSendCmnd(0b01000000);
    21da:	80 e4       	ldi	r24, 0x40	; 64
    21dc:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
    21e0:	30 c0       	rjmp	.+96     	; 0x2242 <HLCD_voidSendSpecialChar+0xf4>
			break;
		case 1:
			HLCD_voidSendCmnd(0b01001000>>4);
    21e2:	84 e0       	ldi	r24, 0x04	; 4
    21e4:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
			HLCD_voidSendCmnd(0b01001000);
    21e8:	88 e4       	ldi	r24, 0x48	; 72
    21ea:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
    21ee:	29 c0       	rjmp	.+82     	; 0x2242 <HLCD_voidSendSpecialChar+0xf4>
			break;
		case 2:
			HLCD_voidSendCmnd(0b01010000>>4);
    21f0:	85 e0       	ldi	r24, 0x05	; 5
    21f2:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
			HLCD_voidSendCmnd(0b01010000);
    21f6:	80 e5       	ldi	r24, 0x50	; 80
    21f8:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
    21fc:	22 c0       	rjmp	.+68     	; 0x2242 <HLCD_voidSendSpecialChar+0xf4>
			break;
		case 3:
			HLCD_voidSendCmnd(0b01011000>>4);
    21fe:	85 e0       	ldi	r24, 0x05	; 5
    2200:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
			HLCD_voidSendCmnd(0b01011000);
    2204:	88 e5       	ldi	r24, 0x58	; 88
    2206:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
    220a:	1b c0       	rjmp	.+54     	; 0x2242 <HLCD_voidSendSpecialChar+0xf4>
			break;
		case 4:
			HLCD_voidSendCmnd(0b01100000>>4);
    220c:	86 e0       	ldi	r24, 0x06	; 6
    220e:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
			HLCD_voidSendCmnd(0b01100000);
    2212:	80 e6       	ldi	r24, 0x60	; 96
    2214:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
    2218:	14 c0       	rjmp	.+40     	; 0x2242 <HLCD_voidSendSpecialChar+0xf4>
			break;
		case 5:
			HLCD_voidSendCmnd(0b01101000>>4);
    221a:	86 e0       	ldi	r24, 0x06	; 6
    221c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
			HLCD_voidSendCmnd(0b01101000);
    2220:	88 e6       	ldi	r24, 0x68	; 104
    2222:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
    2226:	0d c0       	rjmp	.+26     	; 0x2242 <HLCD_voidSendSpecialChar+0xf4>
			break;
		case 6:
			HLCD_voidSendCmnd(0b01110000>>4);
    2228:	87 e0       	ldi	r24, 0x07	; 7
    222a:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
			HLCD_voidSendCmnd(0b01110000);
    222e:	80 e7       	ldi	r24, 0x70	; 112
    2230:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
    2234:	06 c0       	rjmp	.+12     	; 0x2242 <HLCD_voidSendSpecialChar+0xf4>
			break;
		case 7:
			HLCD_voidSendCmnd(0b01111000>>4);
    2236:	87 e0       	ldi	r24, 0x07	; 7
    2238:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
			HLCD_voidSendCmnd(0b01111000);
    223c:	88 e7       	ldi	r24, 0x78	; 120
    223e:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
#endif




	for(u8 specialchar=0 ; specialchar<8 ; specialchar++ )
    2242:	19 82       	std	Y+1, r1	; 0x01
    2244:	0e c0       	rjmp	.+28     	; 0x2262 <HLCD_voidSendSpecialChar+0x114>
	{
		HLCD_voidWriteChar(Copy_PSpecialChar[specialchar]);
    2246:	89 81       	ldd	r24, Y+1	; 0x01
    2248:	28 2f       	mov	r18, r24
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	8d 81       	ldd	r24, Y+5	; 0x05
    224e:	9e 81       	ldd	r25, Y+6	; 0x06
    2250:	fc 01       	movw	r30, r24
    2252:	e2 0f       	add	r30, r18
    2254:	f3 1f       	adc	r31, r19
    2256:	80 81       	ld	r24, Z
    2258:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <HLCD_voidWriteChar>
#endif




	for(u8 specialchar=0 ; specialchar<8 ; specialchar++ )
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	8f 5f       	subi	r24, 0xFF	; 255
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	89 81       	ldd	r24, Y+1	; 0x01
    2264:	88 30       	cpi	r24, 0x08	; 8
    2266:	78 f3       	brcs	.-34     	; 0x2246 <HLCD_voidSendSpecialChar+0xf8>
	{
		HLCD_voidWriteChar(Copy_PSpecialChar[specialchar]);
	}

	HLCD_u8_GoTo_XY( Copy_u8X, Copy_u8Y);
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	6c 81       	ldd	r22, Y+4	; 0x04
    226c:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <HLCD_u8_GoTo_XY>
	HLCD_voidWriteChar(Copy_u8CharNo);
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <HLCD_voidWriteChar>


}
    2276:	28 96       	adiw	r28, 0x08	; 8
    2278:	0f b6       	in	r0, 0x3f	; 63
    227a:	f8 94       	cli
    227c:	de bf       	out	0x3e, r29	; 62
    227e:	0f be       	out	0x3f, r0	; 63
    2280:	cd bf       	out	0x3d, r28	; 61
    2282:	cf 91       	pop	r28
    2284:	df 91       	pop	r29
    2286:	08 95       	ret

00002288 <HLCD_voidShiftDispRight>:

void HLCD_voidShiftDispRight(void)
{
    2288:	df 93       	push	r29
    228a:	cf 93       	push	r28
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
	{
		HLCD_voidSendCmnd(LCD_SHIFT_RIGHT);
	}
#elif(LCD_MODE == LCD_4_BIT_MODE)
	{
		HLCD_voidSendCmnd(LCD_SHIFT_RIGHT>>4);
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
		HLCD_voidSendCmnd(LCD_SHIFT_RIGHT);
    2296:	8c e1       	ldi	r24, 0x1C	; 28
    2298:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
	}
#endif
}
    229c:	cf 91       	pop	r28
    229e:	df 91       	pop	r29
    22a0:	08 95       	ret

000022a2 <HLCD_voidShiftDispLeft>:
void HLCD_voidShiftDispLeft(void)
{
    22a2:	df 93       	push	r29
    22a4:	cf 93       	push	r28
    22a6:	cd b7       	in	r28, 0x3d	; 61
    22a8:	de b7       	in	r29, 0x3e	; 62
	{
		HLCD_voidSendCmnd(LCD_SHIFT_LEFT);
	}
#elif(LCD_MODE == LCD_4_BIT_MODE)
	{
		HLCD_voidSendCmnd(LCD_SHIFT_LEFT>>4);
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
		HLCD_voidSendCmnd(LCD_SHIFT_LEFT);
    22b0:	88 e1       	ldi	r24, 0x18	; 24
    22b2:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <HLCD_voidSendCmnd>
	}
#endif
}
    22b6:	cf 91       	pop	r28
    22b8:	df 91       	pop	r29
    22ba:	08 95       	ret

000022bc <main>:
/* Functions Prototype  */



int main(void)
{
    22bc:	df 93       	push	r29
    22be:	cf 93       	push	r28
    22c0:	cd b7       	in	r28, 0x3d	; 61
    22c2:	de b7       	in	r29, 0x3e	; 62
    22c4:	6c 97       	sbiw	r28, 0x1c	; 28
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	de bf       	out	0x3e, r29	; 62
    22cc:	0f be       	out	0x3f, r0	; 63
    22ce:	cd bf       	out	0x3d, r28	; 61
   MDIO_u8Init();
    22d0:	0e 94 9b 05 	call	0xb36	; 0xb36 <MDIO_u8Init>


	/* Peripherals Initialization */

    HLCD_voidInit();
    22d4:	0e 94 40 0b 	call	0x1680	; 0x1680 <HLCD_voidInit>
    {

    	/* Calls a Functions that Displays The Current Temperature  */
    //	Display_Temperature_LCD();

    	HLCD_voidWriteChar('a');
    22d8:	81 e6       	ldi	r24, 0x61	; 97
    22da:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <HLCD_voidWriteChar>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	aa e7       	ldi	r26, 0x7A	; 122
    22e4:	b4 e4       	ldi	r27, 0x44	; 68
    22e6:	89 8f       	std	Y+25, r24	; 0x19
    22e8:	9a 8f       	std	Y+26, r25	; 0x1a
    22ea:	ab 8f       	std	Y+27, r26	; 0x1b
    22ec:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ee:	69 8d       	ldd	r22, Y+25	; 0x19
    22f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22f6:	20 e0       	ldi	r18, 0x00	; 0
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	4a ef       	ldi	r20, 0xFA	; 250
    22fc:	54 e4       	ldi	r21, 0x44	; 68
    22fe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2302:	dc 01       	movw	r26, r24
    2304:	cb 01       	movw	r24, r22
    2306:	8d 8b       	std	Y+21, r24	; 0x15
    2308:	9e 8b       	std	Y+22, r25	; 0x16
    230a:	af 8b       	std	Y+23, r26	; 0x17
    230c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    230e:	6d 89       	ldd	r22, Y+21	; 0x15
    2310:	7e 89       	ldd	r23, Y+22	; 0x16
    2312:	8f 89       	ldd	r24, Y+23	; 0x17
    2314:	98 8d       	ldd	r25, Y+24	; 0x18
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	40 e8       	ldi	r20, 0x80	; 128
    231c:	5f e3       	ldi	r21, 0x3F	; 63
    231e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2322:	88 23       	and	r24, r24
    2324:	2c f4       	brge	.+10     	; 0x2330 <main+0x74>
		__ticks = 1;
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	9c 8b       	std	Y+20, r25	; 0x14
    232c:	8b 8b       	std	Y+19, r24	; 0x13
    232e:	3f c0       	rjmp	.+126    	; 0x23ae <main+0xf2>
	else if (__tmp > 65535)
    2330:	6d 89       	ldd	r22, Y+21	; 0x15
    2332:	7e 89       	ldd	r23, Y+22	; 0x16
    2334:	8f 89       	ldd	r24, Y+23	; 0x17
    2336:	98 8d       	ldd	r25, Y+24	; 0x18
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	3f ef       	ldi	r19, 0xFF	; 255
    233c:	4f e7       	ldi	r20, 0x7F	; 127
    233e:	57 e4       	ldi	r21, 0x47	; 71
    2340:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2344:	18 16       	cp	r1, r24
    2346:	4c f5       	brge	.+82     	; 0x239a <main+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2348:	69 8d       	ldd	r22, Y+25	; 0x19
    234a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    234c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    234e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	40 e2       	ldi	r20, 0x20	; 32
    2356:	51 e4       	ldi	r21, 0x41	; 65
    2358:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    235c:	dc 01       	movw	r26, r24
    235e:	cb 01       	movw	r24, r22
    2360:	bc 01       	movw	r22, r24
    2362:	cd 01       	movw	r24, r26
    2364:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	9c 8b       	std	Y+20, r25	; 0x14
    236e:	8b 8b       	std	Y+19, r24	; 0x13
    2370:	0f c0       	rjmp	.+30     	; 0x2390 <main+0xd4>
    2372:	88 ec       	ldi	r24, 0xC8	; 200
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	9a 8b       	std	Y+18, r25	; 0x12
    2378:	89 8b       	std	Y+17, r24	; 0x11
    237a:	89 89       	ldd	r24, Y+17	; 0x11
    237c:	9a 89       	ldd	r25, Y+18	; 0x12
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <main+0xc2>
    2382:	9a 8b       	std	Y+18, r25	; 0x12
    2384:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2386:	8b 89       	ldd	r24, Y+19	; 0x13
    2388:	9c 89       	ldd	r25, Y+20	; 0x14
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	9c 8b       	std	Y+20, r25	; 0x14
    238e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2390:	8b 89       	ldd	r24, Y+19	; 0x13
    2392:	9c 89       	ldd	r25, Y+20	; 0x14
    2394:	00 97       	sbiw	r24, 0x00	; 0
    2396:	69 f7       	brne	.-38     	; 0x2372 <main+0xb6>
    2398:	14 c0       	rjmp	.+40     	; 0x23c2 <main+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239a:	6d 89       	ldd	r22, Y+21	; 0x15
    239c:	7e 89       	ldd	r23, Y+22	; 0x16
    239e:	8f 89       	ldd	r24, Y+23	; 0x17
    23a0:	98 8d       	ldd	r25, Y+24	; 0x18
    23a2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23a6:	dc 01       	movw	r26, r24
    23a8:	cb 01       	movw	r24, r22
    23aa:	9c 8b       	std	Y+20, r25	; 0x14
    23ac:	8b 8b       	std	Y+19, r24	; 0x13
    23ae:	8b 89       	ldd	r24, Y+19	; 0x13
    23b0:	9c 89       	ldd	r25, Y+20	; 0x14
    23b2:	98 8b       	std	Y+16, r25	; 0x10
    23b4:	8f 87       	std	Y+15, r24	; 0x0f
    23b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23b8:	98 89       	ldd	r25, Y+16	; 0x10
    23ba:	01 97       	sbiw	r24, 0x01	; 1
    23bc:	f1 f7       	brne	.-4      	; 0x23ba <main+0xfe>
    23be:	98 8b       	std	Y+16, r25	; 0x10
    23c0:	8f 87       	std	Y+15, r24	; 0x0f

    	_delay_ms(1000);
        HLCD_voidClear();
    23c2:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <HLCD_voidClear>
    23c6:	80 e0       	ldi	r24, 0x00	; 0
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	aa e7       	ldi	r26, 0x7A	; 122
    23cc:	b4 e4       	ldi	r27, 0x44	; 68
    23ce:	8b 87       	std	Y+11, r24	; 0x0b
    23d0:	9c 87       	std	Y+12, r25	; 0x0c
    23d2:	ad 87       	std	Y+13, r26	; 0x0d
    23d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    23d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    23da:	8d 85       	ldd	r24, Y+13	; 0x0d
    23dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    23de:	20 e0       	ldi	r18, 0x00	; 0
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	4a ef       	ldi	r20, 0xFA	; 250
    23e4:	54 e4       	ldi	r21, 0x44	; 68
    23e6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	8f 83       	std	Y+7, r24	; 0x07
    23f0:	98 87       	std	Y+8, r25	; 0x08
    23f2:	a9 87       	std	Y+9, r26	; 0x09
    23f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23f6:	6f 81       	ldd	r22, Y+7	; 0x07
    23f8:	78 85       	ldd	r23, Y+8	; 0x08
    23fa:	89 85       	ldd	r24, Y+9	; 0x09
    23fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e8       	ldi	r20, 0x80	; 128
    2404:	5f e3       	ldi	r21, 0x3F	; 63
    2406:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    240a:	88 23       	and	r24, r24
    240c:	2c f4       	brge	.+10     	; 0x2418 <main+0x15c>
		__ticks = 1;
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	9e 83       	std	Y+6, r25	; 0x06
    2414:	8d 83       	std	Y+5, r24	; 0x05
    2416:	3f c0       	rjmp	.+126    	; 0x2496 <main+0x1da>
	else if (__tmp > 65535)
    2418:	6f 81       	ldd	r22, Y+7	; 0x07
    241a:	78 85       	ldd	r23, Y+8	; 0x08
    241c:	89 85       	ldd	r24, Y+9	; 0x09
    241e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	3f ef       	ldi	r19, 0xFF	; 255
    2424:	4f e7       	ldi	r20, 0x7F	; 127
    2426:	57 e4       	ldi	r21, 0x47	; 71
    2428:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    242c:	18 16       	cp	r1, r24
    242e:	4c f5       	brge	.+82     	; 0x2482 <main+0x1c6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2430:	6b 85       	ldd	r22, Y+11	; 0x0b
    2432:	7c 85       	ldd	r23, Y+12	; 0x0c
    2434:	8d 85       	ldd	r24, Y+13	; 0x0d
    2436:	9e 85       	ldd	r25, Y+14	; 0x0e
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e2       	ldi	r20, 0x20	; 32
    243e:	51 e4       	ldi	r21, 0x41	; 65
    2440:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2444:	dc 01       	movw	r26, r24
    2446:	cb 01       	movw	r24, r22
    2448:	bc 01       	movw	r22, r24
    244a:	cd 01       	movw	r24, r26
    244c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	9e 83       	std	Y+6, r25	; 0x06
    2456:	8d 83       	std	Y+5, r24	; 0x05
    2458:	0f c0       	rjmp	.+30     	; 0x2478 <main+0x1bc>
    245a:	88 ec       	ldi	r24, 0xC8	; 200
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	9c 83       	std	Y+4, r25	; 0x04
    2460:	8b 83       	std	Y+3, r24	; 0x03
    2462:	8b 81       	ldd	r24, Y+3	; 0x03
    2464:	9c 81       	ldd	r25, Y+4	; 0x04
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	f1 f7       	brne	.-4      	; 0x2466 <main+0x1aa>
    246a:	9c 83       	std	Y+4, r25	; 0x04
    246c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    246e:	8d 81       	ldd	r24, Y+5	; 0x05
    2470:	9e 81       	ldd	r25, Y+6	; 0x06
    2472:	01 97       	sbiw	r24, 0x01	; 1
    2474:	9e 83       	std	Y+6, r25	; 0x06
    2476:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2478:	8d 81       	ldd	r24, Y+5	; 0x05
    247a:	9e 81       	ldd	r25, Y+6	; 0x06
    247c:	00 97       	sbiw	r24, 0x00	; 0
    247e:	69 f7       	brne	.-38     	; 0x245a <main+0x19e>
    2480:	2b cf       	rjmp	.-426    	; 0x22d8 <main+0x1c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2482:	6f 81       	ldd	r22, Y+7	; 0x07
    2484:	78 85       	ldd	r23, Y+8	; 0x08
    2486:	89 85       	ldd	r24, Y+9	; 0x09
    2488:	9a 85       	ldd	r25, Y+10	; 0x0a
    248a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    248e:	dc 01       	movw	r26, r24
    2490:	cb 01       	movw	r24, r22
    2492:	9e 83       	std	Y+6, r25	; 0x06
    2494:	8d 83       	std	Y+5, r24	; 0x05
    2496:	8d 81       	ldd	r24, Y+5	; 0x05
    2498:	9e 81       	ldd	r25, Y+6	; 0x06
    249a:	9a 83       	std	Y+2, r25	; 0x02
    249c:	89 83       	std	Y+1, r24	; 0x01
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	9a 81       	ldd	r25, Y+2	; 0x02
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	f1 f7       	brne	.-4      	; 0x24a2 <main+0x1e6>
    24a6:	9a 83       	std	Y+2, r25	; 0x02
    24a8:	89 83       	std	Y+1, r24	; 0x01
    24aa:	16 cf       	rjmp	.-468    	; 0x22d8 <main+0x1c>

000024ac <__udivmodsi4>:
    24ac:	a1 e2       	ldi	r26, 0x21	; 33
    24ae:	1a 2e       	mov	r1, r26
    24b0:	aa 1b       	sub	r26, r26
    24b2:	bb 1b       	sub	r27, r27
    24b4:	fd 01       	movw	r30, r26
    24b6:	0d c0       	rjmp	.+26     	; 0x24d2 <__udivmodsi4_ep>

000024b8 <__udivmodsi4_loop>:
    24b8:	aa 1f       	adc	r26, r26
    24ba:	bb 1f       	adc	r27, r27
    24bc:	ee 1f       	adc	r30, r30
    24be:	ff 1f       	adc	r31, r31
    24c0:	a2 17       	cp	r26, r18
    24c2:	b3 07       	cpc	r27, r19
    24c4:	e4 07       	cpc	r30, r20
    24c6:	f5 07       	cpc	r31, r21
    24c8:	20 f0       	brcs	.+8      	; 0x24d2 <__udivmodsi4_ep>
    24ca:	a2 1b       	sub	r26, r18
    24cc:	b3 0b       	sbc	r27, r19
    24ce:	e4 0b       	sbc	r30, r20
    24d0:	f5 0b       	sbc	r31, r21

000024d2 <__udivmodsi4_ep>:
    24d2:	66 1f       	adc	r22, r22
    24d4:	77 1f       	adc	r23, r23
    24d6:	88 1f       	adc	r24, r24
    24d8:	99 1f       	adc	r25, r25
    24da:	1a 94       	dec	r1
    24dc:	69 f7       	brne	.-38     	; 0x24b8 <__udivmodsi4_loop>
    24de:	60 95       	com	r22
    24e0:	70 95       	com	r23
    24e2:	80 95       	com	r24
    24e4:	90 95       	com	r25
    24e6:	9b 01       	movw	r18, r22
    24e8:	ac 01       	movw	r20, r24
    24ea:	bd 01       	movw	r22, r26
    24ec:	cf 01       	movw	r24, r30
    24ee:	08 95       	ret

000024f0 <__prologue_saves__>:
    24f0:	2f 92       	push	r2
    24f2:	3f 92       	push	r3
    24f4:	4f 92       	push	r4
    24f6:	5f 92       	push	r5
    24f8:	6f 92       	push	r6
    24fa:	7f 92       	push	r7
    24fc:	8f 92       	push	r8
    24fe:	9f 92       	push	r9
    2500:	af 92       	push	r10
    2502:	bf 92       	push	r11
    2504:	cf 92       	push	r12
    2506:	df 92       	push	r13
    2508:	ef 92       	push	r14
    250a:	ff 92       	push	r15
    250c:	0f 93       	push	r16
    250e:	1f 93       	push	r17
    2510:	cf 93       	push	r28
    2512:	df 93       	push	r29
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
    2518:	ca 1b       	sub	r28, r26
    251a:	db 0b       	sbc	r29, r27
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	09 94       	ijmp

00002528 <__epilogue_restores__>:
    2528:	2a 88       	ldd	r2, Y+18	; 0x12
    252a:	39 88       	ldd	r3, Y+17	; 0x11
    252c:	48 88       	ldd	r4, Y+16	; 0x10
    252e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2530:	6e 84       	ldd	r6, Y+14	; 0x0e
    2532:	7d 84       	ldd	r7, Y+13	; 0x0d
    2534:	8c 84       	ldd	r8, Y+12	; 0x0c
    2536:	9b 84       	ldd	r9, Y+11	; 0x0b
    2538:	aa 84       	ldd	r10, Y+10	; 0x0a
    253a:	b9 84       	ldd	r11, Y+9	; 0x09
    253c:	c8 84       	ldd	r12, Y+8	; 0x08
    253e:	df 80       	ldd	r13, Y+7	; 0x07
    2540:	ee 80       	ldd	r14, Y+6	; 0x06
    2542:	fd 80       	ldd	r15, Y+5	; 0x05
    2544:	0c 81       	ldd	r16, Y+4	; 0x04
    2546:	1b 81       	ldd	r17, Y+3	; 0x03
    2548:	aa 81       	ldd	r26, Y+2	; 0x02
    254a:	b9 81       	ldd	r27, Y+1	; 0x01
    254c:	ce 0f       	add	r28, r30
    254e:	d1 1d       	adc	r29, r1
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	ed 01       	movw	r28, r26
    255c:	08 95       	ret

0000255e <_exit>:
    255e:	f8 94       	cli

00002560 <__stop_program>:
    2560:	ff cf       	rjmp	.-2      	; 0x2560 <__stop_program>

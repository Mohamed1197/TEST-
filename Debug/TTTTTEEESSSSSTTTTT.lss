
TTTTTEEESSSSSTTTTT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004710  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00004710  000047a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800080  00800080  000047c4  2**0
                  ALLOC
  3 .stab         000053a0  00000000  00000000  000047c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ccb  00000000  00000000  00009b64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000b82f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000b96f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000badf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000d728  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000e613  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000f3c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000f520  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000f7ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ff7b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <__vector_1>
       8:	0c 94 b7 0b 	jmp	0x176e	; 0x176e <__vector_2>
       c:	0c 94 ea 0b 	jmp	0x17d4	; 0x17d4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__vector_6>
      1c:	0c 94 39 09 	jmp	0x1272	; 0x1272 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 96 09 	jmp	0x132c	; 0x132c <__vector_9>
      28:	0c 94 92 08 	jmp	0x1124	; 0x1124 <__vector_10>
      2c:	0c 94 46 08 	jmp	0x108c	; 0x108c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 e2 12 	jmp	0x25c4	; 0x25c4 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e1       	ldi	r30, 0x10	; 16
      68:	f7 e4       	ldi	r31, 0x47	; 71
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3a       	cpi	r26, 0xA2	; 162
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ed 21 	call	0x43da	; 0x43da <main>
      8a:	0c 94 86 23 	jmp	0x470c	; 0x470c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 4f 23 	jmp	0x469e	; 0x469e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6b 23 	jmp	0x46d6	; 0x46d6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5b 23 	jmp	0x46b6	; 0x46b6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 77 23 	jmp	0x46ee	; 0x46ee <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5b 23 	jmp	0x46b6	; 0x46b6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 77 23 	jmp	0x46ee	; 0x46ee <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 4f 23 	jmp	0x469e	; 0x469e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6b 23 	jmp	0x46d6	; 0x46d6 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5b 23 	jmp	0x46b6	; 0x46b6 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 77 23 	jmp	0x46ee	; 0x46ee <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 5b 23 	jmp	0x46b6	; 0x46b6 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 77 23 	jmp	0x46ee	; 0x46ee <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 5b 23 	jmp	0x46b6	; 0x46b6 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 77 23 	jmp	0x46ee	; 0x46ee <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 5f 23 	jmp	0x46be	; 0x46be <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 7b 23 	jmp	0x46f6	; 0x46f6 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <MWDT_voidEnable>:
/*******************************************************************************************************/
/*                                     WDT Enable Function                                             */
/*******************************************************************************************************/

void MWDT_voidEnable(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Select Prescaler => 2.1 Sec */
	WDT_u8_WDTCR_REG =0b00001111;
     b4e:	e1 e4       	ldi	r30, 0x41	; 65
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	8f e0       	ldi	r24, 0x0F	; 15
     b54:	80 83       	st	Z, r24
}
     b56:	cf 91       	pop	r28
     b58:	df 91       	pop	r29
     b5a:	08 95       	ret

00000b5c <MWDT_voidDisable>:

/*******************************************************************************************************/
/*                                    WDT Disable Function                                             */
/*******************************************************************************************************/
void MWDT_voidDisable(void)
{
     b5c:	df 93       	push	r29
     b5e:	cf 93       	push	r28
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
	/* Turn OFF Enable */
	WDT_u8_WDTCR_REG |= (1<<4)|(1<<3);
     b64:	a1 e4       	ldi	r26, 0x41	; 65
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e1 e4       	ldi	r30, 0x41	; 65
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	88 61       	ori	r24, 0x18	; 24
     b70:	8c 93       	st	X, r24
	
	WDT_u8_WDTCR_REG = 0x00;
     b72:	e1 e4       	ldi	r30, 0x41	; 65
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	10 82       	st	Z, r1
}
     b78:	cf 91       	pop	r28
     b7a:	df 91       	pop	r29
     b7c:	08 95       	ret

00000b7e <MTMR_voidTimer0Init>:

/*******************************************************************************************************/
/*                                TIMER 0 Initialization Function                                      */
/*******************************************************************************************************/
void MTMR_voidTimer0Init(void)
{
     b7e:	df 93       	push	r29
     b80:	cf 93       	push	r28
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
	   }
      #endif
	}
#elif (TIMER0_MODE == FAST_PWM)
	{
		SET_BIT(TMR_u8_TCCR0_REG,6);
     b86:	a3 e5       	ldi	r26, 0x53	; 83
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e3 e5       	ldi	r30, 0x53	; 83
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	80 64       	ori	r24, 0x40	; 64
     b92:	8c 93       	st	X, r24
		SET_BIT(TMR_u8_TCCR0_REG,3);
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	88 60       	ori	r24, 0x08	; 8
     ba0:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR0_REG,5);
	SET_BIT(TMR_u8_TCCR0_REG,4);
}
#elif ((TMR0_COMPARE_OUTPUT_MODE == CLEAR_OC0_ON_COMPARE) || (TMR0_COMPARE_OUTPUT_MODE == NON_INVERTING_PWM))
{
	SET_BIT(TMR_u8_TCCR0_REG,5);
     ba2:	a3 e5       	ldi	r26, 0x53	; 83
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e3 e5       	ldi	r30, 0x53	; 83
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	80 62       	ori	r24, 0x20	; 32
     bae:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR0_REG,4);
     bb0:	a3 e5       	ldi	r26, 0x53	; 83
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e3 e5       	ldi	r30, 0x53	; 83
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8f 7e       	andi	r24, 0xEF	; 239
     bbc:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR0_REG,1);
		 SET_BIT(TMR_u8_TCCR0_REG,0);
	}
#elif (TMR0_PRESCALER_VALUE == CLOCK_8)
	{
		 CLR_BIT(TMR_u8_TCCR0_REG,2);
     bbe:	a3 e5       	ldi	r26, 0x53	; 83
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e3 e5       	ldi	r30, 0x53	; 83
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8b 7f       	andi	r24, 0xFB	; 251
     bca:	8c 93       	st	X, r24
		 SET_BIT(TMR_u8_TCCR0_REG,1);
     bcc:	a3 e5       	ldi	r26, 0x53	; 83
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e3 e5       	ldi	r30, 0x53	; 83
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	82 60       	ori	r24, 0x02	; 2
     bd8:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR0_REG,0);
     bda:	a3 e5       	ldi	r26, 0x53	; 83
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e3 e5       	ldi	r30, 0x53	; 83
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	8e 7f       	andi	r24, 0xFE	; 254
     be6:	8c 93       	st	X, r24
		 SET_BIT(TMR_u8_TCCR0_REG,1);
		 SET_BIT(TMR_u8_TCCR0_REG,0);
	}
#endif

}
     be8:	cf 91       	pop	r28
     bea:	df 91       	pop	r29
     bec:	08 95       	ret

00000bee <MTMR_voidTimer1Init>:
/*******************************************************************************************************/
/*                                TIMER 1 Initialization Function                                      */
/*******************************************************************************************************/

void MTMR_voidTimer1Init(void)
{
     bee:	df 93       	push	r29
     bf0:	cf 93       	push	r28
     bf2:	cd b7       	in	r28, 0x3d	; 61
     bf4:	de b7       	in	r29, 0x3e	; 62
	   	 CLR_BIT(TMR_u8_TCCR1B_REG,4);
		 CLR_BIT(TMR_u8_TCCR1B_REG,3);
	}
#elif(TIMER1_MODE == CTC_OCR1A)
	{
		 CLR_BIT(TMR_u8_TCCR1A_REG,1);
     bf6:	af e4       	ldi	r26, 0x4F	; 79
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	ef e4       	ldi	r30, 0x4F	; 79
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	8d 7f       	andi	r24, 0xFD	; 253
     c02:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR1A_REG,0);
     c04:	af e4       	ldi	r26, 0x4F	; 79
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	ef e4       	ldi	r30, 0x4F	; 79
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	8e 7f       	andi	r24, 0xFE	; 254
     c10:	8c 93       	st	X, r24
	   	 CLR_BIT(TMR_u8_TCCR1B_REG,4);
     c12:	ae e4       	ldi	r26, 0x4E	; 78
     c14:	b0 e0       	ldi	r27, 0x00	; 0
     c16:	ee e4       	ldi	r30, 0x4E	; 78
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	80 81       	ld	r24, Z
     c1c:	8f 7e       	andi	r24, 0xEF	; 239
     c1e:	8c 93       	st	X, r24
	   	 SET_BIT(TMR_u8_TCCR1B_REG,3);
     c20:	ae e4       	ldi	r26, 0x4E	; 78
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	ee e4       	ldi	r30, 0x4E	; 78
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	80 81       	ld	r24, Z
     c2a:	88 60       	ori	r24, 0x08	; 8
     c2c:	8c 93       	st	X, r24
         #if (TIMER1_PIE == ENABLE_TIMER1_PIE)
         {
	         SET_BIT(TMR_u8_TIMSK_REG,4);
     c2e:	a9 e5       	ldi	r26, 0x59	; 89
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e9 e5       	ldi	r30, 0x59	; 89
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	80 61       	ori	r24, 0x10	; 16
     c3a:	8c 93       	st	X, r24

	 /* Timer1 Compare Output Mode IF Selection */
	  /*   Channel A     */
#if (TMR1_CHANNELA_COMPARE_OUTPUT_MODE == OC0_DISCONNECTED)
{
	CLR_BIT(TMR_u8_TCCR1A_REG,7);
     c3c:	af e4       	ldi	r26, 0x4F	; 79
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	ef e4       	ldi	r30, 0x4F	; 79
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	8f 77       	andi	r24, 0x7F	; 127
     c48:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR1A_REG,6);
     c4a:	af e4       	ldi	r26, 0x4F	; 79
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	ef e4       	ldi	r30, 0x4F	; 79
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	8f 7b       	andi	r24, 0xBF	; 191
     c56:	8c 93       	st	X, r24
#endif

      /*   Channel B     */
#if (TMR1_CHANNELB_COMPARE_OUTPUT_MODE == OC0_DISCONNECTED)
{
CLR_BIT(TMR_u8_TCCR1A_REG,5);
     c58:	af e4       	ldi	r26, 0x4F	; 79
     c5a:	b0 e0       	ldi	r27, 0x00	; 0
     c5c:	ef e4       	ldi	r30, 0x4F	; 79
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 81       	ld	r24, Z
     c62:	8f 7d       	andi	r24, 0xDF	; 223
     c64:	8c 93       	st	X, r24
CLR_BIT(TMR_u8_TCCR1A_REG,4);
     c66:	af e4       	ldi	r26, 0x4F	; 79
     c68:	b0 e0       	ldi	r27, 0x00	; 0
     c6a:	ef e4       	ldi	r30, 0x4F	; 79
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	8f 7e       	andi	r24, 0xEF	; 239
     c72:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR1B_REG,1);
		 SET_BIT(TMR_u8_TCCR1B_REG,0);
	}
#elif (TMR1_PRESCALER_VALUE == CLOCK_8)
	{
		 CLR_BIT(TMR_u8_TCCR1B_REG,2);
     c74:	ae e4       	ldi	r26, 0x4E	; 78
     c76:	b0 e0       	ldi	r27, 0x00	; 0
     c78:	ee e4       	ldi	r30, 0x4E	; 78
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	80 81       	ld	r24, Z
     c7e:	8b 7f       	andi	r24, 0xFB	; 251
     c80:	8c 93       	st	X, r24
		 SET_BIT(TMR_u8_TCCR1B_REG,1);
     c82:	ae e4       	ldi	r26, 0x4E	; 78
     c84:	b0 e0       	ldi	r27, 0x00	; 0
     c86:	ee e4       	ldi	r30, 0x4E	; 78
     c88:	f0 e0       	ldi	r31, 0x00	; 0
     c8a:	80 81       	ld	r24, Z
     c8c:	82 60       	ori	r24, 0x02	; 2
     c8e:	8c 93       	st	X, r24
		 CLR_BIT(TMR_u8_TCCR1B_REG,0);
     c90:	ae e4       	ldi	r26, 0x4E	; 78
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	ee e4       	ldi	r30, 0x4E	; 78
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	8e 7f       	andi	r24, 0xFE	; 254
     c9c:	8c 93       	st	X, r24
		 SET_BIT(TMR_u8_TCCR1B_REG,1);
		 SET_BIT(TMR_u8_TCCR1B_REG,0);
	}
#endif

}
     c9e:	cf 91       	pop	r28
     ca0:	df 91       	pop	r29
     ca2:	08 95       	ret

00000ca4 <MTMR_voidTimer0SetCompareMatchValue>:
/*******************************************************************************************************/
/*                          TIMER 0 Set Compare Match value Function                                   */
/*******************************************************************************************************/

void MTMR_voidTimer0SetCompareMatchValue(u8 Copy_u8OCRValue)
{
     ca4:	df 93       	push	r29
     ca6:	cf 93       	push	r28
     ca8:	0f 92       	push	r0
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	89 83       	std	Y+1, r24	; 0x01
	TMR_u8_OCR0_REG = Copy_u8OCRValue;
     cb0:	ec e5       	ldi	r30, 0x5C	; 92
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	80 83       	st	Z, r24
}
     cb8:	0f 90       	pop	r0
     cba:	cf 91       	pop	r28
     cbc:	df 91       	pop	r29
     cbe:	08 95       	ret

00000cc0 <MTMR_u8Timer0OVFSetCallBack>:
/*******************************************************************************************************/
/*                           TIMER 0 Over Flow Set CallBack Function                                   */
/*******************************************************************************************************/

u8  MTMR_u8Timer0OVFSetCallBack(void(*Copy_pf)(void))
{
     cc0:	df 93       	push	r29
     cc2:	cf 93       	push	r28
     cc4:	00 d0       	rcall	.+0      	; 0xcc6 <MTMR_u8Timer0OVFSetCallBack+0x6>
     cc6:	0f 92       	push	r0
     cc8:	cd b7       	in	r28, 0x3d	; 61
     cca:	de b7       	in	r29, 0x3e	; 62
     ccc:	9b 83       	std	Y+3, r25	; 0x03
     cce:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_ErrorState = STD_TYPES_OK;
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     cd4:	8a 81       	ldd	r24, Y+2	; 0x02
     cd6:	9b 81       	ldd	r25, Y+3	; 0x03
     cd8:	00 97       	sbiw	r24, 0x00	; 0
     cda:	39 f0       	breq	.+14     	; 0xcea <MTMR_u8Timer0OVFSetCallBack+0x2a>
	{
		TMR_pfTimer0OVF = Copy_pf;
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	9b 81       	ldd	r25, Y+3	; 0x03
     ce0:	90 93 81 00 	sts	0x0081, r25
     ce4:	80 93 80 00 	sts	0x0080, r24
     ce8:	01 c0       	rjmp	.+2      	; 0xcec <MTMR_u8Timer0OVFSetCallBack+0x2c>
	}
	else
	{
		Local_u8_ErrorState =STD_TYPES_NOK;
     cea:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_ErrorState;
     cec:	89 81       	ldd	r24, Y+1	; 0x01
}
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	cf 91       	pop	r28
     cf6:	df 91       	pop	r29
     cf8:	08 95       	ret

00000cfa <MTMR_u8Timer0CTCSetCallBack>:
/*******************************************************************************************************/
/*                              TIMER 0 CTC Set CallBack Function                                      */
/*******************************************************************************************************/

u8  MTMR_u8Timer0CTCSetCallBack(void(*Copy_pf)(void))
{
     cfa:	df 93       	push	r29
     cfc:	cf 93       	push	r28
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <MTMR_u8Timer0CTCSetCallBack+0x6>
     d00:	0f 92       	push	r0
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	9b 83       	std	Y+3, r25	; 0x03
     d08:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_ErrorState = STD_TYPES_OK;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     d0e:	8a 81       	ldd	r24, Y+2	; 0x02
     d10:	9b 81       	ldd	r25, Y+3	; 0x03
     d12:	00 97       	sbiw	r24, 0x00	; 0
     d14:	39 f0       	breq	.+14     	; 0xd24 <MTMR_u8Timer0CTCSetCallBack+0x2a>
	{
		TMR_pfTimer0CTC = Copy_pf;
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	9b 81       	ldd	r25, Y+3	; 0x03
     d1a:	90 93 83 00 	sts	0x0083, r25
     d1e:	80 93 82 00 	sts	0x0082, r24
     d22:	01 c0       	rjmp	.+2      	; 0xd26 <MTMR_u8Timer0CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8_ErrorState =STD_TYPES_NOK;
     d24:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_ErrorState;
     d26:	89 81       	ldd	r24, Y+1	; 0x01
}
     d28:	0f 90       	pop	r0
     d2a:	0f 90       	pop	r0
     d2c:	0f 90       	pop	r0
     d2e:	cf 91       	pop	r28
     d30:	df 91       	pop	r29
     d32:	08 95       	ret

00000d34 <MTMR_u8Timer0GetCounterValue>:
/*******************************************************************************************************/
/*                                TIMER 0 Get Counter Value Function                                   */
/*******************************************************************************************************/

u8   MTMR_u8Timer0GetCounterValue(u16 * Copy_pu16CounterValue)
{
     d34:	df 93       	push	r29
     d36:	cf 93       	push	r28
     d38:	00 d0       	rcall	.+0      	; 0xd3a <MTMR_u8Timer0GetCounterValue+0x6>
     d3a:	0f 92       	push	r0
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	9b 83       	std	Y+3, r25	; 0x03
     d42:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
     d44:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu16CounterValue != NULL)
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	9b 81       	ldd	r25, Y+3	; 0x03
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	59 f0       	breq	.+22     	; 0xd64 <MTMR_u8Timer0GetCounterValue+0x30>
	{
		*Copy_pu16CounterValue = TMR_u8_TCNT0_REG;
     d4e:	e2 e5       	ldi	r30, 0x52	; 82
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	88 2f       	mov	r24, r24
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	ea 81       	ldd	r30, Y+2	; 0x02
     d5a:	fb 81       	ldd	r31, Y+3	; 0x03
     d5c:	91 83       	std	Z+1, r25	; 0x01
     d5e:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
     d60:	81 e0       	ldi	r24, 0x01	; 1
     d62:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     d64:	89 81       	ldd	r24, Y+1	; 0x01
}
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	cf 91       	pop	r28
     d6e:	df 91       	pop	r29
     d70:	08 95       	ret

00000d72 <MTMR_u8Timer0GeneratePWM>:
/*******************************************************************************************************/
/*                                TIMER 0 Generate PWM Function                                   */
/*******************************************************************************************************/

u8   MTMR_u8Timer0GeneratePWM(u8  Copy_u8DutyCycle)
{
     d72:	df 93       	push	r29
     d74:	cf 93       	push	r28
     d76:	00 d0       	rcall	.+0      	; 0xd78 <MTMR_u8Timer0GeneratePWM+0x6>
     d78:	0f 92       	push	r0
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8DutyCycle = 0 ;
     d84:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8DutyCycle <= 100)
     d86:	8b 81       	ldd	r24, Y+3	; 0x03
     d88:	85 36       	cpi	r24, 0x65	; 101
     d8a:	c0 f4       	brcc	.+48     	; 0xdbc <MTMR_u8Timer0GeneratePWM+0x4a>
	{
		Local_u8DutyCycle = (u8)((Copy_u8DutyCycle*256UL)/100) ;
     d8c:	8b 81       	ldd	r24, Y+3	; 0x03
     d8e:	88 2f       	mov	r24, r24
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	a0 e0       	ldi	r26, 0x00	; 0
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	ba 2f       	mov	r27, r26
     d98:	a9 2f       	mov	r26, r25
     d9a:	98 2f       	mov	r25, r24
     d9c:	88 27       	eor	r24, r24
     d9e:	24 e6       	ldi	r18, 0x64	; 100
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	40 e0       	ldi	r20, 0x00	; 0
     da4:	50 e0       	ldi	r21, 0x00	; 0
     da6:	bc 01       	movw	r22, r24
     da8:	cd 01       	movw	r24, r26
     daa:	0e 94 2d 23 	call	0x465a	; 0x465a <__udivmodsi4>
     dae:	da 01       	movw	r26, r20
     db0:	c9 01       	movw	r24, r18
     db2:	89 83       	std	Y+1, r24	; 0x01
		MTMR_voidTimer0SetCompareMatchValue(Local_u8DutyCycle);
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	0e 94 52 06 	call	0xca4	; 0xca4 <MTMR_voidTimer0SetCompareMatchValue>
     dba:	01 c0       	rjmp	.+2      	; 0xdbe <MTMR_u8Timer0GeneratePWM+0x4c>

	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     dbc:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02

}
     dc0:	0f 90       	pop	r0
     dc2:	0f 90       	pop	r0
     dc4:	0f 90       	pop	r0
     dc6:	cf 91       	pop	r28
     dc8:	df 91       	pop	r29
     dca:	08 95       	ret

00000dcc <MTMR_u8Timer1GetCounterValue>:
/*******************************************************************************************************/
/*                                TIMER 1 Get Counter Value Function                                   */
/*******************************************************************************************************/

u8   MTMR_u8Timer1GetCounterValue(u16 * Copy_pu16CounterValue)
{
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <MTMR_u8Timer1GetCounterValue+0x6>
     dd2:	0f 92       	push	r0
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	9b 83       	std	Y+3, r25	; 0x03
     dda:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
     ddc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu16CounterValue != NULL)
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	9b 81       	ldd	r25, Y+3	; 0x03
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	51 f0       	breq	.+20     	; 0xdfa <MTMR_u8Timer1GetCounterValue+0x2e>
	{
		*Copy_pu16CounterValue = TMR_u16_TCNT1_REG;
     de6:	ec e4       	ldi	r30, 0x4C	; 76
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	91 81       	ldd	r25, Z+1	; 0x01
     dee:	ea 81       	ldd	r30, Y+2	; 0x02
     df0:	fb 81       	ldd	r31, Y+3	; 0x03
     df2:	91 83       	std	Z+1, r25	; 0x01
     df4:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
}
     dfc:	0f 90       	pop	r0
     dfe:	0f 90       	pop	r0
     e00:	0f 90       	pop	r0
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <MTMR_voidTimer1SetCompareMatchValueChannelA>:
/*******************************************************************************************************/
/*                 TIMER 1 Set Compare Match Value of ChannelA Function                                */
/*******************************************************************************************************/

void MTMR_voidTimer1SetCompareMatchValueChannelA(u16 Copy_u16CompareMatchValue)
{
     e08:	df 93       	push	r29
     e0a:	cf 93       	push	r28
     e0c:	00 d0       	rcall	.+0      	; 0xe0e <MTMR_voidTimer1SetCompareMatchValueChannelA+0x6>
     e0e:	cd b7       	in	r28, 0x3d	; 61
     e10:	de b7       	in	r29, 0x3e	; 62
     e12:	9a 83       	std	Y+2, r25	; 0x02
     e14:	89 83       	std	Y+1, r24	; 0x01
	TMR_u16_OCR1A_REG = Copy_u16CompareMatchValue;
     e16:	ea e4       	ldi	r30, 0x4A	; 74
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	89 81       	ldd	r24, Y+1	; 0x01
     e1c:	9a 81       	ldd	r25, Y+2	; 0x02
     e1e:	91 83       	std	Z+1, r25	; 0x01
     e20:	80 83       	st	Z, r24
}
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	08 95       	ret

00000e2c <MTMR_voidTimer1CTCCounter>:
/*******************************************************************************************************/
/*                          TIMER 1 Set CTC Counter value Function                                     */
/*******************************************************************************************************/

void MTMR_voidTimer1CTCCounter(u16 Copy_u16CTCCounter)
{
     e2c:	df 93       	push	r29
     e2e:	cf 93       	push	r28
     e30:	00 d0       	rcall	.+0      	; 0xe32 <MTMR_voidTimer1CTCCounter+0x6>
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	89 83       	std	Y+1, r24	; 0x01
	TMR1_ISR_CTC_Counter = Copy_u16CTCCounter;
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
     e3e:	90 93 89 00 	sts	0x0089, r25
     e42:	80 93 88 00 	sts	0x0088, r24
}
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <MTMR_u8Timer1GeneratePWM>:
/*******************************************************************************************************/
/*                                TIMER 1 Generate PWM Function                                   */
/*******************************************************************************************************/

u8   MTMR_u8Timer1GeneratePWM(u8  Copy_u8DutyCycle)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	00 d0       	rcall	.+0      	; 0xe56 <MTMR_u8Timer1GeneratePWM+0x6>
     e56:	0f 92       	push	r0
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u16OCR1A = 0 ;
     e62:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8DutyCycle <= 100)
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	85 36       	cpi	r24, 0x65	; 101
     e68:	00 f5       	brcc	.+64     	; 0xeaa <MTMR_u8Timer1GeneratePWM+0x5a>
	{
		Local_u16OCR1A = (u16)((Copy_u8DutyCycle*65535UL)/100) ;
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	88 2f       	mov	r24, r24
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	a0 e0       	ldi	r26, 0x00	; 0
     e72:	b0 e0       	ldi	r27, 0x00	; 0
     e74:	2f ef       	ldi	r18, 0xFF	; 255
     e76:	3f ef       	ldi	r19, 0xFF	; 255
     e78:	40 e0       	ldi	r20, 0x00	; 0
     e7a:	50 e0       	ldi	r21, 0x00	; 0
     e7c:	bc 01       	movw	r22, r24
     e7e:	cd 01       	movw	r24, r26
     e80:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <__mulsi3>
     e84:	dc 01       	movw	r26, r24
     e86:	cb 01       	movw	r24, r22
     e88:	24 e6       	ldi	r18, 0x64	; 100
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 e0       	ldi	r20, 0x00	; 0
     e8e:	50 e0       	ldi	r21, 0x00	; 0
     e90:	bc 01       	movw	r22, r24
     e92:	cd 01       	movw	r24, r26
     e94:	0e 94 2d 23 	call	0x465a	; 0x465a <__udivmodsi4>
     e98:	da 01       	movw	r26, r20
     e9a:	c9 01       	movw	r24, r18
     e9c:	89 83       	std	Y+1, r24	; 0x01
		MTMR_voidTimer1SetCompareMatchValueChannelA(Local_u16OCR1A);
     e9e:	89 81       	ldd	r24, Y+1	; 0x01
     ea0:	88 2f       	mov	r24, r24
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 04 07 	call	0xe08	; 0xe08 <MTMR_voidTimer1SetCompareMatchValueChannelA>
     ea8:	01 c0       	rjmp	.+2      	; 0xeac <MTMR_u8Timer1GeneratePWM+0x5c>

	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
     eaa:	1a 82       	std	Y+2, r1	; 0x02
	}
	return Local_u8ErrorState;
     eac:	8a 81       	ldd	r24, Y+2	; 0x02

}
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <MTMR_u8Timer1OVFSetCallBack>:
/*******************************************************************************************************/
/*                              TIMER 1 OVF Set CallBack Function                                      */
/*******************************************************************************************************/

u8   MTMR_u8Timer1OVFSetCallBack(void (*Copy_pf)(void))
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <MTMR_u8Timer1OVFSetCallBack+0x6>
     ec0:	0f 92       	push	r0
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	9b 83       	std	Y+3, r25	; 0x03
     ec8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_ErrorState = STD_TYPES_OK;
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	9b 81       	ldd	r25, Y+3	; 0x03
     ed2:	00 97       	sbiw	r24, 0x00	; 0
     ed4:	39 f0       	breq	.+14     	; 0xee4 <MTMR_u8Timer1OVFSetCallBack+0x2a>
	{
		TMR_pfTimer1OVF = Copy_pf;
     ed6:	8a 81       	ldd	r24, Y+2	; 0x02
     ed8:	9b 81       	ldd	r25, Y+3	; 0x03
     eda:	90 93 85 00 	sts	0x0085, r25
     ede:	80 93 84 00 	sts	0x0084, r24
     ee2:	01 c0       	rjmp	.+2      	; 0xee6 <MTMR_u8Timer1OVFSetCallBack+0x2c>
	}
	else
	{
		Local_u8_ErrorState =STD_TYPES_NOK;
     ee4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_ErrorState;
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <MTMR_u8Timer1CTCSetCallBack>:
/*******************************************************************************************************/
/*                              TIMER 1 CTC Set CallBack Function                                      */
/*******************************************************************************************************/

u8  MTMR_u8Timer1CTCSetCallBack(void (*Copy_pf)(void))
{
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	00 d0       	rcall	.+0      	; 0xefa <MTMR_u8Timer1CTCSetCallBack+0x6>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	9b 83       	std	Y+3, r25	; 0x03
     f02:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8_ErrorState = STD_TYPES_OK;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pf != NULL)
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	9b 81       	ldd	r25, Y+3	; 0x03
     f0c:	00 97       	sbiw	r24, 0x00	; 0
     f0e:	39 f0       	breq	.+14     	; 0xf1e <MTMR_u8Timer1CTCSetCallBack+0x2a>
	{
		TMR_pfTimer1CTC = Copy_pf;
     f10:	8a 81       	ldd	r24, Y+2	; 0x02
     f12:	9b 81       	ldd	r25, Y+3	; 0x03
     f14:	90 93 87 00 	sts	0x0087, r25
     f18:	80 93 86 00 	sts	0x0086, r24
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <MTMR_u8Timer1CTCSetCallBack+0x2c>
	}
	else
	{
		Local_u8_ErrorState =STD_TYPES_NOK;
     f1e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8_ErrorState;
     f20:	89 81       	ldd	r24, Y+1	; 0x01
}
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	cf 91       	pop	r28
     f2a:	df 91       	pop	r29
     f2c:	08 95       	ret

00000f2e <MTMR_voidHWICUEnable>:
/*******************************************************************************************************/
/*                           TIMER 1 HardWare ICU Enable Function                                      */
/*******************************************************************************************************/

void MTMR_voidHWICUEnable(void)
{
     f2e:	df 93       	push	r29
     f30:	cf 93       	push	r28
     f32:	cd b7       	in	r28, 0x3d	; 61
     f34:	de b7       	in	r29, 0x3e	; 62
	/* Select Triggering Interrupt source of ICU = Rising Edge */
	SET_BIT(TMR_u8_TCCR1B_REG,6);
     f36:	ae e4       	ldi	r26, 0x4E	; 78
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	ee e4       	ldi	r30, 0x4E	; 78
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	80 64       	ori	r24, 0x40	; 64
     f42:	8c 93       	st	X, r24

	/* Enable ICU Interrupt */
	SET_BIT(TMR_u8_TIMSK_REG,5);
     f44:	a9 e5       	ldi	r26, 0x59	; 89
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e9 e5       	ldi	r30, 0x59	; 89
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	80 62       	ori	r24, 0x20	; 32
     f50:	8c 93       	st	X, r24
}
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <MTMR_voidHWICUDisable>:
/*******************************************************************************************************/
/*                          TIMER 1 HardWare ICU Disable Function                                      */
/*******************************************************************************************************/

void MTMR_voidHWICUDisable(void)
{
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
	/* Disable ICU Interrupt */
	SET_BIT(TMR_u8_TIMSK_REG,5);
     f60:	a9 e5       	ldi	r26, 0x59	; 89
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e9 e5       	ldi	r30, 0x59	; 89
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	80 62       	ori	r24, 0x20	; 32
     f6c:	8c 93       	st	X, r24

}
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <MTMR_u8GetPWMTotalPeriod>:
/*******************************************************************************************************/
/*                          TIMER 1 Get PWM Total Period Function                                      */
/*******************************************************************************************************/

u8   MTMR_u8GetPWMTotalPeriod(u32 * Copy_pu32TotalPeriod)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	00 d0       	rcall	.+0      	; 0xf7a <MTMR_u8GetPWMTotalPeriod+0x6>
     f7a:	0f 92       	push	r0
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
     f80:	9b 83       	std	Y+3, r25	; 0x03
     f82:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
     f84:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu32TotalPeriod != NULL)
     f86:	8a 81       	ldd	r24, Y+2	; 0x02
     f88:	9b 81       	ldd	r25, Y+3	; 0x03
     f8a:	00 97       	sbiw	r24, 0x00	; 0
     f8c:	a9 f0       	breq	.+42     	; 0xfb8 <MTMR_u8GetPWMTotalPeriod+0x44>
	{
		*Copy_pu32TotalPeriod = TMR_u16OnPeriod + TMR_u16OffPeriod;
     f8e:	20 91 95 00 	lds	r18, 0x0095
     f92:	30 91 96 00 	lds	r19, 0x0096
     f96:	80 91 97 00 	lds	r24, 0x0097
     f9a:	90 91 98 00 	lds	r25, 0x0098
     f9e:	82 0f       	add	r24, r18
     fa0:	93 1f       	adc	r25, r19
     fa2:	cc 01       	movw	r24, r24
     fa4:	a0 e0       	ldi	r26, 0x00	; 0
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	ea 81       	ldd	r30, Y+2	; 0x02
     faa:	fb 81       	ldd	r31, Y+3	; 0x03
     fac:	80 83       	st	Z, r24
     fae:	91 83       	std	Z+1, r25	; 0x01
     fb0:	a2 83       	std	Z+2, r26	; 0x02
     fb2:	b3 83       	std	Z+3, r27	; 0x03
		Local_u8ErrorState = STD_TYPES_OK;
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
}
     fba:	0f 90       	pop	r0
     fbc:	0f 90       	pop	r0
     fbe:	0f 90       	pop	r0
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <MTMR_u8GetPWMDutyCycle>:
/*******************************************************************************************************/
/*                          TIMER 1 Get PWM Duty Cycle Function                                        */
/*******************************************************************************************************/

u8   MTMR_u8GetPWMDutyCycle(u8 * Copy_pu8DutyCycle)
{
     fc6:	ef 92       	push	r14
     fc8:	ff 92       	push	r15
     fca:	0f 93       	push	r16
     fcc:	1f 93       	push	r17
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <MTMR_u8GetPWMDutyCycle+0xe>
     fd4:	0f 92       	push	r0
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	9b 83       	std	Y+3, r25	; 0x03
     fdc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
     fde:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8DutyCycle != NULL)
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	9b 81       	ldd	r25, Y+3	; 0x03
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	49 f1       	breq	.+82     	; 0x103a <MTMR_u8GetPWMDutyCycle+0x74>
	{
		*Copy_pu8DutyCycle =(u8)((TMR_u16OnPeriod * 100UL)/(TMR_u16OnPeriod + TMR_u16OffPeriod));
     fe8:	80 91 95 00 	lds	r24, 0x0095
     fec:	90 91 96 00 	lds	r25, 0x0096
     ff0:	cc 01       	movw	r24, r24
     ff2:	a0 e0       	ldi	r26, 0x00	; 0
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	24 e6       	ldi	r18, 0x64	; 100
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	40 e0       	ldi	r20, 0x00	; 0
     ffc:	50 e0       	ldi	r21, 0x00	; 0
     ffe:	bc 01       	movw	r22, r24
    1000:	cd 01       	movw	r24, r26
    1002:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <__mulsi3>
    1006:	7b 01       	movw	r14, r22
    1008:	8c 01       	movw	r16, r24
    100a:	20 91 95 00 	lds	r18, 0x0095
    100e:	30 91 96 00 	lds	r19, 0x0096
    1012:	80 91 97 00 	lds	r24, 0x0097
    1016:	90 91 98 00 	lds	r25, 0x0098
    101a:	82 0f       	add	r24, r18
    101c:	93 1f       	adc	r25, r19
    101e:	9c 01       	movw	r18, r24
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	c8 01       	movw	r24, r16
    1026:	b7 01       	movw	r22, r14
    1028:	0e 94 2d 23 	call	0x465a	; 0x465a <__udivmodsi4>
    102c:	da 01       	movw	r26, r20
    102e:	c9 01       	movw	r24, r18
    1030:	ea 81       	ldd	r30, Y+2	; 0x02
    1032:	fb 81       	ldd	r31, Y+3	; 0x03
    1034:	80 83       	st	Z, r24

		Local_u8ErrorState = STD_TYPES_OK;
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    103a:	89 81       	ldd	r24, Y+1	; 0x01
}
    103c:	0f 90       	pop	r0
    103e:	0f 90       	pop	r0
    1040:	0f 90       	pop	r0
    1042:	cf 91       	pop	r28
    1044:	df 91       	pop	r29
    1046:	1f 91       	pop	r17
    1048:	0f 91       	pop	r16
    104a:	ff 90       	pop	r15
    104c:	ef 90       	pop	r14
    104e:	08 95       	ret

00001050 <MTMR_u8GetPWMOnPeriod>:

/*******************************************************************************************************/
/*                           TIMER 1 Get PWM ON Period Function                                        */
/*******************************************************************************************************/
u8   MTMR_u8GetPWMOnPeriod(u16 * Copy_pu16OnPeriod)
{
    1050:	df 93       	push	r29
    1052:	cf 93       	push	r28
    1054:	00 d0       	rcall	.+0      	; 0x1056 <MTMR_u8GetPWMOnPeriod+0x6>
    1056:	0f 92       	push	r0
    1058:	cd b7       	in	r28, 0x3d	; 61
    105a:	de b7       	in	r29, 0x3e	; 62
    105c:	9b 83       	std	Y+3, r25	; 0x03
    105e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    1060:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu16OnPeriod != NULL)
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	9b 81       	ldd	r25, Y+3	; 0x03
    1066:	00 97       	sbiw	r24, 0x00	; 0
    1068:	51 f0       	breq	.+20     	; 0x107e <MTMR_u8GetPWMOnPeriod+0x2e>
	{
		*Copy_pu16OnPeriod = TMR_u16OnPeriod;
    106a:	80 91 95 00 	lds	r24, 0x0095
    106e:	90 91 96 00 	lds	r25, 0x0096
    1072:	ea 81       	ldd	r30, Y+2	; 0x02
    1074:	fb 81       	ldd	r31, Y+3	; 0x03
    1076:	91 83       	std	Z+1, r25	; 0x01
    1078:	80 83       	st	Z, r24
		Local_u8ErrorState = STD_TYPES_OK;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ErrorState;
    107e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	cf 91       	pop	r28
    1088:	df 91       	pop	r29
    108a:	08 95       	ret

0000108c <__vector_11>:
/*                                  Prototype of ISR Timer0 OVF                                        */
/*******************************************************************************************************/

void __vector_11(void)     __attribute__((signal));
void __vector_11(void)
{
    108c:	1f 92       	push	r1
    108e:	0f 92       	push	r0
    1090:	0f b6       	in	r0, 0x3f	; 63
    1092:	0f 92       	push	r0
    1094:	11 24       	eor	r1, r1
    1096:	2f 93       	push	r18
    1098:	3f 93       	push	r19
    109a:	4f 93       	push	r20
    109c:	5f 93       	push	r21
    109e:	6f 93       	push	r22
    10a0:	7f 93       	push	r23
    10a2:	8f 93       	push	r24
    10a4:	9f 93       	push	r25
    10a6:	af 93       	push	r26
    10a8:	bf 93       	push	r27
    10aa:	ef 93       	push	r30
    10ac:	ff 93       	push	r31
    10ae:	df 93       	push	r29
    10b0:	cf 93       	push	r28
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0 ;
	Local_u16Counter++;
    10b6:	80 91 8a 00 	lds	r24, 0x008A
    10ba:	90 91 8b 00 	lds	r25, 0x008B
    10be:	01 96       	adiw	r24, 0x01	; 1
    10c0:	90 93 8b 00 	sts	0x008B, r25
    10c4:	80 93 8a 00 	sts	0x008A, r24
	if(Local_u16Counter == 3907)
    10c8:	80 91 8a 00 	lds	r24, 0x008A
    10cc:	90 91 8b 00 	lds	r25, 0x008B
    10d0:	2f e0       	ldi	r18, 0x0F	; 15
    10d2:	83 34       	cpi	r24, 0x43	; 67
    10d4:	92 07       	cpc	r25, r18
    10d6:	99 f4       	brne	.+38     	; 0x10fe <__vector_11+0x72>
	{
		/* Set Preload Value */
		TMR_u8_TCNT0_REG = PRELOAD_VALUE;
    10d8:	e2 e5       	ldi	r30, 0x52	; 82
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 ec       	ldi	r24, 0xC0	; 192
    10de:	80 83       	st	Z, r24
		/* Reset Counter */
		Local_u16Counter = 0;
    10e0:	10 92 8b 00 	sts	0x008B, r1
    10e4:	10 92 8a 00 	sts	0x008A, r1
		/* Call CallBack Function */
		if(TMR_pfTimer0OVF != NULL)
    10e8:	80 91 80 00 	lds	r24, 0x0080
    10ec:	90 91 81 00 	lds	r25, 0x0081
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	29 f0       	breq	.+10     	; 0x10fe <__vector_11+0x72>
		{
			TMR_pfTimer0OVF();
    10f4:	e0 91 80 00 	lds	r30, 0x0080
    10f8:	f0 91 81 00 	lds	r31, 0x0081
    10fc:	09 95       	icall
		}
	}
}
    10fe:	cf 91       	pop	r28
    1100:	df 91       	pop	r29
    1102:	ff 91       	pop	r31
    1104:	ef 91       	pop	r30
    1106:	bf 91       	pop	r27
    1108:	af 91       	pop	r26
    110a:	9f 91       	pop	r25
    110c:	8f 91       	pop	r24
    110e:	7f 91       	pop	r23
    1110:	6f 91       	pop	r22
    1112:	5f 91       	pop	r21
    1114:	4f 91       	pop	r20
    1116:	3f 91       	pop	r19
    1118:	2f 91       	pop	r18
    111a:	0f 90       	pop	r0
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	0f 90       	pop	r0
    1120:	1f 90       	pop	r1
    1122:	18 95       	reti

00001124 <__vector_10>:
/*                          Prototype of ISR Timer0 Compare Match                                      */
/*******************************************************************************************************/

void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
    1124:	1f 92       	push	r1
    1126:	0f 92       	push	r0
    1128:	0f b6       	in	r0, 0x3f	; 63
    112a:	0f 92       	push	r0
    112c:	11 24       	eor	r1, r1
    112e:	2f 93       	push	r18
    1130:	3f 93       	push	r19
    1132:	4f 93       	push	r20
    1134:	5f 93       	push	r21
    1136:	6f 93       	push	r22
    1138:	7f 93       	push	r23
    113a:	8f 93       	push	r24
    113c:	9f 93       	push	r25
    113e:	af 93       	push	r26
    1140:	bf 93       	push	r27
    1142:	ef 93       	push	r30
    1144:	ff 93       	push	r31
    1146:	df 93       	push	r29
    1148:	cf 93       	push	r28
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0 ;
	Local_u16Counter++;
    114e:	80 91 8c 00 	lds	r24, 0x008C
    1152:	90 91 8d 00 	lds	r25, 0x008D
    1156:	01 96       	adiw	r24, 0x01	; 1
    1158:	90 93 8d 00 	sts	0x008D, r25
    115c:	80 93 8c 00 	sts	0x008C, r24
	if(Local_u16Counter == 10000)
    1160:	80 91 8c 00 	lds	r24, 0x008C
    1164:	90 91 8d 00 	lds	r25, 0x008D
    1168:	27 e2       	ldi	r18, 0x27	; 39
    116a:	80 31       	cpi	r24, 0x10	; 16
    116c:	92 07       	cpc	r25, r18
    116e:	79 f4       	brne	.+30     	; 0x118e <__vector_10+0x6a>
	{
		/* Reset Counter */
		Local_u16Counter = 0;
    1170:	10 92 8d 00 	sts	0x008D, r1
    1174:	10 92 8c 00 	sts	0x008C, r1
		/* Call CallBack Function */
		if(TMR_pfTimer0CTC != NULL)
    1178:	80 91 82 00 	lds	r24, 0x0082
    117c:	90 91 83 00 	lds	r25, 0x0083
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	29 f0       	breq	.+10     	; 0x118e <__vector_10+0x6a>
		{
			TMR_pfTimer0CTC();
    1184:	e0 91 82 00 	lds	r30, 0x0082
    1188:	f0 91 83 00 	lds	r31, 0x0083
    118c:	09 95       	icall
		}
	}
}
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	ff 91       	pop	r31
    1194:	ef 91       	pop	r30
    1196:	bf 91       	pop	r27
    1198:	af 91       	pop	r26
    119a:	9f 91       	pop	r25
    119c:	8f 91       	pop	r24
    119e:	7f 91       	pop	r23
    11a0:	6f 91       	pop	r22
    11a2:	5f 91       	pop	r21
    11a4:	4f 91       	pop	r20
    11a6:	3f 91       	pop	r19
    11a8:	2f 91       	pop	r18
    11aa:	0f 90       	pop	r0
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	0f 90       	pop	r0
    11b0:	1f 90       	pop	r1
    11b2:	18 95       	reti

000011b4 <__vector_6>:
/*                            Prototype of ISR Timer1 ICU                                              */
/*******************************************************************************************************/

void __vector_6(void)     __attribute__((signal));
void __vector_6(void)
{
    11b4:	1f 92       	push	r1
    11b6:	0f 92       	push	r0
    11b8:	0f b6       	in	r0, 0x3f	; 63
    11ba:	0f 92       	push	r0
    11bc:	11 24       	eor	r1, r1
    11be:	2f 93       	push	r18
    11c0:	3f 93       	push	r19
    11c2:	8f 93       	push	r24
    11c4:	9f 93       	push	r25
    11c6:	af 93       	push	r26
    11c8:	bf 93       	push	r27
    11ca:	ef 93       	push	r30
    11cc:	ff 93       	push	r31
    11ce:	df 93       	push	r29
    11d0:	cf 93       	push	r28
    11d2:	00 d0       	rcall	.+0      	; 0x11d4 <__vector_6+0x20>
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
	u16 Local_u16TimerValue = TMR_u16_ICR1_REG;
    11d8:	e6 e4       	ldi	r30, 0x46	; 70
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	91 81       	ldd	r25, Z+1	; 0x01
    11e0:	9a 83       	std	Y+2, r25	; 0x02
    11e2:	89 83       	std	Y+1, r24	; 0x01
	static u8 Local_u8Flag = 0;
	static u16 Local_u16OldValue = 0;
	if(Local_u8Flag == 0) /* Rising Edge */
    11e4:	80 91 90 00 	lds	r24, 0x0090
    11e8:	88 23       	and	r24, r24
    11ea:	b9 f4       	brne	.+46     	; 0x121a <__vector_6+0x66>
	{
		TMR_u16OffPeriod = Local_u16TimerValue - Local_u16OldValue;
    11ec:	20 91 8e 00 	lds	r18, 0x008E
    11f0:	30 91 8f 00 	lds	r19, 0x008F
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	9a 81       	ldd	r25, Y+2	; 0x02
    11f8:	82 1b       	sub	r24, r18
    11fa:	93 0b       	sbc	r25, r19
    11fc:	90 93 98 00 	sts	0x0098, r25
    1200:	80 93 97 00 	sts	0x0097, r24
		/* Trigger Source into Falling Edge */
		CLR_BIT(TMR_u8_TCCR1B_REG,6);
    1204:	ae e4       	ldi	r26, 0x4E	; 78
    1206:	b0 e0       	ldi	r27, 0x00	; 0
    1208:	ee e4       	ldi	r30, 0x4E	; 78
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	80 81       	ld	r24, Z
    120e:	8f 7b       	andi	r24, 0xBF	; 191
    1210:	8c 93       	st	X, r24
		Local_u8Flag = 1;
    1212:	81 e0       	ldi	r24, 0x01	; 1
    1214:	80 93 90 00 	sts	0x0090, r24
    1218:	15 c0       	rjmp	.+42     	; 0x1244 <__vector_6+0x90>
	}
	else
	{
		TMR_u16OnPeriod = Local_u16TimerValue - Local_u16OldValue;
    121a:	20 91 8e 00 	lds	r18, 0x008E
    121e:	30 91 8f 00 	lds	r19, 0x008F
    1222:	89 81       	ldd	r24, Y+1	; 0x01
    1224:	9a 81       	ldd	r25, Y+2	; 0x02
    1226:	82 1b       	sub	r24, r18
    1228:	93 0b       	sbc	r25, r19
    122a:	90 93 96 00 	sts	0x0096, r25
    122e:	80 93 95 00 	sts	0x0095, r24
		/* Trigger Source into Rising Edge */
		SET_BIT(TMR_u8_TCCR1B_REG,6);
    1232:	ae e4       	ldi	r26, 0x4E	; 78
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	ee e4       	ldi	r30, 0x4E	; 78
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	80 81       	ld	r24, Z
    123c:	80 64       	ori	r24, 0x40	; 64
    123e:	8c 93       	st	X, r24
		Local_u8Flag = 0;
    1240:	10 92 90 00 	sts	0x0090, r1
	}
	Local_u16OldValue = Local_u16TimerValue;
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	90 93 8f 00 	sts	0x008F, r25
    124c:	80 93 8e 00 	sts	0x008E, r24
}
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	cf 91       	pop	r28
    1256:	df 91       	pop	r29
    1258:	ff 91       	pop	r31
    125a:	ef 91       	pop	r30
    125c:	bf 91       	pop	r27
    125e:	af 91       	pop	r26
    1260:	9f 91       	pop	r25
    1262:	8f 91       	pop	r24
    1264:	3f 91       	pop	r19
    1266:	2f 91       	pop	r18
    1268:	0f 90       	pop	r0
    126a:	0f be       	out	0x3f, r0	; 63
    126c:	0f 90       	pop	r0
    126e:	1f 90       	pop	r1
    1270:	18 95       	reti

00001272 <__vector_7>:
/*                        Prototype of ISR Timer1 Compare Match A                                      */
/*******************************************************************************************************/

void __vector_7(void)       __attribute__((signal));
void __vector_7(void)
{
    1272:	1f 92       	push	r1
    1274:	0f 92       	push	r0
    1276:	0f b6       	in	r0, 0x3f	; 63
    1278:	0f 92       	push	r0
    127a:	11 24       	eor	r1, r1
    127c:	2f 93       	push	r18
    127e:	3f 93       	push	r19
    1280:	4f 93       	push	r20
    1282:	5f 93       	push	r21
    1284:	6f 93       	push	r22
    1286:	7f 93       	push	r23
    1288:	8f 93       	push	r24
    128a:	9f 93       	push	r25
    128c:	af 93       	push	r26
    128e:	bf 93       	push	r27
    1290:	ef 93       	push	r30
    1292:	ff 93       	push	r31
    1294:	df 93       	push	r29
    1296:	cf 93       	push	r28
    1298:	cd b7       	in	r28, 0x3d	; 61
    129a:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0 ;
	Local_u16Counter++;
    129c:	80 91 91 00 	lds	r24, 0x0091
    12a0:	90 91 92 00 	lds	r25, 0x0092
    12a4:	01 96       	adiw	r24, 0x01	; 1
    12a6:	90 93 92 00 	sts	0x0092, r25
    12aa:	80 93 91 00 	sts	0x0091, r24
	if(TMR1_ISR_CTC_Counter != 0)
    12ae:	80 91 88 00 	lds	r24, 0x0088
    12b2:	90 91 89 00 	lds	r25, 0x0089
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	d9 f0       	breq	.+54     	; 0x12f0 <__vector_7+0x7e>
	{
	     if(Local_u16Counter == TMR1_ISR_CTC_Counter)
    12ba:	20 91 91 00 	lds	r18, 0x0091
    12be:	30 91 92 00 	lds	r19, 0x0092
    12c2:	80 91 88 00 	lds	r24, 0x0088
    12c6:	90 91 89 00 	lds	r25, 0x0089
    12ca:	28 17       	cp	r18, r24
    12cc:	39 07       	cpc	r19, r25
    12ce:	d9 f4       	brne	.+54     	; 0x1306 <__vector_7+0x94>
	     {
	     	/* Reset Counter */
	     	Local_u16Counter = 0;
    12d0:	10 92 92 00 	sts	0x0092, r1
    12d4:	10 92 91 00 	sts	0x0091, r1
	     	/* Call CallBack Function */
	     	if(TMR_pfTimer1CTC != NULL)
    12d8:	80 91 86 00 	lds	r24, 0x0086
    12dc:	90 91 87 00 	lds	r25, 0x0087
    12e0:	00 97       	sbiw	r24, 0x00	; 0
    12e2:	89 f0       	breq	.+34     	; 0x1306 <__vector_7+0x94>
	     	{
	     		TMR_pfTimer1CTC();
    12e4:	e0 91 86 00 	lds	r30, 0x0086
    12e8:	f0 91 87 00 	lds	r31, 0x0087
    12ec:	09 95       	icall
    12ee:	0b c0       	rjmp	.+22     	; 0x1306 <__vector_7+0x94>
	     }
	}
	else
	{
     	/* Call CallBack Function */
     	if(TMR_pfTimer1CTC != NULL)
    12f0:	80 91 86 00 	lds	r24, 0x0086
    12f4:	90 91 87 00 	lds	r25, 0x0087
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	29 f0       	breq	.+10     	; 0x1306 <__vector_7+0x94>
     	{
     		TMR_pfTimer1CTC();
    12fc:	e0 91 86 00 	lds	r30, 0x0086
    1300:	f0 91 87 00 	lds	r31, 0x0087
    1304:	09 95       	icall
     	}
	}

}
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	ff 91       	pop	r31
    130c:	ef 91       	pop	r30
    130e:	bf 91       	pop	r27
    1310:	af 91       	pop	r26
    1312:	9f 91       	pop	r25
    1314:	8f 91       	pop	r24
    1316:	7f 91       	pop	r23
    1318:	6f 91       	pop	r22
    131a:	5f 91       	pop	r21
    131c:	4f 91       	pop	r20
    131e:	3f 91       	pop	r19
    1320:	2f 91       	pop	r18
    1322:	0f 90       	pop	r0
    1324:	0f be       	out	0x3f, r0	; 63
    1326:	0f 90       	pop	r0
    1328:	1f 90       	pop	r1
    132a:	18 95       	reti

0000132c <__vector_9>:
/*                                Prototype of ISR Timer1 OVF                                          */
/*******************************************************************************************************/

void __vector_9(void)       __attribute__((signal));
void __vector_9(void)
{
    132c:	1f 92       	push	r1
    132e:	0f 92       	push	r0
    1330:	0f b6       	in	r0, 0x3f	; 63
    1332:	0f 92       	push	r0
    1334:	11 24       	eor	r1, r1
    1336:	2f 93       	push	r18
    1338:	3f 93       	push	r19
    133a:	4f 93       	push	r20
    133c:	5f 93       	push	r21
    133e:	6f 93       	push	r22
    1340:	7f 93       	push	r23
    1342:	8f 93       	push	r24
    1344:	9f 93       	push	r25
    1346:	af 93       	push	r26
    1348:	bf 93       	push	r27
    134a:	ef 93       	push	r30
    134c:	ff 93       	push	r31
    134e:	df 93       	push	r29
    1350:	cf 93       	push	r28
    1352:	cd b7       	in	r28, 0x3d	; 61
    1354:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0 ;
	Local_u16Counter++;
    1356:	80 91 93 00 	lds	r24, 0x0093
    135a:	90 91 94 00 	lds	r25, 0x0094
    135e:	01 96       	adiw	r24, 0x01	; 1
    1360:	90 93 94 00 	sts	0x0094, r25
    1364:	80 93 93 00 	sts	0x0093, r24
	if(Local_u16Counter == 3907)
    1368:	80 91 93 00 	lds	r24, 0x0093
    136c:	90 91 94 00 	lds	r25, 0x0094
    1370:	2f e0       	ldi	r18, 0x0F	; 15
    1372:	83 34       	cpi	r24, 0x43	; 67
    1374:	92 07       	cpc	r25, r18
    1376:	a9 f4       	brne	.+42     	; 0x13a2 <__vector_9+0x76>
	{
		/* Set Preload Value */
		TMR_u16_TCNT1_REG = PRELOAD_VALUE;
    1378:	ec e4       	ldi	r30, 0x4C	; 76
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 ec       	ldi	r24, 0xC0	; 192
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	91 83       	std	Z+1, r25	; 0x01
    1382:	80 83       	st	Z, r24
		/* Reset Counter */
		Local_u16Counter = 0;
    1384:	10 92 94 00 	sts	0x0094, r1
    1388:	10 92 93 00 	sts	0x0093, r1
		/* Call CallBack Function */
		if(TMR_pfTimer1OVF != NULL)
    138c:	80 91 84 00 	lds	r24, 0x0084
    1390:	90 91 85 00 	lds	r25, 0x0085
    1394:	00 97       	sbiw	r24, 0x00	; 0
    1396:	29 f0       	breq	.+10     	; 0x13a2 <__vector_9+0x76>
		{
			TMR_pfTimer1OVF();
    1398:	e0 91 84 00 	lds	r30, 0x0084
    139c:	f0 91 85 00 	lds	r31, 0x0085
    13a0:	09 95       	icall
		}
	}

}
    13a2:	cf 91       	pop	r28
    13a4:	df 91       	pop	r29
    13a6:	ff 91       	pop	r31
    13a8:	ef 91       	pop	r30
    13aa:	bf 91       	pop	r27
    13ac:	af 91       	pop	r26
    13ae:	9f 91       	pop	r25
    13b0:	8f 91       	pop	r24
    13b2:	7f 91       	pop	r23
    13b4:	6f 91       	pop	r22
    13b6:	5f 91       	pop	r21
    13b8:	4f 91       	pop	r20
    13ba:	3f 91       	pop	r19
    13bc:	2f 91       	pop	r18
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	0f 90       	pop	r0
    13c4:	1f 90       	pop	r1
    13c6:	18 95       	reti

000013c8 <GI_voidEnable>:

/*******************************************************************************************************/
/*                              Global Interrupt Enable  Function                                      */
/*******************************************************************************************************/
void GI_voidEnable (void)
{
    13c8:	df 93       	push	r29
    13ca:	cf 93       	push	r28
    13cc:	cd b7       	in	r28, 0x3d	; 61
    13ce:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GI_u8_SREG,7);
    13d0:	af e5       	ldi	r26, 0x5F	; 95
    13d2:	b0 e0       	ldi	r27, 0x00	; 0
    13d4:	ef e5       	ldi	r30, 0x5F	; 95
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	80 68       	ori	r24, 0x80	; 128
    13dc:	8c 93       	st	X, r24
}
    13de:	cf 91       	pop	r28
    13e0:	df 91       	pop	r29
    13e2:	08 95       	ret

000013e4 <GI_voidDisable>:

/*******************************************************************************************************/
/*                             Global Interrupt Disable  Function                                      */
/*******************************************************************************************************/
void GI_voidDisable(void)
{
    13e4:	df 93       	push	r29
    13e6:	cf 93       	push	r28
    13e8:	cd b7       	in	r28, 0x3d	; 61
    13ea:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(GI_u8_SREG,7);
    13ec:	af e5       	ldi	r26, 0x5F	; 95
    13ee:	b0 e0       	ldi	r27, 0x00	; 0
    13f0:	ef e5       	ldi	r30, 0x5F	; 95
    13f2:	f0 e0       	ldi	r31, 0x00	; 0
    13f4:	80 81       	ld	r24, Z
    13f6:	8f 77       	andi	r24, 0x7F	; 127
    13f8:	8c 93       	st	X, r24
}
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <MEXTI_u8SetCallBack>:
/*******************************************************************************************************/
/*                            EXTERNAL INTERRUPT set callBack Function                                 */
/*******************************************************************************************************/

u8 MEXTI_u8SetCallBack(void(*Copy_pf)(void),u8 Copy_u8CallBackIndex)
{
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	00 d0       	rcall	.+0      	; 0x1406 <MEXTI_u8SetCallBack+0x6>
    1406:	00 d0       	rcall	.+0      	; 0x1408 <MEXTI_u8SetCallBack+0x8>
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	9b 83       	std	Y+3, r25	; 0x03
    140e:	8a 83       	std	Y+2, r24	; 0x02
    1410:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8CallBackIndex <= EXTI_u8_INT2) && (Copy_pf != NULL ))
    1416:	8c 81       	ldd	r24, Y+4	; 0x04
    1418:	83 30       	cpi	r24, 0x03	; 3
    141a:	88 f4       	brcc	.+34     	; 0x143e <MEXTI_u8SetCallBack+0x3e>
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	9b 81       	ldd	r25, Y+3	; 0x03
    1420:	00 97       	sbiw	r24, 0x00	; 0
    1422:	69 f0       	breq	.+26     	; 0x143e <MEXTI_u8SetCallBack+0x3e>
	{
		EXTI_ApfEXTI[Copy_u8CallBackIndex] = Copy_pf;
    1424:	8c 81       	ldd	r24, Y+4	; 0x04
    1426:	88 2f       	mov	r24, r24
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	88 0f       	add	r24, r24
    142c:	99 1f       	adc	r25, r25
    142e:	fc 01       	movw	r30, r24
    1430:	e7 56       	subi	r30, 0x67	; 103
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	8a 81       	ldd	r24, Y+2	; 0x02
    1436:	9b 81       	ldd	r25, Y+3	; 0x03
    1438:	91 83       	std	Z+1, r25	; 0x01
    143a:	80 83       	st	Z, r24
    143c:	01 c0       	rjmp	.+2      	; 0x1440 <MEXTI_u8SetCallBack+0x40>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    143e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1440:	89 81       	ldd	r24, Y+1	; 0x01
}
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	cf 91       	pop	r28
    144c:	df 91       	pop	r29
    144e:	08 95       	ret

00001450 <MEXTI_u8Enable>:

/*******************************************************************************************************/
/*                             EXTERNAL INTERRUPT Enable Function                                      */
/*******************************************************************************************************/
u8 MEXTI_u8Enable (u8 Copy_u8_EXTIIndex , u8 Copy_u8EXTIEdge)
{
    1450:	df 93       	push	r29
    1452:	cf 93       	push	r28
    1454:	cd b7       	in	r28, 0x3d	; 61
    1456:	de b7       	in	r29, 0x3e	; 62
    1458:	2b 97       	sbiw	r28, 0x0b	; 11
    145a:	0f b6       	in	r0, 0x3f	; 63
    145c:	f8 94       	cli
    145e:	de bf       	out	0x3e, r29	; 62
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	cd bf       	out	0x3d, r28	; 61
    1464:	8a 83       	std	Y+2, r24	; 0x02
    1466:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1468:	81 e0       	ldi	r24, 0x01	; 1
    146a:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_u8_EXTIIndex)
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	28 2f       	mov	r18, r24
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	3b 87       	std	Y+11, r19	; 0x0b
    1474:	2a 87       	std	Y+10, r18	; 0x0a
    1476:	8a 85       	ldd	r24, Y+10	; 0x0a
    1478:	9b 85       	ldd	r25, Y+11	; 0x0b
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	91 05       	cpc	r25, r1
    147e:	09 f4       	brne	.+2      	; 0x1482 <MEXTI_u8Enable+0x32>
    1480:	6f c0       	rjmp	.+222    	; 0x1560 <MEXTI_u8Enable+0x110>
    1482:	2a 85       	ldd	r18, Y+10	; 0x0a
    1484:	3b 85       	ldd	r19, Y+11	; 0x0b
    1486:	22 30       	cpi	r18, 0x02	; 2
    1488:	31 05       	cpc	r19, r1
    148a:	09 f4       	brne	.+2      	; 0x148e <MEXTI_u8Enable+0x3e>
    148c:	cd c0       	rjmp	.+410    	; 0x1628 <MEXTI_u8Enable+0x1d8>
    148e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1490:	9b 85       	ldd	r25, Y+11	; 0x0b
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	09 f0       	breq	.+2      	; 0x1498 <MEXTI_u8Enable+0x48>
    1496:	f0 c0       	rjmp	.+480    	; 0x1678 <MEXTI_u8Enable+0x228>
	{
	    case EXTI_u8_INT0:
	    	switch(Copy_u8EXTIEdge)
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	39 87       	std	Y+9, r19	; 0x09
    14a0:	28 87       	std	Y+8, r18	; 0x08
    14a2:	88 85       	ldd	r24, Y+8	; 0x08
    14a4:	99 85       	ldd	r25, Y+9	; 0x09
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	91 05       	cpc	r25, r1
    14aa:	21 f1       	breq	.+72     	; 0x14f4 <MEXTI_u8Enable+0xa4>
    14ac:	28 85       	ldd	r18, Y+8	; 0x08
    14ae:	39 85       	ldd	r19, Y+9	; 0x09
    14b0:	22 30       	cpi	r18, 0x02	; 2
    14b2:	31 05       	cpc	r19, r1
    14b4:	2c f4       	brge	.+10     	; 0x14c0 <MEXTI_u8Enable+0x70>
    14b6:	88 85       	ldd	r24, Y+8	; 0x08
    14b8:	99 85       	ldd	r25, Y+9	; 0x09
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	61 f0       	breq	.+24     	; 0x14d6 <MEXTI_u8Enable+0x86>
    14be:	47 c0       	rjmp	.+142    	; 0x154e <MEXTI_u8Enable+0xfe>
    14c0:	28 85       	ldd	r18, Y+8	; 0x08
    14c2:	39 85       	ldd	r19, Y+9	; 0x09
    14c4:	22 30       	cpi	r18, 0x02	; 2
    14c6:	31 05       	cpc	r19, r1
    14c8:	99 f1       	breq	.+102    	; 0x1530 <MEXTI_u8Enable+0xe0>
    14ca:	88 85       	ldd	r24, Y+8	; 0x08
    14cc:	99 85       	ldd	r25, Y+9	; 0x09
    14ce:	83 30       	cpi	r24, 0x03	; 3
    14d0:	91 05       	cpc	r25, r1
    14d2:	f9 f0       	breq	.+62     	; 0x1512 <MEXTI_u8Enable+0xc2>
    14d4:	3c c0       	rjmp	.+120    	; 0x154e <MEXTI_u8Enable+0xfe>
	    	{
	    	    case EXTI_u8_FALLING_EDGE:
	    	    	SET_BIT(EXTI_u8_MCUCR,1);
    14d6:	a5 e5       	ldi	r26, 0x55	; 85
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e5 e5       	ldi	r30, 0x55	; 85
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	82 60       	ori	r24, 0x02	; 2
    14e2:	8c 93       	st	X, r24
	    	    	CLR_BIT(EXTI_u8_MCUCR,0);
    14e4:	a5 e5       	ldi	r26, 0x55	; 85
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	e5 e5       	ldi	r30, 0x55	; 85
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8e 7f       	andi	r24, 0xFE	; 254
    14f0:	8c 93       	st	X, r24
    14f2:	2e c0       	rjmp	.+92     	; 0x1550 <MEXTI_u8Enable+0x100>
	    		break;
	    	    case EXTI_u8_RISING_EDGE:
	    	    	SET_BIT(EXTI_u8_MCUCR,1);
    14f4:	a5 e5       	ldi	r26, 0x55	; 85
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e5 e5       	ldi	r30, 0x55	; 85
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	82 60       	ori	r24, 0x02	; 2
    1500:	8c 93       	st	X, r24
	    	    	SET_BIT(EXTI_u8_MCUCR,0);
    1502:	a5 e5       	ldi	r26, 0x55	; 85
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e5 e5       	ldi	r30, 0x55	; 85
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	81 60       	ori	r24, 0x01	; 1
    150e:	8c 93       	st	X, r24
    1510:	1f c0       	rjmp	.+62     	; 0x1550 <MEXTI_u8Enable+0x100>
	    		break;
	    	    case EXTI_u8_LOW_LEVEL:
	    	    	CLR_BIT(EXTI_u8_MCUCR,1);
    1512:	a5 e5       	ldi	r26, 0x55	; 85
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e5 e5       	ldi	r30, 0x55	; 85
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	8d 7f       	andi	r24, 0xFD	; 253
    151e:	8c 93       	st	X, r24
	    	    	CLR_BIT(EXTI_u8_MCUCR,0);
    1520:	a5 e5       	ldi	r26, 0x55	; 85
    1522:	b0 e0       	ldi	r27, 0x00	; 0
    1524:	e5 e5       	ldi	r30, 0x55	; 85
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
    152a:	8e 7f       	andi	r24, 0xFE	; 254
    152c:	8c 93       	st	X, r24
    152e:	10 c0       	rjmp	.+32     	; 0x1550 <MEXTI_u8Enable+0x100>
	    		break;
	    	    case EXTI_u8_ANY_LOGICAL_CHANGE:
	    	    	SET_BIT(EXTI_u8_MCUCR,0);
    1530:	a5 e5       	ldi	r26, 0x55	; 85
    1532:	b0 e0       	ldi	r27, 0x00	; 0
    1534:	e5 e5       	ldi	r30, 0x55	; 85
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	81 60       	ori	r24, 0x01	; 1
    153c:	8c 93       	st	X, r24
	    	    	CLR_BIT(EXTI_u8_MCUCR,1);
    153e:	a5 e5       	ldi	r26, 0x55	; 85
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e5 e5       	ldi	r30, 0x55	; 85
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	8d 7f       	andi	r24, 0xFD	; 253
    154a:	8c 93       	st	X, r24
    154c:	01 c0       	rjmp	.+2      	; 0x1550 <MEXTI_u8Enable+0x100>
	    		break;
	    	    default:  Local_u8ErrorState = STD_TYPES_NOK;
    154e:	19 82       	std	Y+1, r1	; 0x01
	    	}
	    	/* Enable PIE */
	    	SET_BIT(EXTI_u8_GICR,6);
    1550:	ab e5       	ldi	r26, 0x5B	; 91
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	eb e5       	ldi	r30, 0x5B	; 91
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	80 64       	ori	r24, 0x40	; 64
    155c:	8c 93       	st	X, r24
    155e:	8d c0       	rjmp	.+282    	; 0x167a <MEXTI_u8Enable+0x22a>
		break;
		    case EXTI_u8_INT1:
		    	switch(Copy_u8EXTIEdge)
    1560:	8b 81       	ldd	r24, Y+3	; 0x03
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	3f 83       	std	Y+7, r19	; 0x07
    1568:	2e 83       	std	Y+6, r18	; 0x06
    156a:	8e 81       	ldd	r24, Y+6	; 0x06
    156c:	9f 81       	ldd	r25, Y+7	; 0x07
    156e:	81 30       	cpi	r24, 0x01	; 1
    1570:	91 05       	cpc	r25, r1
    1572:	21 f1       	breq	.+72     	; 0x15bc <MEXTI_u8Enable+0x16c>
    1574:	2e 81       	ldd	r18, Y+6	; 0x06
    1576:	3f 81       	ldd	r19, Y+7	; 0x07
    1578:	22 30       	cpi	r18, 0x02	; 2
    157a:	31 05       	cpc	r19, r1
    157c:	2c f4       	brge	.+10     	; 0x1588 <MEXTI_u8Enable+0x138>
    157e:	8e 81       	ldd	r24, Y+6	; 0x06
    1580:	9f 81       	ldd	r25, Y+7	; 0x07
    1582:	00 97       	sbiw	r24, 0x00	; 0
    1584:	61 f0       	breq	.+24     	; 0x159e <MEXTI_u8Enable+0x14e>
    1586:	47 c0       	rjmp	.+142    	; 0x1616 <MEXTI_u8Enable+0x1c6>
    1588:	2e 81       	ldd	r18, Y+6	; 0x06
    158a:	3f 81       	ldd	r19, Y+7	; 0x07
    158c:	22 30       	cpi	r18, 0x02	; 2
    158e:	31 05       	cpc	r19, r1
    1590:	99 f1       	breq	.+102    	; 0x15f8 <MEXTI_u8Enable+0x1a8>
    1592:	8e 81       	ldd	r24, Y+6	; 0x06
    1594:	9f 81       	ldd	r25, Y+7	; 0x07
    1596:	83 30       	cpi	r24, 0x03	; 3
    1598:	91 05       	cpc	r25, r1
    159a:	f9 f0       	breq	.+62     	; 0x15da <MEXTI_u8Enable+0x18a>
    159c:	3c c0       	rjmp	.+120    	; 0x1616 <MEXTI_u8Enable+0x1c6>
		    	{
		    	    case EXTI_u8_FALLING_EDGE:
		    	    	SET_BIT(EXTI_u8_MCUCR,3);
    159e:	a5 e5       	ldi	r26, 0x55	; 85
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 e5       	ldi	r30, 0x55	; 85
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	88 60       	ori	r24, 0x08	; 8
    15aa:	8c 93       	st	X, r24
		    	    	CLR_BIT(EXTI_u8_MCUCR,2);
    15ac:	a5 e5       	ldi	r26, 0x55	; 85
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e5 e5       	ldi	r30, 0x55	; 85
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	8b 7f       	andi	r24, 0xFB	; 251
    15b8:	8c 93       	st	X, r24
    15ba:	2e c0       	rjmp	.+92     	; 0x1618 <MEXTI_u8Enable+0x1c8>
		    		break;
		    	    case EXTI_u8_RISING_EDGE:
		    	    	SET_BIT(EXTI_u8_MCUCR,3);
    15bc:	a5 e5       	ldi	r26, 0x55	; 85
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e5 e5       	ldi	r30, 0x55	; 85
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	88 60       	ori	r24, 0x08	; 8
    15c8:	8c 93       	st	X, r24
		    	    	SET_BIT(EXTI_u8_MCUCR,2);
    15ca:	a5 e5       	ldi	r26, 0x55	; 85
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e5 e5       	ldi	r30, 0x55	; 85
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	84 60       	ori	r24, 0x04	; 4
    15d6:	8c 93       	st	X, r24
    15d8:	1f c0       	rjmp	.+62     	; 0x1618 <MEXTI_u8Enable+0x1c8>
		    		break;
		    	    case EXTI_u8_LOW_LEVEL:
		    	    	CLR_BIT(EXTI_u8_MCUCR,2);
    15da:	a5 e5       	ldi	r26, 0x55	; 85
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e5 e5       	ldi	r30, 0x55	; 85
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	8b 7f       	andi	r24, 0xFB	; 251
    15e6:	8c 93       	st	X, r24
		    	    	CLR_BIT(EXTI_u8_MCUCR,3);
    15e8:	a5 e5       	ldi	r26, 0x55	; 85
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e5 e5       	ldi	r30, 0x55	; 85
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	87 7f       	andi	r24, 0xF7	; 247
    15f4:	8c 93       	st	X, r24
    15f6:	10 c0       	rjmp	.+32     	; 0x1618 <MEXTI_u8Enable+0x1c8>
		    		break;
		    	    case EXTI_u8_ANY_LOGICAL_CHANGE:
		    	    	SET_BIT(EXTI_u8_MCUCR,2);
    15f8:	a5 e5       	ldi	r26, 0x55	; 85
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	e5 e5       	ldi	r30, 0x55	; 85
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	84 60       	ori	r24, 0x04	; 4
    1604:	8c 93       	st	X, r24
		    	    	CLR_BIT(EXTI_u8_MCUCR,3);
    1606:	a5 e5       	ldi	r26, 0x55	; 85
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e5 e5       	ldi	r30, 0x55	; 85
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	87 7f       	andi	r24, 0xF7	; 247
    1612:	8c 93       	st	X, r24
    1614:	01 c0       	rjmp	.+2      	; 0x1618 <MEXTI_u8Enable+0x1c8>
		    		break;
		    	    default:  Local_u8ErrorState = STD_TYPES_NOK;
    1616:	19 82       	std	Y+1, r1	; 0x01
		    	}
		    	/* Enable PIE */
		    	SET_BIT(EXTI_u8_GICR,7);
    1618:	ab e5       	ldi	r26, 0x5B	; 91
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	eb e5       	ldi	r30, 0x5B	; 91
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	80 68       	ori	r24, 0x80	; 128
    1624:	8c 93       	st	X, r24
    1626:	29 c0       	rjmp	.+82     	; 0x167a <MEXTI_u8Enable+0x22a>
			break;
			    case EXTI_u8_INT2:
			    	switch(Copy_u8EXTIEdge)
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	3d 83       	std	Y+5, r19	; 0x05
    1630:	2c 83       	std	Y+4, r18	; 0x04
    1632:	8c 81       	ldd	r24, Y+4	; 0x04
    1634:	9d 81       	ldd	r25, Y+5	; 0x05
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	31 f0       	breq	.+12     	; 0x1646 <MEXTI_u8Enable+0x1f6>
    163a:	2c 81       	ldd	r18, Y+4	; 0x04
    163c:	3d 81       	ldd	r19, Y+5	; 0x05
    163e:	21 30       	cpi	r18, 0x01	; 1
    1640:	31 05       	cpc	r19, r1
    1642:	49 f0       	breq	.+18     	; 0x1656 <MEXTI_u8Enable+0x206>
    1644:	10 c0       	rjmp	.+32     	; 0x1666 <MEXTI_u8Enable+0x216>
			    	{
			    	    case EXTI_u8_FALLING_EDGE:
                             CLR_BIT(EXTI_u8_MCUCSR,6);
    1646:	a4 e5       	ldi	r26, 0x54	; 84
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	e4 e5       	ldi	r30, 0x54	; 84
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	80 81       	ld	r24, Z
    1650:	8f 7b       	andi	r24, 0xBF	; 191
    1652:	8c 93       	st	X, r24
    1654:	09 c0       	rjmp	.+18     	; 0x1668 <MEXTI_u8Enable+0x218>
			    		break;
			    	    case EXTI_u8_RISING_EDGE:
                             SET_BIT(EXTI_u8_MCUCSR,6);
    1656:	a4 e5       	ldi	r26, 0x54	; 84
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e4 e5       	ldi	r30, 0x54	; 84
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	80 64       	ori	r24, 0x40	; 64
    1662:	8c 93       	st	X, r24
    1664:	01 c0       	rjmp	.+2      	; 0x1668 <MEXTI_u8Enable+0x218>
			    		break;
			    	    default:  Local_u8ErrorState = STD_TYPES_NOK;
    1666:	19 82       	std	Y+1, r1	; 0x01
			    	}
			    	/* Enable PIE */
			    	SET_BIT(EXTI_u8_GICR,5);
    1668:	ab e5       	ldi	r26, 0x5B	; 91
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	eb e5       	ldi	r30, 0x5B	; 91
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	80 62       	ori	r24, 0x20	; 32
    1674:	8c 93       	st	X, r24
    1676:	01 c0       	rjmp	.+2      	; 0x167a <MEXTI_u8Enable+0x22a>
				break;
			    	default: Local_u8ErrorState = STD_TYPES_NOK;
    1678:	19 82       	std	Y+1, r1	; 0x01

	}

	return Local_u8ErrorState;
    167a:	89 81       	ldd	r24, Y+1	; 0x01
}
    167c:	2b 96       	adiw	r28, 0x0b	; 11
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
    1688:	cf 91       	pop	r28
    168a:	df 91       	pop	r29
    168c:	08 95       	ret

0000168e <MEXTI_u8Disable>:

/*******************************************************************************************************/
/*                             EXTERNAL INTERRUPT Enable Function                                      */
/*******************************************************************************************************/
u8 MEXTI_u8Disable(u8 Copy_u8_EXTIIndex)
{
    168e:	df 93       	push	r29
    1690:	cf 93       	push	r28
    1692:	00 d0       	rcall	.+0      	; 0x1694 <MEXTI_u8Disable+0x6>
    1694:	00 d0       	rcall	.+0      	; 0x1696 <MEXTI_u8Disable+0x8>
    1696:	cd b7       	in	r28, 0x3d	; 61
    1698:	de b7       	in	r29, 0x3e	; 62
    169a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8_EXTIIndex)
    16a0:	8a 81       	ldd	r24, Y+2	; 0x02
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	3c 83       	std	Y+4, r19	; 0x04
    16a8:	2b 83       	std	Y+3, r18	; 0x03
    16aa:	8b 81       	ldd	r24, Y+3	; 0x03
    16ac:	9c 81       	ldd	r25, Y+4	; 0x04
    16ae:	81 30       	cpi	r24, 0x01	; 1
    16b0:	91 05       	cpc	r25, r1
    16b2:	89 f0       	breq	.+34     	; 0x16d6 <MEXTI_u8Disable+0x48>
    16b4:	2b 81       	ldd	r18, Y+3	; 0x03
    16b6:	3c 81       	ldd	r19, Y+4	; 0x04
    16b8:	22 30       	cpi	r18, 0x02	; 2
    16ba:	31 05       	cpc	r19, r1
    16bc:	a1 f0       	breq	.+40     	; 0x16e6 <MEXTI_u8Disable+0x58>
    16be:	8b 81       	ldd	r24, Y+3	; 0x03
    16c0:	9c 81       	ldd	r25, Y+4	; 0x04
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	c1 f4       	brne	.+48     	; 0x16f6 <MEXTI_u8Disable+0x68>
	{
	case EXTI_u8_INT0: CLR_BIT(EXTI_u8_GICR,6);break;
    16c6:	ab e5       	ldi	r26, 0x5B	; 91
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	eb e5       	ldi	r30, 0x5B	; 91
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	8f 7b       	andi	r24, 0xBF	; 191
    16d2:	8c 93       	st	X, r24
    16d4:	11 c0       	rjmp	.+34     	; 0x16f8 <MEXTI_u8Disable+0x6a>
	case EXTI_u8_INT1: CLR_BIT(EXTI_u8_GICR,7);break;
    16d6:	ab e5       	ldi	r26, 0x5B	; 91
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	eb e5       	ldi	r30, 0x5B	; 91
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	8f 77       	andi	r24, 0x7F	; 127
    16e2:	8c 93       	st	X, r24
    16e4:	09 c0       	rjmp	.+18     	; 0x16f8 <MEXTI_u8Disable+0x6a>
	case EXTI_u8_INT2: CLR_BIT(EXTI_u8_GICR,5);break;
    16e6:	ab e5       	ldi	r26, 0x5B	; 91
    16e8:	b0 e0       	ldi	r27, 0x00	; 0
    16ea:	eb e5       	ldi	r30, 0x5B	; 91
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	8f 7d       	andi	r24, 0xDF	; 223
    16f2:	8c 93       	st	X, r24
    16f4:	01 c0       	rjmp	.+2      	; 0x16f8 <MEXTI_u8Disable+0x6a>
	default: Local_u8ErrorState = STD_TYPES_NOK;
    16f6:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    16f8:	89 81       	ldd	r24, Y+1	; 0x01

}
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	0f 90       	pop	r0
    1700:	0f 90       	pop	r0
    1702:	cf 91       	pop	r28
    1704:	df 91       	pop	r29
    1706:	08 95       	ret

00001708 <__vector_1>:
/*******************************************************************************************************/
/*                                         EXTI0 ISR                                                   */
/*******************************************************************************************************/
void __vector_1(void)     __attribute__((signal));
void __vector_1(void)
{
    1708:	1f 92       	push	r1
    170a:	0f 92       	push	r0
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	0f 92       	push	r0
    1710:	11 24       	eor	r1, r1
    1712:	2f 93       	push	r18
    1714:	3f 93       	push	r19
    1716:	4f 93       	push	r20
    1718:	5f 93       	push	r21
    171a:	6f 93       	push	r22
    171c:	7f 93       	push	r23
    171e:	8f 93       	push	r24
    1720:	9f 93       	push	r25
    1722:	af 93       	push	r26
    1724:	bf 93       	push	r27
    1726:	ef 93       	push	r30
    1728:	ff 93       	push	r31
    172a:	df 93       	push	r29
    172c:	cf 93       	push	r28
    172e:	cd b7       	in	r28, 0x3d	; 61
    1730:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT0] != NULL)
    1732:	80 91 99 00 	lds	r24, 0x0099
    1736:	90 91 9a 00 	lds	r25, 0x009A
    173a:	00 97       	sbiw	r24, 0x00	; 0
    173c:	29 f0       	breq	.+10     	; 0x1748 <__vector_1+0x40>
	{
	EXTI_ApfEXTI[EXTI_u8_INT0]();
    173e:	e0 91 99 00 	lds	r30, 0x0099
    1742:	f0 91 9a 00 	lds	r31, 0x009A
    1746:	09 95       	icall
	}
}
    1748:	cf 91       	pop	r28
    174a:	df 91       	pop	r29
    174c:	ff 91       	pop	r31
    174e:	ef 91       	pop	r30
    1750:	bf 91       	pop	r27
    1752:	af 91       	pop	r26
    1754:	9f 91       	pop	r25
    1756:	8f 91       	pop	r24
    1758:	7f 91       	pop	r23
    175a:	6f 91       	pop	r22
    175c:	5f 91       	pop	r21
    175e:	4f 91       	pop	r20
    1760:	3f 91       	pop	r19
    1762:	2f 91       	pop	r18
    1764:	0f 90       	pop	r0
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	0f 90       	pop	r0
    176a:	1f 90       	pop	r1
    176c:	18 95       	reti

0000176e <__vector_2>:
/*******************************************************************************************************/
/*                                          EXTI1 ISR                                                  */
/*******************************************************************************************************/
void __vector_2(void)     __attribute__((signal));
void __vector_2(void)
{
    176e:	1f 92       	push	r1
    1770:	0f 92       	push	r0
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	0f 92       	push	r0
    1776:	11 24       	eor	r1, r1
    1778:	2f 93       	push	r18
    177a:	3f 93       	push	r19
    177c:	4f 93       	push	r20
    177e:	5f 93       	push	r21
    1780:	6f 93       	push	r22
    1782:	7f 93       	push	r23
    1784:	8f 93       	push	r24
    1786:	9f 93       	push	r25
    1788:	af 93       	push	r26
    178a:	bf 93       	push	r27
    178c:	ef 93       	push	r30
    178e:	ff 93       	push	r31
    1790:	df 93       	push	r29
    1792:	cf 93       	push	r28
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT1] != NULL)
    1798:	80 91 9b 00 	lds	r24, 0x009B
    179c:	90 91 9c 00 	lds	r25, 0x009C
    17a0:	00 97       	sbiw	r24, 0x00	; 0
    17a2:	29 f0       	breq	.+10     	; 0x17ae <__vector_2+0x40>
	{
	EXTI_ApfEXTI[EXTI_u8_INT1]();
    17a4:	e0 91 9b 00 	lds	r30, 0x009B
    17a8:	f0 91 9c 00 	lds	r31, 0x009C
    17ac:	09 95       	icall
	}
}
    17ae:	cf 91       	pop	r28
    17b0:	df 91       	pop	r29
    17b2:	ff 91       	pop	r31
    17b4:	ef 91       	pop	r30
    17b6:	bf 91       	pop	r27
    17b8:	af 91       	pop	r26
    17ba:	9f 91       	pop	r25
    17bc:	8f 91       	pop	r24
    17be:	7f 91       	pop	r23
    17c0:	6f 91       	pop	r22
    17c2:	5f 91       	pop	r21
    17c4:	4f 91       	pop	r20
    17c6:	3f 91       	pop	r19
    17c8:	2f 91       	pop	r18
    17ca:	0f 90       	pop	r0
    17cc:	0f be       	out	0x3f, r0	; 63
    17ce:	0f 90       	pop	r0
    17d0:	1f 90       	pop	r1
    17d2:	18 95       	reti

000017d4 <__vector_3>:
/*******************************************************************************************************/
/*                                            EXTI2 ISR                                                */
/*******************************************************************************************************/
void __vector_3(void)     __attribute__((signal));
void __vector_3(void)
{
    17d4:	1f 92       	push	r1
    17d6:	0f 92       	push	r0
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	0f 92       	push	r0
    17dc:	11 24       	eor	r1, r1
    17de:	2f 93       	push	r18
    17e0:	3f 93       	push	r19
    17e2:	4f 93       	push	r20
    17e4:	5f 93       	push	r21
    17e6:	6f 93       	push	r22
    17e8:	7f 93       	push	r23
    17ea:	8f 93       	push	r24
    17ec:	9f 93       	push	r25
    17ee:	af 93       	push	r26
    17f0:	bf 93       	push	r27
    17f2:	ef 93       	push	r30
    17f4:	ff 93       	push	r31
    17f6:	df 93       	push	r29
    17f8:	cf 93       	push	r28
    17fa:	cd b7       	in	r28, 0x3d	; 61
    17fc:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_ApfEXTI[EXTI_u8_INT2] != NULL)
    17fe:	80 91 9d 00 	lds	r24, 0x009D
    1802:	90 91 9e 00 	lds	r25, 0x009E
    1806:	00 97       	sbiw	r24, 0x00	; 0
    1808:	29 f0       	breq	.+10     	; 0x1814 <__vector_3+0x40>
	{
	EXTI_ApfEXTI[EXTI_u8_INT2]();
    180a:	e0 91 9d 00 	lds	r30, 0x009D
    180e:	f0 91 9e 00 	lds	r31, 0x009E
    1812:	09 95       	icall
	}
}
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	ff 91       	pop	r31
    181a:	ef 91       	pop	r30
    181c:	bf 91       	pop	r27
    181e:	af 91       	pop	r26
    1820:	9f 91       	pop	r25
    1822:	8f 91       	pop	r24
    1824:	7f 91       	pop	r23
    1826:	6f 91       	pop	r22
    1828:	5f 91       	pop	r21
    182a:	4f 91       	pop	r20
    182c:	3f 91       	pop	r19
    182e:	2f 91       	pop	r18
    1830:	0f 90       	pop	r0
    1832:	0f be       	out	0x3f, r0	; 63
    1834:	0f 90       	pop	r0
    1836:	1f 90       	pop	r1
    1838:	18 95       	reti

0000183a <MDIO_u8Init>:

/*******************************************************************************************************/
/*                                    DIO Initialization Function                                      */
/*******************************************************************************************************/
void MDIO_u8Init            (void)
{
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
     DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
    1842:	ea e3       	ldi	r30, 0x3A	; 58
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	10 82       	st	Z, r1
	                    DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION); 
     
	 DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
    1848:	e7 e3       	ldi	r30, 0x37	; 55
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	8f ef       	ldi	r24, 0xFF	; 255
    184e:	80 83       	st	Z, r24
	                    DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION); 
     
	 DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
    1850:	e4 e3       	ldi	r30, 0x34	; 52
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	10 82       	st	Z, r1
	                    DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION); 
     
	 DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
    1856:	e1 e3       	ldi	r30, 0x31	; 49
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	10 82       	st	Z, r1
	                    DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION); 
    /*Initial values for pins */
     PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
    185c:	eb e3       	ldi	r30, 0x3B	; 59
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	10 82       	st	Z, r1
	                     DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE); 
																											   
	 PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
    1862:	e8 e3       	ldi	r30, 0x38	; 56
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	10 82       	st	Z, r1
	                     DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE); 
																											   
	 PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
    1868:	e5 e3       	ldi	r30, 0x35	; 53
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	10 82       	st	Z, r1
	                     DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE); 
																											   
	 PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
    186e:	e2 e3       	ldi	r30, 0x32	; 50
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	10 82       	st	Z, r1
	                     DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);

}
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <MDIO_u8SetPinDirection>:

/*******************************************************************************************************/
/*                                    DIO Set Pin Direction Function                                   */
/*******************************************************************************************************/
u8 MDIO_u8SetPinDirection (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinDirection)
{
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	2e 97       	sbiw	r28, 0x0e	; 14
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	8a 83       	std	Y+2, r24	; 0x02
    1890:	6b 83       	std	Y+3, r22	; 0x03
    1892:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	89 83       	std	Y+1, r24	; 0x01
	/* Check 1- Valid Port  ID
	         2- Valid Pin ID
			 3- Valid Pin Direction */
    if((Copy_u8PortID <= DIO_u8_PORTD) && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
    1898:	8a 81       	ldd	r24, Y+2	; 0x02
    189a:	84 30       	cpi	r24, 0x04	; 4
    189c:	08 f0       	brcs	.+2      	; 0x18a0 <MDIO_u8SetPinDirection+0x26>
    189e:	0c c1       	rjmp	.+536    	; 0x1ab8 <MDIO_u8SetPinDirection+0x23e>
    18a0:	8b 81       	ldd	r24, Y+3	; 0x03
    18a2:	88 30       	cpi	r24, 0x08	; 8
    18a4:	08 f0       	brcs	.+2      	; 0x18a8 <MDIO_u8SetPinDirection+0x2e>
    18a6:	08 c1       	rjmp	.+528    	; 0x1ab8 <MDIO_u8SetPinDirection+0x23e>
    18a8:	8c 81       	ldd	r24, Y+4	; 0x04
    18aa:	88 23       	and	r24, r24
    18ac:	21 f0       	breq	.+8      	; 0x18b6 <MDIO_u8SetPinDirection+0x3c>
    18ae:	8c 81       	ldd	r24, Y+4	; 0x04
    18b0:	81 30       	cpi	r24, 0x01	; 1
    18b2:	09 f0       	breq	.+2      	; 0x18b6 <MDIO_u8SetPinDirection+0x3c>
    18b4:	01 c1       	rjmp	.+514    	; 0x1ab8 <MDIO_u8SetPinDirection+0x23e>
	{
		switch(Copy_u8PortID)
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	3e 87       	std	Y+14, r19	; 0x0e
    18be:	2d 87       	std	Y+13, r18	; 0x0d
    18c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	91 05       	cpc	r25, r1
    18c8:	09 f4       	brne	.+2      	; 0x18cc <MDIO_u8SetPinDirection+0x52>
    18ca:	4f c0       	rjmp	.+158    	; 0x196a <MDIO_u8SetPinDirection+0xf0>
    18cc:	2d 85       	ldd	r18, Y+13	; 0x0d
    18ce:	3e 85       	ldd	r19, Y+14	; 0x0e
    18d0:	22 30       	cpi	r18, 0x02	; 2
    18d2:	31 05       	cpc	r19, r1
    18d4:	2c f4       	brge	.+10     	; 0x18e0 <MDIO_u8SetPinDirection+0x66>
    18d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    18d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    18da:	00 97       	sbiw	r24, 0x00	; 0
    18dc:	71 f0       	breq	.+28     	; 0x18fa <MDIO_u8SetPinDirection+0x80>
    18de:	ed c0       	rjmp	.+474    	; 0x1aba <MDIO_u8SetPinDirection+0x240>
    18e0:	2d 85       	ldd	r18, Y+13	; 0x0d
    18e2:	3e 85       	ldd	r19, Y+14	; 0x0e
    18e4:	22 30       	cpi	r18, 0x02	; 2
    18e6:	31 05       	cpc	r19, r1
    18e8:	09 f4       	brne	.+2      	; 0x18ec <MDIO_u8SetPinDirection+0x72>
    18ea:	77 c0       	rjmp	.+238    	; 0x19da <MDIO_u8SetPinDirection+0x160>
    18ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f0:	83 30       	cpi	r24, 0x03	; 3
    18f2:	91 05       	cpc	r25, r1
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <MDIO_u8SetPinDirection+0x7e>
    18f6:	a9 c0       	rjmp	.+338    	; 0x1a4a <MDIO_u8SetPinDirection+0x1d0>
    18f8:	e0 c0       	rjmp	.+448    	; 0x1aba <MDIO_u8SetPinDirection+0x240>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
    18fa:	8c 81       	ldd	r24, Y+4	; 0x04
    18fc:	28 2f       	mov	r18, r24
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	3c 87       	std	Y+12, r19	; 0x0c
    1902:	2b 87       	std	Y+11, r18	; 0x0b
    1904:	8b 85       	ldd	r24, Y+11	; 0x0b
    1906:	9c 85       	ldd	r25, Y+12	; 0x0c
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	d1 f0       	breq	.+52     	; 0x1940 <MDIO_u8SetPinDirection+0xc6>
    190c:	2b 85       	ldd	r18, Y+11	; 0x0b
    190e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1910:	21 30       	cpi	r18, 0x01	; 1
    1912:	31 05       	cpc	r19, r1
    1914:	09 f0       	breq	.+2      	; 0x1918 <MDIO_u8SetPinDirection+0x9e>
    1916:	d1 c0       	rjmp	.+418    	; 0x1aba <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinID);
    1918:	aa e3       	ldi	r26, 0x3A	; 58
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	ea e3       	ldi	r30, 0x3A	; 58
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <MDIO_u8SetPinDirection+0xbc>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <MDIO_u8SetPinDirection+0xb8>
    193a:	84 2b       	or	r24, r20
    193c:	8c 93       	st	X, r24
    193e:	bd c0       	rjmp	.+378    	; 0x1aba <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinID);
    1940:	aa e3       	ldi	r26, 0x3A	; 58
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	ea e3       	ldi	r30, 0x3A	; 58
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	48 2f       	mov	r20, r24
    194c:	8b 81       	ldd	r24, Y+3	; 0x03
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	02 2e       	mov	r0, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <MDIO_u8SetPinDirection+0xe4>
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	0a 94       	dec	r0
    1960:	e2 f7       	brpl	.-8      	; 0x195a <MDIO_u8SetPinDirection+0xe0>
    1962:	80 95       	com	r24
    1964:	84 23       	and	r24, r20
    1966:	8c 93       	st	X, r24
    1968:	a8 c0       	rjmp	.+336    	; 0x1aba <MDIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PinDirection)
    196a:	8c 81       	ldd	r24, Y+4	; 0x04
    196c:	28 2f       	mov	r18, r24
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	3a 87       	std	Y+10, r19	; 0x0a
    1972:	29 87       	std	Y+9, r18	; 0x09
    1974:	89 85       	ldd	r24, Y+9	; 0x09
    1976:	9a 85       	ldd	r25, Y+10	; 0x0a
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	d1 f0       	breq	.+52     	; 0x19b0 <MDIO_u8SetPinDirection+0x136>
    197c:	29 85       	ldd	r18, Y+9	; 0x09
    197e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1980:	21 30       	cpi	r18, 0x01	; 1
    1982:	31 05       	cpc	r19, r1
    1984:	09 f0       	breq	.+2      	; 0x1988 <MDIO_u8SetPinDirection+0x10e>
    1986:	99 c0       	rjmp	.+306    	; 0x1aba <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRB_u8_REG,Copy_u8PinID);
    1988:	a7 e3       	ldi	r26, 0x37	; 55
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e7 e3       	ldi	r30, 0x37	; 55
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	48 2f       	mov	r20, r24
    1994:	8b 81       	ldd	r24, Y+3	; 0x03
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	02 2e       	mov	r0, r18
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <MDIO_u8SetPinDirection+0x12c>
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	0a 94       	dec	r0
    19a8:	e2 f7       	brpl	.-8      	; 0x19a2 <MDIO_u8SetPinDirection+0x128>
    19aa:	84 2b       	or	r24, r20
    19ac:	8c 93       	st	X, r24
    19ae:	85 c0       	rjmp	.+266    	; 0x1aba <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRB_u8_REG,Copy_u8PinID);
    19b0:	a7 e3       	ldi	r26, 0x37	; 55
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e7 e3       	ldi	r30, 0x37	; 55
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8b 81       	ldd	r24, Y+3	; 0x03
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <MDIO_u8SetPinDirection+0x154>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <MDIO_u8SetPinDirection+0x150>
    19d2:	80 95       	com	r24
    19d4:	84 23       	and	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	70 c0       	rjmp	.+224    	; 0x1aba <MDIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PinDirection)
    19da:	8c 81       	ldd	r24, Y+4	; 0x04
    19dc:	28 2f       	mov	r18, r24
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	38 87       	std	Y+8, r19	; 0x08
    19e2:	2f 83       	std	Y+7, r18	; 0x07
    19e4:	8f 81       	ldd	r24, Y+7	; 0x07
    19e6:	98 85       	ldd	r25, Y+8	; 0x08
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	d1 f0       	breq	.+52     	; 0x1a20 <MDIO_u8SetPinDirection+0x1a6>
    19ec:	2f 81       	ldd	r18, Y+7	; 0x07
    19ee:	38 85       	ldd	r19, Y+8	; 0x08
    19f0:	21 30       	cpi	r18, 0x01	; 1
    19f2:	31 05       	cpc	r19, r1
    19f4:	09 f0       	breq	.+2      	; 0x19f8 <MDIO_u8SetPinDirection+0x17e>
    19f6:	61 c0       	rjmp	.+194    	; 0x1aba <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRC_u8_REG,Copy_u8PinID);
    19f8:	a4 e3       	ldi	r26, 0x34	; 52
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e4 e3       	ldi	r30, 0x34	; 52
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	48 2f       	mov	r20, r24
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	28 2f       	mov	r18, r24
    1a08:	30 e0       	ldi	r19, 0x00	; 0
    1a0a:	81 e0       	ldi	r24, 0x01	; 1
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	02 2e       	mov	r0, r18
    1a10:	02 c0       	rjmp	.+4      	; 0x1a16 <MDIO_u8SetPinDirection+0x19c>
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	0a 94       	dec	r0
    1a18:	e2 f7       	brpl	.-8      	; 0x1a12 <MDIO_u8SetPinDirection+0x198>
    1a1a:	84 2b       	or	r24, r20
    1a1c:	8c 93       	st	X, r24
    1a1e:	4d c0       	rjmp	.+154    	; 0x1aba <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRC_u8_REG,Copy_u8PinID);
    1a20:	a4 e3       	ldi	r26, 0x34	; 52
    1a22:	b0 e0       	ldi	r27, 0x00	; 0
    1a24:	e4 e3       	ldi	r30, 0x34	; 52
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	80 81       	ld	r24, Z
    1a2a:	48 2f       	mov	r20, r24
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	90 e0       	ldi	r25, 0x00	; 0
    1a36:	02 2e       	mov	r0, r18
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <MDIO_u8SetPinDirection+0x1c4>
    1a3a:	88 0f       	add	r24, r24
    1a3c:	99 1f       	adc	r25, r25
    1a3e:	0a 94       	dec	r0
    1a40:	e2 f7       	brpl	.-8      	; 0x1a3a <MDIO_u8SetPinDirection+0x1c0>
    1a42:	80 95       	com	r24
    1a44:	84 23       	and	r24, r20
    1a46:	8c 93       	st	X, r24
    1a48:	38 c0       	rjmp	.+112    	; 0x1aba <MDIO_u8SetPinDirection+0x240>
				break;
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PinDirection)
    1a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	3e 83       	std	Y+6, r19	; 0x06
    1a52:	2d 83       	std	Y+5, r18	; 0x05
    1a54:	8d 81       	ldd	r24, Y+5	; 0x05
    1a56:	9e 81       	ldd	r25, Y+6	; 0x06
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	c9 f0       	breq	.+50     	; 0x1a8e <MDIO_u8SetPinDirection+0x214>
    1a5c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a5e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a60:	21 30       	cpi	r18, 0x01	; 1
    1a62:	31 05       	cpc	r19, r1
    1a64:	51 f5       	brne	.+84     	; 0x1aba <MDIO_u8SetPinDirection+0x240>
			{
				case DIO_u8_OUTPUT:
				SET_BIT(DDRD_u8_REG,Copy_u8PinID);
    1a66:	a1 e3       	ldi	r26, 0x31	; 49
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e1 e3       	ldi	r30, 0x31	; 49
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	48 2f       	mov	r20, r24
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	02 2e       	mov	r0, r18
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <MDIO_u8SetPinDirection+0x20a>
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	0a 94       	dec	r0
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <MDIO_u8SetPinDirection+0x206>
    1a88:	84 2b       	or	r24, r20
    1a8a:	8c 93       	st	X, r24
    1a8c:	16 c0       	rjmp	.+44     	; 0x1aba <MDIO_u8SetPinDirection+0x240>
				break;
				case DIO_u8_INPUT:
				CLR_BIT(DDRD_u8_REG,Copy_u8PinID);
    1a8e:	a1 e3       	ldi	r26, 0x31	; 49
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e1 e3       	ldi	r30, 0x31	; 49
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	48 2f       	mov	r20, r24
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	02 2e       	mov	r0, r18
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <MDIO_u8SetPinDirection+0x232>
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	0a 94       	dec	r0
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <MDIO_u8SetPinDirection+0x22e>
    1ab0:	80 95       	com	r24
    1ab2:	84 23       	and	r24, r20
    1ab4:	8c 93       	st	X, r24
    1ab6:	01 c0       	rjmp	.+2      	; 0x1aba <MDIO_u8SetPinDirection+0x240>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    1ab8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
}
    1abc:	2e 96       	adiw	r28, 0x0e	; 14
    1abe:	0f b6       	in	r0, 0x3f	; 63
    1ac0:	f8 94       	cli
    1ac2:	de bf       	out	0x3e, r29	; 62
    1ac4:	0f be       	out	0x3f, r0	; 63
    1ac6:	cd bf       	out	0x3d, r28	; 61
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <MDIO_u8SetPinValue>:

/*******************************************************************************************************/
/*                                    DIO Set Pin Value Function                                       */
/*******************************************************************************************************/
u8 MDIO_u8SetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 Copy_u8PinValue)
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	2e 97       	sbiw	r28, 0x0e	; 14
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	8a 83       	std	Y+2, r24	; 0x02
    1ae4:	6b 83       	std	Y+3, r22	; 0x03
    1ae6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1ae8:	81 e0       	ldi	r24, 0x01	; 1
    1aea:	89 83       	std	Y+1, r24	; 0x01
	  if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_HIGH) || (Copy_u8PinValue == DIO_u8_LOW)))
    1aec:	8a 81       	ldd	r24, Y+2	; 0x02
    1aee:	84 30       	cpi	r24, 0x04	; 4
    1af0:	08 f0       	brcs	.+2      	; 0x1af4 <MDIO_u8SetPinValue+0x26>
    1af2:	0c c1       	rjmp	.+536    	; 0x1d0c <MDIO_u8SetPinValue+0x23e>
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	88 30       	cpi	r24, 0x08	; 8
    1af8:	08 f0       	brcs	.+2      	; 0x1afc <MDIO_u8SetPinValue+0x2e>
    1afa:	08 c1       	rjmp	.+528    	; 0x1d0c <MDIO_u8SetPinValue+0x23e>
    1afc:	8c 81       	ldd	r24, Y+4	; 0x04
    1afe:	81 30       	cpi	r24, 0x01	; 1
    1b00:	21 f0       	breq	.+8      	; 0x1b0a <MDIO_u8SetPinValue+0x3c>
    1b02:	8c 81       	ldd	r24, Y+4	; 0x04
    1b04:	88 23       	and	r24, r24
    1b06:	09 f0       	breq	.+2      	; 0x1b0a <MDIO_u8SetPinValue+0x3c>
    1b08:	01 c1       	rjmp	.+514    	; 0x1d0c <MDIO_u8SetPinValue+0x23e>
	  {
		  switch (Copy_u8PortID)
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	28 2f       	mov	r18, r24
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	3e 87       	std	Y+14, r19	; 0x0e
    1b12:	2d 87       	std	Y+13, r18	; 0x0d
    1b14:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b16:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b18:	81 30       	cpi	r24, 0x01	; 1
    1b1a:	91 05       	cpc	r25, r1
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <MDIO_u8SetPinValue+0x52>
    1b1e:	4f c0       	rjmp	.+158    	; 0x1bbe <MDIO_u8SetPinValue+0xf0>
    1b20:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b22:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b24:	22 30       	cpi	r18, 0x02	; 2
    1b26:	31 05       	cpc	r19, r1
    1b28:	2c f4       	brge	.+10     	; 0x1b34 <MDIO_u8SetPinValue+0x66>
    1b2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b2e:	00 97       	sbiw	r24, 0x00	; 0
    1b30:	71 f0       	breq	.+28     	; 0x1b4e <MDIO_u8SetPinValue+0x80>
    1b32:	ed c0       	rjmp	.+474    	; 0x1d0e <MDIO_u8SetPinValue+0x240>
    1b34:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b36:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b38:	22 30       	cpi	r18, 0x02	; 2
    1b3a:	31 05       	cpc	r19, r1
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <MDIO_u8SetPinValue+0x72>
    1b3e:	77 c0       	rjmp	.+238    	; 0x1c2e <MDIO_u8SetPinValue+0x160>
    1b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b44:	83 30       	cpi	r24, 0x03	; 3
    1b46:	91 05       	cpc	r25, r1
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <MDIO_u8SetPinValue+0x7e>
    1b4a:	a9 c0       	rjmp	.+338    	; 0x1c9e <MDIO_u8SetPinValue+0x1d0>
    1b4c:	e0 c0       	rjmp	.+448    	; 0x1d0e <MDIO_u8SetPinValue+0x240>
		  {
			  case DIO_u8_PORTA:
			     switch(Copy_u8PinValue)
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	28 2f       	mov	r18, r24
    1b52:	30 e0       	ldi	r19, 0x00	; 0
    1b54:	3c 87       	std	Y+12, r19	; 0x0c
    1b56:	2b 87       	std	Y+11, r18	; 0x0b
    1b58:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b5c:	00 97       	sbiw	r24, 0x00	; 0
    1b5e:	d1 f0       	breq	.+52     	; 0x1b94 <MDIO_u8SetPinValue+0xc6>
    1b60:	2b 85       	ldd	r18, Y+11	; 0x0b
    1b62:	3c 85       	ldd	r19, Y+12	; 0x0c
    1b64:	21 30       	cpi	r18, 0x01	; 1
    1b66:	31 05       	cpc	r19, r1
    1b68:	09 f0       	breq	.+2      	; 0x1b6c <MDIO_u8SetPinValue+0x9e>
    1b6a:	d1 c0       	rjmp	.+418    	; 0x1d0e <MDIO_u8SetPinValue+0x240>
				 {
					case DIO_u8_HIGH:
					 SET_BIT(PORTA_u8_REG,Copy_u8PinID);
    1b6c:	ab e3       	ldi	r26, 0x3B	; 59
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	eb e3       	ldi	r30, 0x3B	; 59
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	48 2f       	mov	r20, r24
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	28 2f       	mov	r18, r24
    1b7c:	30 e0       	ldi	r19, 0x00	; 0
    1b7e:	81 e0       	ldi	r24, 0x01	; 1
    1b80:	90 e0       	ldi	r25, 0x00	; 0
    1b82:	02 2e       	mov	r0, r18
    1b84:	02 c0       	rjmp	.+4      	; 0x1b8a <MDIO_u8SetPinValue+0xbc>
    1b86:	88 0f       	add	r24, r24
    1b88:	99 1f       	adc	r25, r25
    1b8a:	0a 94       	dec	r0
    1b8c:	e2 f7       	brpl	.-8      	; 0x1b86 <MDIO_u8SetPinValue+0xb8>
    1b8e:	84 2b       	or	r24, r20
    1b90:	8c 93       	st	X, r24
    1b92:	bd c0       	rjmp	.+378    	; 0x1d0e <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTA_u8_REG,Copy_u8PinID);
    1b94:	ab e3       	ldi	r26, 0x3B	; 59
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	eb e3       	ldi	r30, 0x3B	; 59
    1b9a:	f0 e0       	ldi	r31, 0x00	; 0
    1b9c:	80 81       	ld	r24, Z
    1b9e:	48 2f       	mov	r20, r24
    1ba0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	02 2e       	mov	r0, r18
    1bac:	02 c0       	rjmp	.+4      	; 0x1bb2 <MDIO_u8SetPinValue+0xe4>
    1bae:	88 0f       	add	r24, r24
    1bb0:	99 1f       	adc	r25, r25
    1bb2:	0a 94       	dec	r0
    1bb4:	e2 f7       	brpl	.-8      	; 0x1bae <MDIO_u8SetPinValue+0xe0>
    1bb6:	80 95       	com	r24
    1bb8:	84 23       	and	r24, r20
    1bba:	8c 93       	st	X, r24
    1bbc:	a8 c0       	rjmp	.+336    	; 0x1d0e <MDIO_u8SetPinValue+0x240>
					break;   
				 }
			   break;
			   case DIO_u8_PORTB:
			     switch(Copy_u8PinValue)
    1bbe:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	3a 87       	std	Y+10, r19	; 0x0a
    1bc6:	29 87       	std	Y+9, r18	; 0x09
    1bc8:	89 85       	ldd	r24, Y+9	; 0x09
    1bca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bcc:	00 97       	sbiw	r24, 0x00	; 0
    1bce:	d1 f0       	breq	.+52     	; 0x1c04 <MDIO_u8SetPinValue+0x136>
    1bd0:	29 85       	ldd	r18, Y+9	; 0x09
    1bd2:	3a 85       	ldd	r19, Y+10	; 0x0a
    1bd4:	21 30       	cpi	r18, 0x01	; 1
    1bd6:	31 05       	cpc	r19, r1
    1bd8:	09 f0       	breq	.+2      	; 0x1bdc <MDIO_u8SetPinValue+0x10e>
    1bda:	99 c0       	rjmp	.+306    	; 0x1d0e <MDIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTB_u8_REG,Copy_u8PinID);
    1bdc:	a8 e3       	ldi	r26, 0x38	; 56
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e8 e3       	ldi	r30, 0x38	; 56
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	48 2f       	mov	r20, r24
    1be8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	81 e0       	ldi	r24, 0x01	; 1
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	02 2e       	mov	r0, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <MDIO_u8SetPinValue+0x12c>
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	0a 94       	dec	r0
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <MDIO_u8SetPinValue+0x128>
    1bfe:	84 2b       	or	r24, r20
    1c00:	8c 93       	st	X, r24
    1c02:	85 c0       	rjmp	.+266    	; 0x1d0e <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTB_u8_REG,Copy_u8PinID);
    1c04:	a8 e3       	ldi	r26, 0x38	; 56
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e8 e3       	ldi	r30, 0x38	; 56
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	48 2f       	mov	r20, r24
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	02 2e       	mov	r0, r18
    1c1c:	02 c0       	rjmp	.+4      	; 0x1c22 <MDIO_u8SetPinValue+0x154>
    1c1e:	88 0f       	add	r24, r24
    1c20:	99 1f       	adc	r25, r25
    1c22:	0a 94       	dec	r0
    1c24:	e2 f7       	brpl	.-8      	; 0x1c1e <MDIO_u8SetPinValue+0x150>
    1c26:	80 95       	com	r24
    1c28:	84 23       	and	r24, r20
    1c2a:	8c 93       	st	X, r24
    1c2c:	70 c0       	rjmp	.+224    	; 0x1d0e <MDIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTC:
			     switch(Copy_u8PinValue)
    1c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	38 87       	std	Y+8, r19	; 0x08
    1c36:	2f 83       	std	Y+7, r18	; 0x07
    1c38:	8f 81       	ldd	r24, Y+7	; 0x07
    1c3a:	98 85       	ldd	r25, Y+8	; 0x08
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	d1 f0       	breq	.+52     	; 0x1c74 <MDIO_u8SetPinValue+0x1a6>
    1c40:	2f 81       	ldd	r18, Y+7	; 0x07
    1c42:	38 85       	ldd	r19, Y+8	; 0x08
    1c44:	21 30       	cpi	r18, 0x01	; 1
    1c46:	31 05       	cpc	r19, r1
    1c48:	09 f0       	breq	.+2      	; 0x1c4c <MDIO_u8SetPinValue+0x17e>
    1c4a:	61 c0       	rjmp	.+194    	; 0x1d0e <MDIO_u8SetPinValue+0x240>
				  {
					case DIO_u8_HIGH:
					 SET_BIT(PORTC_u8_REG,Copy_u8PinID);
    1c4c:	a5 e3       	ldi	r26, 0x35	; 53
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e5 e3       	ldi	r30, 0x35	; 53
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	48 2f       	mov	r20, r24
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	28 2f       	mov	r18, r24
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	81 e0       	ldi	r24, 0x01	; 1
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	02 2e       	mov	r0, r18
    1c64:	02 c0       	rjmp	.+4      	; 0x1c6a <MDIO_u8SetPinValue+0x19c>
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	0a 94       	dec	r0
    1c6c:	e2 f7       	brpl	.-8      	; 0x1c66 <MDIO_u8SetPinValue+0x198>
    1c6e:	84 2b       	or	r24, r20
    1c70:	8c 93       	st	X, r24
    1c72:	4d c0       	rjmp	.+154    	; 0x1d0e <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTC_u8_REG,Copy_u8PinID);
    1c74:	a5 e3       	ldi	r26, 0x35	; 53
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e5 e3       	ldi	r30, 0x35	; 53
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	48 2f       	mov	r20, r24
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	02 2e       	mov	r0, r18
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <MDIO_u8SetPinValue+0x1c4>
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	0a 94       	dec	r0
    1c94:	e2 f7       	brpl	.-8      	; 0x1c8e <MDIO_u8SetPinValue+0x1c0>
    1c96:	80 95       	com	r24
    1c98:	84 23       	and	r24, r20
    1c9a:	8c 93       	st	X, r24
    1c9c:	38 c0       	rjmp	.+112    	; 0x1d0e <MDIO_u8SetPinValue+0x240>
					break;
				  }
			   break;
			   case DIO_u8_PORTD:
			     switch(Copy_u8PinValue)
    1c9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	30 e0       	ldi	r19, 0x00	; 0
    1ca4:	3e 83       	std	Y+6, r19	; 0x06
    1ca6:	2d 83       	std	Y+5, r18	; 0x05
    1ca8:	8d 81       	ldd	r24, Y+5	; 0x05
    1caa:	9e 81       	ldd	r25, Y+6	; 0x06
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	c9 f0       	breq	.+50     	; 0x1ce2 <MDIO_u8SetPinValue+0x214>
    1cb0:	2d 81       	ldd	r18, Y+5	; 0x05
    1cb2:	3e 81       	ldd	r19, Y+6	; 0x06
    1cb4:	21 30       	cpi	r18, 0x01	; 1
    1cb6:	31 05       	cpc	r19, r1
    1cb8:	51 f5       	brne	.+84     	; 0x1d0e <MDIO_u8SetPinValue+0x240>
				  { 
					case DIO_u8_HIGH:
					 SET_BIT(PORTD_u8_REG,Copy_u8PinID);
    1cba:	a2 e3       	ldi	r26, 0x32	; 50
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	e2 e3       	ldi	r30, 0x32	; 50
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	80 81       	ld	r24, Z
    1cc4:	48 2f       	mov	r20, r24
    1cc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc8:	28 2f       	mov	r18, r24
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	02 2e       	mov	r0, r18
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <MDIO_u8SetPinValue+0x20a>
    1cd4:	88 0f       	add	r24, r24
    1cd6:	99 1f       	adc	r25, r25
    1cd8:	0a 94       	dec	r0
    1cda:	e2 f7       	brpl	.-8      	; 0x1cd4 <MDIO_u8SetPinValue+0x206>
    1cdc:	84 2b       	or	r24, r20
    1cde:	8c 93       	st	X, r24
    1ce0:	16 c0       	rjmp	.+44     	; 0x1d0e <MDIO_u8SetPinValue+0x240>
					break;
					case DIO_u8_LOW:
					 CLR_BIT(PORTD_u8_REG,Copy_u8PinID);
    1ce2:	a2 e3       	ldi	r26, 0x32	; 50
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e2 e3       	ldi	r30, 0x32	; 50
    1ce8:	f0 e0       	ldi	r31, 0x00	; 0
    1cea:	80 81       	ld	r24, Z
    1cec:	48 2f       	mov	r20, r24
    1cee:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	02 2e       	mov	r0, r18
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <MDIO_u8SetPinValue+0x232>
    1cfc:	88 0f       	add	r24, r24
    1cfe:	99 1f       	adc	r25, r25
    1d00:	0a 94       	dec	r0
    1d02:	e2 f7       	brpl	.-8      	; 0x1cfc <MDIO_u8SetPinValue+0x22e>
    1d04:	80 95       	com	r24
    1d06:	84 23       	and	r24, r20
    1d08:	8c 93       	st	X, r24
    1d0a:	01 c0       	rjmp	.+2      	; 0x1d0e <MDIO_u8SetPinValue+0x240>
			   break;
		   }
	  }
	  else
	  {
	      Local_u8ReturnState = STD_TYPES_NOK;
    1d0c:	19 82       	std	Y+1, r1	; 0x01
	  }
	return Local_u8ReturnState;
    1d0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d10:	2e 96       	adiw	r28, 0x0e	; 14
    1d12:	0f b6       	in	r0, 0x3f	; 63
    1d14:	f8 94       	cli
    1d16:	de bf       	out	0x3e, r29	; 62
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	cd bf       	out	0x3d, r28	; 61
    1d1c:	cf 91       	pop	r28
    1d1e:	df 91       	pop	r29
    1d20:	08 95       	ret

00001d22 <MDIO_u8GetPinValue>:

/*******************************************************************************************************/
/*                                  DIO Get Pin Value Function                                         */
/*******************************************************************************************************/
u8 MDIO_u8GetPinValue     (u8 Copy_u8PortID, u8 Copy_u8PinID, u8 * Copy_pu8ReturnedPinValue)
{
    1d22:	df 93       	push	r29
    1d24:	cf 93       	push	r28
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62
    1d2a:	27 97       	sbiw	r28, 0x07	; 7
    1d2c:	0f b6       	in	r0, 0x3f	; 63
    1d2e:	f8 94       	cli
    1d30:	de bf       	out	0x3e, r29	; 62
    1d32:	0f be       	out	0x3f, r0	; 63
    1d34:	cd bf       	out	0x3d, r28	; 61
    1d36:	8a 83       	std	Y+2, r24	; 0x02
    1d38:	6b 83       	std	Y+3, r22	; 0x03
    1d3a:	5d 83       	std	Y+5, r21	; 0x05
    1d3c:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD)  && (Copy_u8PinID <= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	84 30       	cpi	r24, 0x04	; 4
    1d46:	08 f0       	brcs	.+2      	; 0x1d4a <MDIO_u8GetPinValue+0x28>
    1d48:	ea c0       	rjmp	.+468    	; 0x1f1e <MDIO_u8GetPinValue+0x1fc>
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	88 30       	cpi	r24, 0x08	; 8
    1d4e:	08 f0       	brcs	.+2      	; 0x1d52 <MDIO_u8GetPinValue+0x30>
    1d50:	e6 c0       	rjmp	.+460    	; 0x1f1e <MDIO_u8GetPinValue+0x1fc>
    1d52:	8c 81       	ldd	r24, Y+4	; 0x04
    1d54:	9d 81       	ldd	r25, Y+5	; 0x05
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	09 f4       	brne	.+2      	; 0x1d5c <MDIO_u8GetPinValue+0x3a>
    1d5a:	e1 c0       	rjmp	.+450    	; 0x1f1e <MDIO_u8GetPinValue+0x1fc>
	{
		switch (Copy_u8PortID)
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	28 2f       	mov	r18, r24
    1d60:	30 e0       	ldi	r19, 0x00	; 0
    1d62:	3f 83       	std	Y+7, r19	; 0x07
    1d64:	2e 83       	std	Y+6, r18	; 0x06
    1d66:	4e 81       	ldd	r20, Y+6	; 0x06
    1d68:	5f 81       	ldd	r21, Y+7	; 0x07
    1d6a:	41 30       	cpi	r20, 0x01	; 1
    1d6c:	51 05       	cpc	r21, r1
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <MDIO_u8GetPinValue+0x50>
    1d70:	48 c0       	rjmp	.+144    	; 0x1e02 <MDIO_u8GetPinValue+0xe0>
    1d72:	8e 81       	ldd	r24, Y+6	; 0x06
    1d74:	9f 81       	ldd	r25, Y+7	; 0x07
    1d76:	82 30       	cpi	r24, 0x02	; 2
    1d78:	91 05       	cpc	r25, r1
    1d7a:	34 f4       	brge	.+12     	; 0x1d88 <MDIO_u8GetPinValue+0x66>
    1d7c:	2e 81       	ldd	r18, Y+6	; 0x06
    1d7e:	3f 81       	ldd	r19, Y+7	; 0x07
    1d80:	21 15       	cp	r18, r1
    1d82:	31 05       	cpc	r19, r1
    1d84:	71 f0       	breq	.+28     	; 0x1da2 <MDIO_u8GetPinValue+0x80>
    1d86:	cc c0       	rjmp	.+408    	; 0x1f20 <MDIO_u8GetPinValue+0x1fe>
    1d88:	4e 81       	ldd	r20, Y+6	; 0x06
    1d8a:	5f 81       	ldd	r21, Y+7	; 0x07
    1d8c:	42 30       	cpi	r20, 0x02	; 2
    1d8e:	51 05       	cpc	r21, r1
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <MDIO_u8GetPinValue+0x72>
    1d92:	67 c0       	rjmp	.+206    	; 0x1e62 <MDIO_u8GetPinValue+0x140>
    1d94:	8e 81       	ldd	r24, Y+6	; 0x06
    1d96:	9f 81       	ldd	r25, Y+7	; 0x07
    1d98:	83 30       	cpi	r24, 0x03	; 3
    1d9a:	91 05       	cpc	r25, r1
    1d9c:	09 f4       	brne	.+2      	; 0x1da0 <MDIO_u8GetPinValue+0x7e>
    1d9e:	90 c0       	rjmp	.+288    	; 0x1ec0 <MDIO_u8GetPinValue+0x19e>
    1da0:	bf c0       	rjmp	.+382    	; 0x1f20 <MDIO_u8GetPinValue+0x1fe>
		{
			case DIO_u8_PORTA: 
			   if(GET_BIT(PINA_u8_REG,Copy_u8PinID)== 0)
    1da2:	e9 e3       	ldi	r30, 0x39	; 57
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	88 2f       	mov	r24, r24
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	a9 01       	movw	r20, r18
    1db4:	02 c0       	rjmp	.+4      	; 0x1dba <MDIO_u8GetPinValue+0x98>
    1db6:	55 95       	asr	r21
    1db8:	47 95       	ror	r20
    1dba:	8a 95       	dec	r24
    1dbc:	e2 f7       	brpl	.-8      	; 0x1db6 <MDIO_u8GetPinValue+0x94>
    1dbe:	ca 01       	movw	r24, r20
    1dc0:	81 70       	andi	r24, 0x01	; 1
    1dc2:	90 70       	andi	r25, 0x00	; 0
    1dc4:	00 97       	sbiw	r24, 0x00	; 0
    1dc6:	21 f4       	brne	.+8      	; 0x1dd0 <MDIO_u8GetPinValue+0xae>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1dc8:	ec 81       	ldd	r30, Y+4	; 0x04
    1dca:	fd 81       	ldd	r31, Y+5	; 0x05
    1dcc:	10 82       	st	Z, r1
    1dce:	a8 c0       	rjmp	.+336    	; 0x1f20 <MDIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINA_u8_REG,Copy_u8PinID)!=0)
    1dd0:	e9 e3       	ldi	r30, 0x39	; 57
    1dd2:	f0 e0       	ldi	r31, 0x00	; 0
    1dd4:	80 81       	ld	r24, Z
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	88 2f       	mov	r24, r24
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	a9 01       	movw	r20, r18
    1de2:	02 c0       	rjmp	.+4      	; 0x1de8 <MDIO_u8GetPinValue+0xc6>
    1de4:	55 95       	asr	r21
    1de6:	47 95       	ror	r20
    1de8:	8a 95       	dec	r24
    1dea:	e2 f7       	brpl	.-8      	; 0x1de4 <MDIO_u8GetPinValue+0xc2>
    1dec:	ca 01       	movw	r24, r20
    1dee:	81 70       	andi	r24, 0x01	; 1
    1df0:	90 70       	andi	r25, 0x00	; 0
    1df2:	88 23       	and	r24, r24
    1df4:	09 f4       	brne	.+2      	; 0x1df8 <MDIO_u8GetPinValue+0xd6>
    1df6:	94 c0       	rjmp	.+296    	; 0x1f20 <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1df8:	ec 81       	ldd	r30, Y+4	; 0x04
    1dfa:	fd 81       	ldd	r31, Y+5	; 0x05
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	80 83       	st	Z, r24
    1e00:	8f c0       	rjmp	.+286    	; 0x1f20 <MDIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTB: 
			   if(GET_BIT(PINB_u8_REG,Copy_u8PinID)== 0)
    1e02:	e6 e3       	ldi	r30, 0x36	; 54
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	28 2f       	mov	r18, r24
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0e:	88 2f       	mov	r24, r24
    1e10:	90 e0       	ldi	r25, 0x00	; 0
    1e12:	a9 01       	movw	r20, r18
    1e14:	02 c0       	rjmp	.+4      	; 0x1e1a <MDIO_u8GetPinValue+0xf8>
    1e16:	55 95       	asr	r21
    1e18:	47 95       	ror	r20
    1e1a:	8a 95       	dec	r24
    1e1c:	e2 f7       	brpl	.-8      	; 0x1e16 <MDIO_u8GetPinValue+0xf4>
    1e1e:	ca 01       	movw	r24, r20
    1e20:	81 70       	andi	r24, 0x01	; 1
    1e22:	90 70       	andi	r25, 0x00	; 0
    1e24:	00 97       	sbiw	r24, 0x00	; 0
    1e26:	21 f4       	brne	.+8      	; 0x1e30 <MDIO_u8GetPinValue+0x10e>
			    {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1e28:	ec 81       	ldd	r30, Y+4	; 0x04
    1e2a:	fd 81       	ldd	r31, Y+5	; 0x05
    1e2c:	10 82       	st	Z, r1
    1e2e:	78 c0       	rjmp	.+240    	; 0x1f20 <MDIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINB_u8_REG,Copy_u8PinID)!=0)
    1e30:	e6 e3       	ldi	r30, 0x36	; 54
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	80 81       	ld	r24, Z
    1e36:	28 2f       	mov	r18, r24
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3c:	88 2f       	mov	r24, r24
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	a9 01       	movw	r20, r18
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <MDIO_u8GetPinValue+0x126>
    1e44:	55 95       	asr	r21
    1e46:	47 95       	ror	r20
    1e48:	8a 95       	dec	r24
    1e4a:	e2 f7       	brpl	.-8      	; 0x1e44 <MDIO_u8GetPinValue+0x122>
    1e4c:	ca 01       	movw	r24, r20
    1e4e:	81 70       	andi	r24, 0x01	; 1
    1e50:	90 70       	andi	r25, 0x00	; 0
    1e52:	88 23       	and	r24, r24
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <MDIO_u8GetPinValue+0x136>
    1e56:	64 c0       	rjmp	.+200    	; 0x1f20 <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1e58:	ec 81       	ldd	r30, Y+4	; 0x04
    1e5a:	fd 81       	ldd	r31, Y+5	; 0x05
    1e5c:	81 e0       	ldi	r24, 0x01	; 1
    1e5e:	80 83       	st	Z, r24
    1e60:	5f c0       	rjmp	.+190    	; 0x1f20 <MDIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTC: 
			   if(GET_BIT(PINC_u8_REG,Copy_u8PinID)== 0)
    1e62:	e3 e3       	ldi	r30, 0x33	; 51
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	28 2f       	mov	r18, r24
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	88 2f       	mov	r24, r24
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	a9 01       	movw	r20, r18
    1e74:	02 c0       	rjmp	.+4      	; 0x1e7a <MDIO_u8GetPinValue+0x158>
    1e76:	55 95       	asr	r21
    1e78:	47 95       	ror	r20
    1e7a:	8a 95       	dec	r24
    1e7c:	e2 f7       	brpl	.-8      	; 0x1e76 <MDIO_u8GetPinValue+0x154>
    1e7e:	ca 01       	movw	r24, r20
    1e80:	81 70       	andi	r24, 0x01	; 1
    1e82:	90 70       	andi	r25, 0x00	; 0
    1e84:	00 97       	sbiw	r24, 0x00	; 0
    1e86:	21 f4       	brne	.+8      	; 0x1e90 <MDIO_u8GetPinValue+0x16e>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1e88:	ec 81       	ldd	r30, Y+4	; 0x04
    1e8a:	fd 81       	ldd	r31, Y+5	; 0x05
    1e8c:	10 82       	st	Z, r1
    1e8e:	48 c0       	rjmp	.+144    	; 0x1f20 <MDIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PINC_u8_REG,Copy_u8PinID)!=0)
    1e90:	e3 e3       	ldi	r30, 0x33	; 51
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	28 2f       	mov	r18, r24
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	88 2f       	mov	r24, r24
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	a9 01       	movw	r20, r18
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <MDIO_u8GetPinValue+0x186>
    1ea4:	55 95       	asr	r21
    1ea6:	47 95       	ror	r20
    1ea8:	8a 95       	dec	r24
    1eaa:	e2 f7       	brpl	.-8      	; 0x1ea4 <MDIO_u8GetPinValue+0x182>
    1eac:	ca 01       	movw	r24, r20
    1eae:	81 70       	andi	r24, 0x01	; 1
    1eb0:	90 70       	andi	r25, 0x00	; 0
    1eb2:	88 23       	and	r24, r24
    1eb4:	a9 f1       	breq	.+106    	; 0x1f20 <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1eb6:	ec 81       	ldd	r30, Y+4	; 0x04
    1eb8:	fd 81       	ldd	r31, Y+5	; 0x05
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	80 83       	st	Z, r24
    1ebe:	30 c0       	rjmp	.+96     	; 0x1f20 <MDIO_u8GetPinValue+0x1fe>
			   }
			break;
			case DIO_u8_PORTD: 
			   if(GET_BIT(PIND_u8_REG,Copy_u8PinID)== 0)
    1ec0:	e0 e3       	ldi	r30, 0x30	; 48
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	28 2f       	mov	r18, r24
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	8b 81       	ldd	r24, Y+3	; 0x03
    1ecc:	88 2f       	mov	r24, r24
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	a9 01       	movw	r20, r18
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <MDIO_u8GetPinValue+0x1b6>
    1ed4:	55 95       	asr	r21
    1ed6:	47 95       	ror	r20
    1ed8:	8a 95       	dec	r24
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <MDIO_u8GetPinValue+0x1b2>
    1edc:	ca 01       	movw	r24, r20
    1ede:	81 70       	andi	r24, 0x01	; 1
    1ee0:	90 70       	andi	r25, 0x00	; 0
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	21 f4       	brne	.+8      	; 0x1eee <MDIO_u8GetPinValue+0x1cc>
			   {
				   *Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1ee6:	ec 81       	ldd	r30, Y+4	; 0x04
    1ee8:	fd 81       	ldd	r31, Y+5	; 0x05
    1eea:	10 82       	st	Z, r1
    1eec:	19 c0       	rjmp	.+50     	; 0x1f20 <MDIO_u8GetPinValue+0x1fe>
			   }
			   else if(GET_BIT(PIND_u8_REG,Copy_u8PinID)!=0)
    1eee:	e0 e3       	ldi	r30, 0x30	; 48
    1ef0:	f0 e0       	ldi	r31, 0x00	; 0
    1ef2:	80 81       	ld	r24, Z
    1ef4:	28 2f       	mov	r18, r24
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	8b 81       	ldd	r24, Y+3	; 0x03
    1efa:	88 2f       	mov	r24, r24
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	a9 01       	movw	r20, r18
    1f00:	02 c0       	rjmp	.+4      	; 0x1f06 <MDIO_u8GetPinValue+0x1e4>
    1f02:	55 95       	asr	r21
    1f04:	47 95       	ror	r20
    1f06:	8a 95       	dec	r24
    1f08:	e2 f7       	brpl	.-8      	; 0x1f02 <MDIO_u8GetPinValue+0x1e0>
    1f0a:	ca 01       	movw	r24, r20
    1f0c:	81 70       	andi	r24, 0x01	; 1
    1f0e:	90 70       	andi	r25, 0x00	; 0
    1f10:	88 23       	and	r24, r24
    1f12:	31 f0       	breq	.+12     	; 0x1f20 <MDIO_u8GetPinValue+0x1fe>
			   {
				   *Copy_pu8ReturnedPinValue =DIO_u8_HIGH;
    1f14:	ec 81       	ldd	r30, Y+4	; 0x04
    1f16:	fd 81       	ldd	r31, Y+5	; 0x05
    1f18:	81 e0       	ldi	r24, 0x01	; 1
    1f1a:	80 83       	st	Z, r24
    1f1c:	01 c0       	rjmp	.+2      	; 0x1f20 <MDIO_u8GetPinValue+0x1fe>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    1f1e:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    1f20:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f22:	27 96       	adiw	r28, 0x07	; 7
    1f24:	0f b6       	in	r0, 0x3f	; 63
    1f26:	f8 94       	cli
    1f28:	de bf       	out	0x3e, r29	; 62
    1f2a:	0f be       	out	0x3f, r0	; 63
    1f2c:	cd bf       	out	0x3d, r28	; 61
    1f2e:	cf 91       	pop	r28
    1f30:	df 91       	pop	r29
    1f32:	08 95       	ret

00001f34 <MDIO_u8SetPortDirection>:

/*******************************************************************************************************/
/*                                  DIO Set Port Direction Function                                    */
/*******************************************************************************************************/
u8 MDIO_u8SetPortDirection(u8 Copy_u8PortID, u8 Copy_u8PortDirection )
{
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	2d 97       	sbiw	r28, 0x0d	; 13
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	8a 83       	std	Y+2, r24	; 0x02
    1f4a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    1f4c:	81 e0       	ldi	r24, 0x01	; 1
    1f4e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8PortID <= DIO_u8_PORTD) && ((Copy_u8PortDirection == DIO_u8_OUTPUT) || (Copy_u8PortDirection == DIO_u8_INPUT)))
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	84 30       	cpi	r24, 0x04	; 4
    1f54:	08 f0       	brcs	.+2      	; 0x1f58 <MDIO_u8SetPortDirection+0x24>
    1f56:	87 c0       	rjmp	.+270    	; 0x2066 <MDIO_u8SetPortDirection+0x132>
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	81 30       	cpi	r24, 0x01	; 1
    1f5c:	21 f0       	breq	.+8      	; 0x1f66 <MDIO_u8SetPortDirection+0x32>
    1f5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f60:	88 23       	and	r24, r24
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <MDIO_u8SetPortDirection+0x32>
    1f64:	80 c0       	rjmp	.+256    	; 0x2066 <MDIO_u8SetPortDirection+0x132>
	{
		switch(Copy_u8PortID)
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	3d 87       	std	Y+13, r19	; 0x0d
    1f6e:	2c 87       	std	Y+12, r18	; 0x0c
    1f70:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f72:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f74:	81 30       	cpi	r24, 0x01	; 1
    1f76:	91 05       	cpc	r25, r1
    1f78:	71 f1       	breq	.+92     	; 0x1fd6 <MDIO_u8SetPortDirection+0xa2>
    1f7a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f7c:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f7e:	22 30       	cpi	r18, 0x02	; 2
    1f80:	31 05       	cpc	r19, r1
    1f82:	2c f4       	brge	.+10     	; 0x1f8e <MDIO_u8SetPortDirection+0x5a>
    1f84:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f86:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	69 f0       	breq	.+26     	; 0x1fa6 <MDIO_u8SetPortDirection+0x72>
    1f8c:	6d c0       	rjmp	.+218    	; 0x2068 <MDIO_u8SetPortDirection+0x134>
    1f8e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f90:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f92:	22 30       	cpi	r18, 0x02	; 2
    1f94:	31 05       	cpc	r19, r1
    1f96:	b9 f1       	breq	.+110    	; 0x2006 <MDIO_u8SetPortDirection+0xd2>
    1f98:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f9a:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f9c:	83 30       	cpi	r24, 0x03	; 3
    1f9e:	91 05       	cpc	r25, r1
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <MDIO_u8SetPortDirection+0x70>
    1fa2:	49 c0       	rjmp	.+146    	; 0x2036 <MDIO_u8SetPortDirection+0x102>
    1fa4:	61 c0       	rjmp	.+194    	; 0x2068 <MDIO_u8SetPortDirection+0x134>
		{
			case DIO_u8_PORTA:
			switch(Copy_u8PortDirection)
    1fa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa8:	28 2f       	mov	r18, r24
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	3b 87       	std	Y+11, r19	; 0x0b
    1fae:	2a 87       	std	Y+10, r18	; 0x0a
    1fb0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fb2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fb4:	00 97       	sbiw	r24, 0x00	; 0
    1fb6:	31 f0       	breq	.+12     	; 0x1fc4 <MDIO_u8SetPortDirection+0x90>
    1fb8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1fba:	3b 85       	ldd	r19, Y+11	; 0x0b
    1fbc:	21 30       	cpi	r18, 0x01	; 1
    1fbe:	31 05       	cpc	r19, r1
    1fc0:	29 f0       	breq	.+10     	; 0x1fcc <MDIO_u8SetPortDirection+0x98>
    1fc2:	52 c0       	rjmp	.+164    	; 0x2068 <MDIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRA_u8_REG = 0x00;break;
    1fc4:	ea e3       	ldi	r30, 0x3A	; 58
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	10 82       	st	Z, r1
    1fca:	4e c0       	rjmp	.+156    	; 0x2068 <MDIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRA_u8_REG = 0xFF;break;
    1fcc:	ea e3       	ldi	r30, 0x3A	; 58
    1fce:	f0 e0       	ldi	r31, 0x00	; 0
    1fd0:	8f ef       	ldi	r24, 0xFF	; 255
    1fd2:	80 83       	st	Z, r24
    1fd4:	49 c0       	rjmp	.+146    	; 0x2068 <MDIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTB:
			switch(Copy_u8PortDirection)
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	28 2f       	mov	r18, r24
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	39 87       	std	Y+9, r19	; 0x09
    1fde:	28 87       	std	Y+8, r18	; 0x08
    1fe0:	88 85       	ldd	r24, Y+8	; 0x08
    1fe2:	99 85       	ldd	r25, Y+9	; 0x09
    1fe4:	00 97       	sbiw	r24, 0x00	; 0
    1fe6:	31 f0       	breq	.+12     	; 0x1ff4 <MDIO_u8SetPortDirection+0xc0>
    1fe8:	28 85       	ldd	r18, Y+8	; 0x08
    1fea:	39 85       	ldd	r19, Y+9	; 0x09
    1fec:	21 30       	cpi	r18, 0x01	; 1
    1fee:	31 05       	cpc	r19, r1
    1ff0:	29 f0       	breq	.+10     	; 0x1ffc <MDIO_u8SetPortDirection+0xc8>
    1ff2:	3a c0       	rjmp	.+116    	; 0x2068 <MDIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRB_u8_REG = 0x00;break;
    1ff4:	e7 e3       	ldi	r30, 0x37	; 55
    1ff6:	f0 e0       	ldi	r31, 0x00	; 0
    1ff8:	10 82       	st	Z, r1
    1ffa:	36 c0       	rjmp	.+108    	; 0x2068 <MDIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRB_u8_REG = 0xFF;break;
    1ffc:	e7 e3       	ldi	r30, 0x37	; 55
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	8f ef       	ldi	r24, 0xFF	; 255
    2002:	80 83       	st	Z, r24
    2004:	31 c0       	rjmp	.+98     	; 0x2068 <MDIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTC:
			switch(Copy_u8PortDirection)
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	28 2f       	mov	r18, r24
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	3f 83       	std	Y+7, r19	; 0x07
    200e:	2e 83       	std	Y+6, r18	; 0x06
    2010:	8e 81       	ldd	r24, Y+6	; 0x06
    2012:	9f 81       	ldd	r25, Y+7	; 0x07
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	31 f0       	breq	.+12     	; 0x2024 <MDIO_u8SetPortDirection+0xf0>
    2018:	2e 81       	ldd	r18, Y+6	; 0x06
    201a:	3f 81       	ldd	r19, Y+7	; 0x07
    201c:	21 30       	cpi	r18, 0x01	; 1
    201e:	31 05       	cpc	r19, r1
    2020:	29 f0       	breq	.+10     	; 0x202c <MDIO_u8SetPortDirection+0xf8>
    2022:	22 c0       	rjmp	.+68     	; 0x2068 <MDIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRC_u8_REG = 0x00;break;
    2024:	e4 e3       	ldi	r30, 0x34	; 52
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	10 82       	st	Z, r1
    202a:	1e c0       	rjmp	.+60     	; 0x2068 <MDIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRC_u8_REG = 0xFF;break;
    202c:	e4 e3       	ldi	r30, 0x34	; 52
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	8f ef       	ldi	r24, 0xFF	; 255
    2032:	80 83       	st	Z, r24
    2034:	19 c0       	rjmp	.+50     	; 0x2068 <MDIO_u8SetPortDirection+0x134>
			}
			break;
			case DIO_u8_PORTD:
			switch(Copy_u8PortDirection)
    2036:	8b 81       	ldd	r24, Y+3	; 0x03
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	3d 83       	std	Y+5, r19	; 0x05
    203e:	2c 83       	std	Y+4, r18	; 0x04
    2040:	8c 81       	ldd	r24, Y+4	; 0x04
    2042:	9d 81       	ldd	r25, Y+5	; 0x05
    2044:	00 97       	sbiw	r24, 0x00	; 0
    2046:	31 f0       	breq	.+12     	; 0x2054 <MDIO_u8SetPortDirection+0x120>
    2048:	2c 81       	ldd	r18, Y+4	; 0x04
    204a:	3d 81       	ldd	r19, Y+5	; 0x05
    204c:	21 30       	cpi	r18, 0x01	; 1
    204e:	31 05       	cpc	r19, r1
    2050:	29 f0       	breq	.+10     	; 0x205c <MDIO_u8SetPortDirection+0x128>
    2052:	0a c0       	rjmp	.+20     	; 0x2068 <MDIO_u8SetPortDirection+0x134>
			{
				case DIO_u8_INPUT: DDRD_u8_REG = 0x00;break;
    2054:	e1 e3       	ldi	r30, 0x31	; 49
    2056:	f0 e0       	ldi	r31, 0x00	; 0
    2058:	10 82       	st	Z, r1
    205a:	06 c0       	rjmp	.+12     	; 0x2068 <MDIO_u8SetPortDirection+0x134>
				case DIO_u8_OUTPUT:DDRD_u8_REG = 0xFF;break;
    205c:	e1 e3       	ldi	r30, 0x31	; 49
    205e:	f0 e0       	ldi	r31, 0x00	; 0
    2060:	8f ef       	ldi	r24, 0xFF	; 255
    2062:	80 83       	st	Z, r24
    2064:	01 c0       	rjmp	.+2      	; 0x2068 <MDIO_u8SetPortDirection+0x134>
			break;
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    2066:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    2068:	89 81       	ldd	r24, Y+1	; 0x01
}
    206a:	2d 96       	adiw	r28, 0x0d	; 13
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	cf 91       	pop	r28
    2078:	df 91       	pop	r29
    207a:	08 95       	ret

0000207c <MDIO_u8SetPortValue>:

/*******************************************************************************************************/
/*                                  DIO Set Port Value Function                                        */
/*******************************************************************************************************/
u8 MDIO_u8SetPortValue    (u8 Copy_u8PortID, u8 Copy_u8PortValue)
{
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	00 d0       	rcall	.+0      	; 0x2082 <MDIO_u8SetPortValue+0x6>
    2082:	00 d0       	rcall	.+0      	; 0x2084 <MDIO_u8SetPortValue+0x8>
    2084:	0f 92       	push	r0
    2086:	cd b7       	in	r28, 0x3d	; 61
    2088:	de b7       	in	r29, 0x3e	; 62
    208a:	8a 83       	std	Y+2, r24	; 0x02
    208c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortID)
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	28 2f       	mov	r18, r24
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	3d 83       	std	Y+5, r19	; 0x05
    209a:	2c 83       	std	Y+4, r18	; 0x04
    209c:	8c 81       	ldd	r24, Y+4	; 0x04
    209e:	9d 81       	ldd	r25, Y+5	; 0x05
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	91 05       	cpc	r25, r1
    20a4:	d1 f0       	breq	.+52     	; 0x20da <MDIO_u8SetPortValue+0x5e>
    20a6:	2c 81       	ldd	r18, Y+4	; 0x04
    20a8:	3d 81       	ldd	r19, Y+5	; 0x05
    20aa:	22 30       	cpi	r18, 0x02	; 2
    20ac:	31 05       	cpc	r19, r1
    20ae:	2c f4       	brge	.+10     	; 0x20ba <MDIO_u8SetPortValue+0x3e>
    20b0:	8c 81       	ldd	r24, Y+4	; 0x04
    20b2:	9d 81       	ldd	r25, Y+5	; 0x05
    20b4:	00 97       	sbiw	r24, 0x00	; 0
    20b6:	61 f0       	breq	.+24     	; 0x20d0 <MDIO_u8SetPortValue+0x54>
    20b8:	1f c0       	rjmp	.+62     	; 0x20f8 <MDIO_u8SetPortValue+0x7c>
    20ba:	2c 81       	ldd	r18, Y+4	; 0x04
    20bc:	3d 81       	ldd	r19, Y+5	; 0x05
    20be:	22 30       	cpi	r18, 0x02	; 2
    20c0:	31 05       	cpc	r19, r1
    20c2:	81 f0       	breq	.+32     	; 0x20e4 <MDIO_u8SetPortValue+0x68>
    20c4:	8c 81       	ldd	r24, Y+4	; 0x04
    20c6:	9d 81       	ldd	r25, Y+5	; 0x05
    20c8:	83 30       	cpi	r24, 0x03	; 3
    20ca:	91 05       	cpc	r25, r1
    20cc:	81 f0       	breq	.+32     	; 0x20ee <MDIO_u8SetPortValue+0x72>
    20ce:	14 c0       	rjmp	.+40     	; 0x20f8 <MDIO_u8SetPortValue+0x7c>
	{
		case DIO_u8_PORTA:PORTA_u8_REG = Copy_u8PortValue; break;
    20d0:	eb e3       	ldi	r30, 0x3B	; 59
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	80 83       	st	Z, r24
    20d8:	10 c0       	rjmp	.+32     	; 0x20fa <MDIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTB:PORTB_u8_REG = Copy_u8PortValue; break;
    20da:	e8 e3       	ldi	r30, 0x38	; 56
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	80 83       	st	Z, r24
    20e2:	0b c0       	rjmp	.+22     	; 0x20fa <MDIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTC:PORTC_u8_REG = Copy_u8PortValue; break;
    20e4:	e5 e3       	ldi	r30, 0x35	; 53
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	80 83       	st	Z, r24
    20ec:	06 c0       	rjmp	.+12     	; 0x20fa <MDIO_u8SetPortValue+0x7e>
		case DIO_u8_PORTD:PORTD_u8_REG = Copy_u8PortValue; break;
    20ee:	e2 e3       	ldi	r30, 0x32	; 50
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	8b 81       	ldd	r24, Y+3	; 0x03
    20f4:	80 83       	st	Z, r24
    20f6:	01 c0       	rjmp	.+2      	; 0x20fa <MDIO_u8SetPortValue+0x7e>
		default : Local_u8ReturnState = STD_TYPES_NOK;
    20f8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	cf 91       	pop	r28
    2108:	df 91       	pop	r29
    210a:	08 95       	ret

0000210c <MDIO_u8Set4PinsValue>:

/*******************************************************************************************************/
/*                                  DIO Set 4 Pins Value Function                                      */
/*******************************************************************************************************/
u8 MDIO_u8Set4PinsValue    (u8 Copy_u8PortID, u8 Copy_u8PinStart, u8 Copy_u8PortValue)
{
    210c:	df 93       	push	r29
    210e:	cf 93       	push	r28
    2110:	00 d0       	rcall	.+0      	; 0x2112 <MDIO_u8Set4PinsValue+0x6>
    2112:	00 d0       	rcall	.+0      	; 0x2114 <MDIO_u8Set4PinsValue+0x8>
    2114:	00 d0       	rcall	.+0      	; 0x2116 <MDIO_u8Set4PinsValue+0xa>
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	8a 83       	std	Y+2, r24	; 0x02
    211c:	6b 83       	std	Y+3, r22	; 0x03
    211e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ReturnState = STD_TYPES_OK;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PinStart<=4)
    2124:	8b 81       	ldd	r24, Y+3	; 0x03
    2126:	85 30       	cpi	r24, 0x05	; 5
    2128:	08 f0       	brcs	.+2      	; 0x212c <MDIO_u8Set4PinsValue+0x20>
    212a:	c7 c0       	rjmp	.+398    	; 0x22ba <MDIO_u8Set4PinsValue+0x1ae>
	{
		switch(Copy_u8PortID)
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	28 2f       	mov	r18, r24
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	3e 83       	std	Y+6, r19	; 0x06
    2134:	2d 83       	std	Y+5, r18	; 0x05
    2136:	6d 81       	ldd	r22, Y+5	; 0x05
    2138:	7e 81       	ldd	r23, Y+6	; 0x06
    213a:	61 30       	cpi	r22, 0x01	; 1
    213c:	71 05       	cpc	r23, r1
    213e:	09 f4       	brne	.+2      	; 0x2142 <MDIO_u8Set4PinsValue+0x36>
    2140:	41 c0       	rjmp	.+130    	; 0x21c4 <MDIO_u8Set4PinsValue+0xb8>
    2142:	8d 81       	ldd	r24, Y+5	; 0x05
    2144:	9e 81       	ldd	r25, Y+6	; 0x06
    2146:	82 30       	cpi	r24, 0x02	; 2
    2148:	91 05       	cpc	r25, r1
    214a:	34 f4       	brge	.+12     	; 0x2158 <MDIO_u8Set4PinsValue+0x4c>
    214c:	2d 81       	ldd	r18, Y+5	; 0x05
    214e:	3e 81       	ldd	r19, Y+6	; 0x06
    2150:	21 15       	cp	r18, r1
    2152:	31 05       	cpc	r19, r1
    2154:	71 f0       	breq	.+28     	; 0x2172 <MDIO_u8Set4PinsValue+0x66>
    2156:	b2 c0       	rjmp	.+356    	; 0x22bc <MDIO_u8Set4PinsValue+0x1b0>
    2158:	6d 81       	ldd	r22, Y+5	; 0x05
    215a:	7e 81       	ldd	r23, Y+6	; 0x06
    215c:	62 30       	cpi	r22, 0x02	; 2
    215e:	71 05       	cpc	r23, r1
    2160:	09 f4       	brne	.+2      	; 0x2164 <MDIO_u8Set4PinsValue+0x58>
    2162:	59 c0       	rjmp	.+178    	; 0x2216 <MDIO_u8Set4PinsValue+0x10a>
    2164:	8d 81       	ldd	r24, Y+5	; 0x05
    2166:	9e 81       	ldd	r25, Y+6	; 0x06
    2168:	83 30       	cpi	r24, 0x03	; 3
    216a:	91 05       	cpc	r25, r1
    216c:	09 f4       	brne	.+2      	; 0x2170 <MDIO_u8Set4PinsValue+0x64>
    216e:	7c c0       	rjmp	.+248    	; 0x2268 <MDIO_u8Set4PinsValue+0x15c>
    2170:	a5 c0       	rjmp	.+330    	; 0x22bc <MDIO_u8Set4PinsValue+0x1b0>
		{
		case DIO_u8_PORTA:
			PORTA_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    2172:	ab e3       	ldi	r26, 0x3B	; 59
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	eb e3       	ldi	r30, 0x3B	; 59
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	48 2f       	mov	r20, r24
    217e:	8b 81       	ldd	r24, Y+3	; 0x03
    2180:	28 2f       	mov	r18, r24
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	8f e0       	ldi	r24, 0x0F	; 15
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	02 c0       	rjmp	.+4      	; 0x218e <MDIO_u8Set4PinsValue+0x82>
    218a:	88 0f       	add	r24, r24
    218c:	99 1f       	adc	r25, r25
    218e:	2a 95       	dec	r18
    2190:	e2 f7       	brpl	.-8      	; 0x218a <MDIO_u8Set4PinsValue+0x7e>
    2192:	80 95       	com	r24
    2194:	84 23       	and	r24, r20
    2196:	8c 93       	st	X, r24
			PORTA_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    2198:	ab e3       	ldi	r26, 0x3B	; 59
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	eb e3       	ldi	r30, 0x3B	; 59
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	48 2f       	mov	r20, r24
    21a4:	8c 81       	ldd	r24, Y+4	; 0x04
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	8b 81       	ldd	r24, Y+3	; 0x03
    21ac:	88 2f       	mov	r24, r24
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	b9 01       	movw	r22, r18
    21b2:	02 c0       	rjmp	.+4      	; 0x21b8 <MDIO_u8Set4PinsValue+0xac>
    21b4:	66 0f       	add	r22, r22
    21b6:	77 1f       	adc	r23, r23
    21b8:	8a 95       	dec	r24
    21ba:	e2 f7       	brpl	.-8      	; 0x21b4 <MDIO_u8Set4PinsValue+0xa8>
    21bc:	cb 01       	movw	r24, r22
    21be:	84 2b       	or	r24, r20
    21c0:	8c 93       	st	X, r24
    21c2:	7c c0       	rjmp	.+248    	; 0x22bc <MDIO_u8Set4PinsValue+0x1b0>
			break;
		case DIO_u8_PORTB:
			PORTB_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    21c4:	a8 e3       	ldi	r26, 0x38	; 56
    21c6:	b0 e0       	ldi	r27, 0x00	; 0
    21c8:	e8 e3       	ldi	r30, 0x38	; 56
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	48 2f       	mov	r20, r24
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	28 2f       	mov	r18, r24
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	8f e0       	ldi	r24, 0x0F	; 15
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	02 c0       	rjmp	.+4      	; 0x21e0 <MDIO_u8Set4PinsValue+0xd4>
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	2a 95       	dec	r18
    21e2:	e2 f7       	brpl	.-8      	; 0x21dc <MDIO_u8Set4PinsValue+0xd0>
    21e4:	80 95       	com	r24
    21e6:	84 23       	and	r24, r20
    21e8:	8c 93       	st	X, r24
			PORTB_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    21ea:	a8 e3       	ldi	r26, 0x38	; 56
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e8 e3       	ldi	r30, 0x38	; 56
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	48 2f       	mov	r20, r24
    21f6:	8c 81       	ldd	r24, Y+4	; 0x04
    21f8:	28 2f       	mov	r18, r24
    21fa:	30 e0       	ldi	r19, 0x00	; 0
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	88 2f       	mov	r24, r24
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	b9 01       	movw	r22, r18
    2204:	02 c0       	rjmp	.+4      	; 0x220a <MDIO_u8Set4PinsValue+0xfe>
    2206:	66 0f       	add	r22, r22
    2208:	77 1f       	adc	r23, r23
    220a:	8a 95       	dec	r24
    220c:	e2 f7       	brpl	.-8      	; 0x2206 <MDIO_u8Set4PinsValue+0xfa>
    220e:	cb 01       	movw	r24, r22
    2210:	84 2b       	or	r24, r20
    2212:	8c 93       	st	X, r24
    2214:	53 c0       	rjmp	.+166    	; 0x22bc <MDIO_u8Set4PinsValue+0x1b0>
			break;
		case DIO_u8_PORTC:
			PORTC_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    2216:	a5 e3       	ldi	r26, 0x35	; 53
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	e5 e3       	ldi	r30, 0x35	; 53
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	48 2f       	mov	r20, r24
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	28 2f       	mov	r18, r24
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	8f e0       	ldi	r24, 0x0F	; 15
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	02 c0       	rjmp	.+4      	; 0x2232 <MDIO_u8Set4PinsValue+0x126>
    222e:	88 0f       	add	r24, r24
    2230:	99 1f       	adc	r25, r25
    2232:	2a 95       	dec	r18
    2234:	e2 f7       	brpl	.-8      	; 0x222e <MDIO_u8Set4PinsValue+0x122>
    2236:	80 95       	com	r24
    2238:	84 23       	and	r24, r20
    223a:	8c 93       	st	X, r24
			PORTC_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    223c:	a5 e3       	ldi	r26, 0x35	; 53
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	e5 e3       	ldi	r30, 0x35	; 53
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	48 2f       	mov	r20, r24
    2248:	8c 81       	ldd	r24, Y+4	; 0x04
    224a:	28 2f       	mov	r18, r24
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	88 2f       	mov	r24, r24
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	b9 01       	movw	r22, r18
    2256:	02 c0       	rjmp	.+4      	; 0x225c <MDIO_u8Set4PinsValue+0x150>
    2258:	66 0f       	add	r22, r22
    225a:	77 1f       	adc	r23, r23
    225c:	8a 95       	dec	r24
    225e:	e2 f7       	brpl	.-8      	; 0x2258 <MDIO_u8Set4PinsValue+0x14c>
    2260:	cb 01       	movw	r24, r22
    2262:	84 2b       	or	r24, r20
    2264:	8c 93       	st	X, r24
    2266:	2a c0       	rjmp	.+84     	; 0x22bc <MDIO_u8Set4PinsValue+0x1b0>
			break;
		case DIO_u8_PORTD:

			PORTD_u8_REG&=(~(0b00001111<<Copy_u8PinStart));
    2268:	a2 e3       	ldi	r26, 0x32	; 50
    226a:	b0 e0       	ldi	r27, 0x00	; 0
    226c:	e2 e3       	ldi	r30, 0x32	; 50
    226e:	f0 e0       	ldi	r31, 0x00	; 0
    2270:	80 81       	ld	r24, Z
    2272:	48 2f       	mov	r20, r24
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	28 2f       	mov	r18, r24
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	8f e0       	ldi	r24, 0x0F	; 15
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	02 c0       	rjmp	.+4      	; 0x2284 <MDIO_u8Set4PinsValue+0x178>
    2280:	88 0f       	add	r24, r24
    2282:	99 1f       	adc	r25, r25
    2284:	2a 95       	dec	r18
    2286:	e2 f7       	brpl	.-8      	; 0x2280 <MDIO_u8Set4PinsValue+0x174>
    2288:	80 95       	com	r24
    228a:	84 23       	and	r24, r20
    228c:	8c 93       	st	X, r24
			PORTD_u8_REG|=(Copy_u8PortValue<<Copy_u8PinStart);
    228e:	a2 e3       	ldi	r26, 0x32	; 50
    2290:	b0 e0       	ldi	r27, 0x00	; 0
    2292:	e2 e3       	ldi	r30, 0x32	; 50
    2294:	f0 e0       	ldi	r31, 0x00	; 0
    2296:	80 81       	ld	r24, Z
    2298:	48 2f       	mov	r20, r24
    229a:	8c 81       	ldd	r24, Y+4	; 0x04
    229c:	28 2f       	mov	r18, r24
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	88 2f       	mov	r24, r24
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	b9 01       	movw	r22, r18
    22a8:	02 c0       	rjmp	.+4      	; 0x22ae <MDIO_u8Set4PinsValue+0x1a2>
    22aa:	66 0f       	add	r22, r22
    22ac:	77 1f       	adc	r23, r23
    22ae:	8a 95       	dec	r24
    22b0:	e2 f7       	brpl	.-8      	; 0x22aa <MDIO_u8Set4PinsValue+0x19e>
    22b2:	cb 01       	movw	r24, r22
    22b4:	84 2b       	or	r24, r20
    22b6:	8c 93       	st	X, r24
    22b8:	01 c0       	rjmp	.+2      	; 0x22bc <MDIO_u8Set4PinsValue+0x1b0>

		}
	}
	else
		{
			Local_u8ReturnState = STD_TYPES_NOK;
    22ba:	19 82       	std	Y+1, r1	; 0x01
		}
	return Local_u8ReturnState;
    22bc:	89 81       	ldd	r24, Y+1	; 0x01

}
    22be:	26 96       	adiw	r28, 0x06	; 6
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	08 95       	ret

000022d0 <MDIO_u8GetPortValue>:

/*******************************************************************************************************/
/*                                  DIO Get Port Value Function                                        */
/*******************************************************************************************************/
u8 MDIO_u8GetPortValue    (u8 Copy_u8PortID, u8 * Copy_pu8ReturnedPortValue)
{
    22d0:	df 93       	push	r29
    22d2:	cf 93       	push	r28
    22d4:	00 d0       	rcall	.+0      	; 0x22d6 <MDIO_u8GetPortValue+0x6>
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <MDIO_u8GetPortValue+0x8>
    22d8:	00 d0       	rcall	.+0      	; 0x22da <MDIO_u8GetPortValue+0xa>
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	8a 83       	std	Y+2, r24	; 0x02
    22e0:	7c 83       	std	Y+4, r23	; 0x04
    22e2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReturnState = STD_TYPES_OK;
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8ReturnedPortValue != NULL)
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	9c 81       	ldd	r25, Y+4	; 0x04
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	e9 f1       	breq	.+122    	; 0x236a <MDIO_u8GetPortValue+0x9a>
	{
		switch(Copy_u8PortID)
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	3e 83       	std	Y+6, r19	; 0x06
    22f8:	2d 83       	std	Y+5, r18	; 0x05
    22fa:	8d 81       	ldd	r24, Y+5	; 0x05
    22fc:	9e 81       	ldd	r25, Y+6	; 0x06
    22fe:	81 30       	cpi	r24, 0x01	; 1
    2300:	91 05       	cpc	r25, r1
    2302:	e1 f0       	breq	.+56     	; 0x233c <MDIO_u8GetPortValue+0x6c>
    2304:	2d 81       	ldd	r18, Y+5	; 0x05
    2306:	3e 81       	ldd	r19, Y+6	; 0x06
    2308:	22 30       	cpi	r18, 0x02	; 2
    230a:	31 05       	cpc	r19, r1
    230c:	2c f4       	brge	.+10     	; 0x2318 <MDIO_u8GetPortValue+0x48>
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	9e 81       	ldd	r25, Y+6	; 0x06
    2312:	00 97       	sbiw	r24, 0x00	; 0
    2314:	61 f0       	breq	.+24     	; 0x232e <MDIO_u8GetPortValue+0x5e>
    2316:	27 c0       	rjmp	.+78     	; 0x2366 <MDIO_u8GetPortValue+0x96>
    2318:	2d 81       	ldd	r18, Y+5	; 0x05
    231a:	3e 81       	ldd	r19, Y+6	; 0x06
    231c:	22 30       	cpi	r18, 0x02	; 2
    231e:	31 05       	cpc	r19, r1
    2320:	a1 f0       	breq	.+40     	; 0x234a <MDIO_u8GetPortValue+0x7a>
    2322:	8d 81       	ldd	r24, Y+5	; 0x05
    2324:	9e 81       	ldd	r25, Y+6	; 0x06
    2326:	83 30       	cpi	r24, 0x03	; 3
    2328:	91 05       	cpc	r25, r1
    232a:	b1 f0       	breq	.+44     	; 0x2358 <MDIO_u8GetPortValue+0x88>
    232c:	1c c0       	rjmp	.+56     	; 0x2366 <MDIO_u8GetPortValue+0x96>
		{
		   case DIO_u8_PORTA: *Copy_pu8ReturnedPortValue = PINA_u8_REG; break;
    232e:	e9 e3       	ldi	r30, 0x39	; 57
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	eb 81       	ldd	r30, Y+3	; 0x03
    2336:	fc 81       	ldd	r31, Y+4	; 0x04
    2338:	80 83       	st	Z, r24
    233a:	18 c0       	rjmp	.+48     	; 0x236c <MDIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTB: *Copy_pu8ReturnedPortValue = PINB_u8_REG; break;
    233c:	e6 e3       	ldi	r30, 0x36	; 54
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	eb 81       	ldd	r30, Y+3	; 0x03
    2344:	fc 81       	ldd	r31, Y+4	; 0x04
    2346:	80 83       	st	Z, r24
    2348:	11 c0       	rjmp	.+34     	; 0x236c <MDIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTC: *Copy_pu8ReturnedPortValue = PINC_u8_REG; break;
    234a:	e3 e3       	ldi	r30, 0x33	; 51
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 81       	ld	r24, Z
    2350:	eb 81       	ldd	r30, Y+3	; 0x03
    2352:	fc 81       	ldd	r31, Y+4	; 0x04
    2354:	80 83       	st	Z, r24
    2356:	0a c0       	rjmp	.+20     	; 0x236c <MDIO_u8GetPortValue+0x9c>
		   case DIO_u8_PORTD: *Copy_pu8ReturnedPortValue = PIND_u8_REG; break;
    2358:	e0 e3       	ldi	r30, 0x30	; 48
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	80 81       	ld	r24, Z
    235e:	eb 81       	ldd	r30, Y+3	; 0x03
    2360:	fc 81       	ldd	r31, Y+4	; 0x04
    2362:	80 83       	st	Z, r24
    2364:	03 c0       	rjmp	.+6      	; 0x236c <MDIO_u8GetPortValue+0x9c>
		   default : Local_u8ReturnState = STD_TYPES_NOK;
    2366:	19 82       	std	Y+1, r1	; 0x01
    2368:	01 c0       	rjmp	.+2      	; 0x236c <MDIO_u8GetPortValue+0x9c>
		}
	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    236a:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    236c:	89 81       	ldd	r24, Y+1	; 0x01
}
    236e:	26 96       	adiw	r28, 0x06	; 6
    2370:	0f b6       	in	r0, 0x3f	; 63
    2372:	f8 94       	cli
    2374:	de bf       	out	0x3e, r29	; 62
    2376:	0f be       	out	0x3f, r0	; 63
    2378:	cd bf       	out	0x3d, r28	; 61
    237a:	cf 91       	pop	r28
    237c:	df 91       	pop	r29
    237e:	08 95       	ret

00002380 <MADC_voidInit>:

/*******************************************************************************************************/
/*                                    ADC Initialization Function                                      */
/*******************************************************************************************************/
void MADC_voidInit(void)
{
    2380:	df 93       	push	r29
    2382:	cf 93       	push	r28
    2384:	cd b7       	in	r28, 0x3d	; 61
    2386:	de b7       	in	r29, 0x3e	; 62
	   CLR_BIT(ADC_u8_ADMUX_REG,7);
	   CLR_BIT(ADC_u8_ADMUX_REG,6);
	}
#elif(ADC_VREF == AVCC)
	{
	    CLR_BIT(ADC_u8_ADMUX_REG,7);
    2388:	a7 e2       	ldi	r26, 0x27	; 39
    238a:	b0 e0       	ldi	r27, 0x00	; 0
    238c:	e7 e2       	ldi	r30, 0x27	; 39
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	8f 77       	andi	r24, 0x7F	; 127
    2394:	8c 93       	st	X, r24
	    SET_BIT(ADC_u8_ADMUX_REG,6);
    2396:	a7 e2       	ldi	r26, 0x27	; 39
    2398:	b0 e0       	ldi	r27, 0x00	; 0
    239a:	e7 e2       	ldi	r30, 0x27	; 39
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	80 81       	ld	r24, Z
    23a0:	80 64       	ori	r24, 0x40	; 64
    23a2:	8c 93       	st	X, r24
#endif

	/* ADC Adjust Result */
#if(ADJUST_RESULT == RIGHT_ADJUST)
	{
		CLR_BIT(ADC_u8_ADMUX_REG,5);
    23a4:	a7 e2       	ldi	r26, 0x27	; 39
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	e7 e2       	ldi	r30, 0x27	; 39
    23aa:	f0 e0       	ldi	r31, 0x00	; 0
    23ac:	80 81       	ld	r24, Z
    23ae:	8f 7d       	andi	r24, 0xDF	; 223
    23b0:	8c 93       	st	X, r24
	{
		SET_BIT(ADC_u8_ADCSRA_REG,5);
	}
#elif(ADC_AUTO_TRIG_MODE == ADC_AUTO_TRIG_DISABLE)
	{
		CLR_BIT(ADC_u8_ADCSRA_REG,5);
    23b2:	a6 e2       	ldi	r26, 0x26	; 38
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	e6 e2       	ldi	r30, 0x26	; 38
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	8f 7d       	andi	r24, 0xDF	; 223
    23be:	8c 93       	st	X, r24
		CLR_BIT(ADC_u8_ADCSRA_REG,1);
	    SET_BIT(ADC_u8_ADCSRA_REG,0);
	}
#elif(ADC_CLOCK == CLOCK_64)
	{
		SET_BIT(ADC_u8_ADCSRA_REG,2);
    23c0:	a6 e2       	ldi	r26, 0x26	; 38
    23c2:	b0 e0       	ldi	r27, 0x00	; 0
    23c4:	e6 e2       	ldi	r30, 0x26	; 38
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	84 60       	ori	r24, 0x04	; 4
    23cc:	8c 93       	st	X, r24
		SET_BIT(ADC_u8_ADCSRA_REG,1);
    23ce:	a6 e2       	ldi	r26, 0x26	; 38
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	e6 e2       	ldi	r30, 0x26	; 38
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	82 60       	ori	r24, 0x02	; 2
    23da:	8c 93       	st	X, r24
	    CLR_BIT(ADC_u8_ADCSRA_REG,0);
    23dc:	a6 e2       	ldi	r26, 0x26	; 38
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e6 e2       	ldi	r30, 0x26	; 38
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	8e 7f       	andi	r24, 0xFE	; 254
    23e8:	8c 93       	st	X, r24
#endif

	/* ADC Enable Peripheral */
#if(ADC_MODE == ADC_ENABLE)
	{
		SET_BIT(ADC_u8_ADCSRA_REG,7);
    23ea:	a6 e2       	ldi	r26, 0x26	; 38
    23ec:	b0 e0       	ldi	r27, 0x00	; 0
    23ee:	e6 e2       	ldi	r30, 0x26	; 38
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	80 68       	ori	r24, 0x80	; 128
    23f6:	8c 93       	st	X, r24
#elif(ADC_MODE == ADC_DISABLE)
	{
		CLR_BIT(ADC_u8_ADCSRA_REG,7);
	}
#endif
}
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <MADC_u8GetDigitalValueSynchNonBlocking>:

/*******************************************************************************************************/
/*                 ADC Get Digital Value Synchronous NonBlocking Function                              */
/*******************************************************************************************************/
u8 MADC_u8GetDigitalValueSynchNonBlocking(u8 Copy_u8ChannelNb,u16* Copy_pu16DigitalValue)
{
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	cd b7       	in	r28, 0x3d	; 61
    2404:	de b7       	in	r29, 0x3e	; 62
    2406:	28 97       	sbiw	r28, 0x08	; 8
    2408:	0f b6       	in	r0, 0x3f	; 63
    240a:	f8 94       	cli
    240c:	de bf       	out	0x3e, r29	; 62
    240e:	0f be       	out	0x3f, r0	; 63
    2410:	cd bf       	out	0x3d, r28	; 61
    2412:	8e 83       	std	Y+6, r24	; 0x06
    2414:	78 87       	std	Y+8, r23	; 0x08
    2416:	6f 83       	std	Y+7, r22	; 0x07
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u8TimeOutCounter = 0;
    241c:	19 82       	std	Y+1, r1	; 0x01
    241e:	1a 82       	std	Y+2, r1	; 0x02
    2420:	1b 82       	std	Y+3, r1	; 0x03
    2422:	1c 82       	std	Y+4, r1	; 0x04
	if((Copy_u8ChannelNb < 32) && (Copy_pu16DigitalValue != NULL))
    2424:	8e 81       	ldd	r24, Y+6	; 0x06
    2426:	80 32       	cpi	r24, 0x20	; 32
    2428:	08 f0       	brcs	.+2      	; 0x242c <MADC_u8GetDigitalValueSynchNonBlocking+0x2e>
    242a:	5c c0       	rjmp	.+184    	; 0x24e4 <MADC_u8GetDigitalValueSynchNonBlocking+0xe6>
    242c:	8f 81       	ldd	r24, Y+7	; 0x07
    242e:	98 85       	ldd	r25, Y+8	; 0x08
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	09 f4       	brne	.+2      	; 0x2436 <MADC_u8GetDigitalValueSynchNonBlocking+0x38>
    2434:	57 c0       	rjmp	.+174    	; 0x24e4 <MADC_u8GetDigitalValueSynchNonBlocking+0xe6>
	{
		/* Clear MUX 4..0 Bits */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2436:	a7 e2       	ldi	r26, 0x27	; 39
    2438:	b0 e0       	ldi	r27, 0x00	; 0
    243a:	e7 e2       	ldi	r30, 0x27	; 39
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	80 81       	ld	r24, Z
    2440:	80 7e       	andi	r24, 0xE0	; 224
    2442:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
    2444:	a7 e2       	ldi	r26, 0x27	; 39
    2446:	b0 e0       	ldi	r27, 0x00	; 0
    2448:	e7 e2       	ldi	r30, 0x27	; 39
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	90 81       	ld	r25, Z
    244e:	8e 81       	ldd	r24, Y+6	; 0x06
    2450:	89 2b       	or	r24, r25
    2452:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
    2454:	a6 e2       	ldi	r26, 0x26	; 38
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	e6 e2       	ldi	r30, 0x26	; 38
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	80 64       	ori	r24, 0x40	; 64
    2460:	8c 93       	st	X, r24
    2462:	0b c0       	rjmp	.+22     	; 0x247a <MADC_u8GetDigitalValueSynchNonBlocking+0x7c>
		/* Wait Till Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)==0) && (Local_u8TimeOutCounter < ADC_u8_TIME_OUT_MAX_VALUE))
		{
			Local_u8TimeOutCounter ++;
    2464:	89 81       	ldd	r24, Y+1	; 0x01
    2466:	9a 81       	ldd	r25, Y+2	; 0x02
    2468:	ab 81       	ldd	r26, Y+3	; 0x03
    246a:	bc 81       	ldd	r27, Y+4	; 0x04
    246c:	01 96       	adiw	r24, 0x01	; 1
    246e:	a1 1d       	adc	r26, r1
    2470:	b1 1d       	adc	r27, r1
    2472:	89 83       	std	Y+1, r24	; 0x01
    2474:	9a 83       	std	Y+2, r25	; 0x02
    2476:	ab 83       	std	Y+3, r26	; 0x03
    2478:	bc 83       	std	Y+4, r27	; 0x04
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
		/* Wait Till Flag = 1 */
		while((GET_BIT(ADC_u8_ADCSRA_REG,4)==0) && (Local_u8TimeOutCounter < ADC_u8_TIME_OUT_MAX_VALUE))
    247a:	e6 e2       	ldi	r30, 0x26	; 38
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	80 81       	ld	r24, Z
    2480:	82 95       	swap	r24
    2482:	8f 70       	andi	r24, 0x0F	; 15
    2484:	88 2f       	mov	r24, r24
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	81 70       	andi	r24, 0x01	; 1
    248a:	90 70       	andi	r25, 0x00	; 0
    248c:	00 97       	sbiw	r24, 0x00	; 0
    248e:	61 f4       	brne	.+24     	; 0x24a8 <MADC_u8GetDigitalValueSynchNonBlocking+0xaa>
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	9a 81       	ldd	r25, Y+2	; 0x02
    2494:	ab 81       	ldd	r26, Y+3	; 0x03
    2496:	bc 81       	ldd	r27, Y+4	; 0x04
    2498:	80 3a       	cpi	r24, 0xA0	; 160
    249a:	26 e8       	ldi	r18, 0x86	; 134
    249c:	92 07       	cpc	r25, r18
    249e:	21 e0       	ldi	r18, 0x01	; 1
    24a0:	a2 07       	cpc	r26, r18
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	b2 07       	cpc	r27, r18
    24a6:	f0 f2       	brcs	.-68     	; 0x2464 <MADC_u8GetDigitalValueSynchNonBlocking+0x66>
		{
			Local_u8TimeOutCounter ++;
		}
		//while(!GET_BIT(ADC_u8_ADCSRA_REG,4));
		if(Local_u8TimeOutCounter >= ADC_u8_TIME_OUT_MAX_VALUE)
    24a8:	89 81       	ldd	r24, Y+1	; 0x01
    24aa:	9a 81       	ldd	r25, Y+2	; 0x02
    24ac:	ab 81       	ldd	r26, Y+3	; 0x03
    24ae:	bc 81       	ldd	r27, Y+4	; 0x04
    24b0:	80 3a       	cpi	r24, 0xA0	; 160
    24b2:	26 e8       	ldi	r18, 0x86	; 134
    24b4:	92 07       	cpc	r25, r18
    24b6:	21 e0       	ldi	r18, 0x01	; 1
    24b8:	a2 07       	cpc	r26, r18
    24ba:	20 e0       	ldi	r18, 0x00	; 0
    24bc:	b2 07       	cpc	r27, r18
    24be:	10 f0       	brcs	.+4      	; 0x24c4 <MADC_u8GetDigitalValueSynchNonBlocking+0xc6>
		{
			Local_u8ErrorState = STD_TYPES_NOK;
    24c0:	1d 82       	std	Y+5, r1	; 0x05
    24c2:	11 c0       	rjmp	.+34     	; 0x24e6 <MADC_u8GetDigitalValueSynchNonBlocking+0xe8>
		}
		else
		{
			/* Read Digital Value */
			*Copy_pu16DigitalValue = ADC_u16_ADC_REG;
    24c4:	e4 e2       	ldi	r30, 0x24	; 36
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	91 81       	ldd	r25, Z+1	; 0x01
    24cc:	ef 81       	ldd	r30, Y+7	; 0x07
    24ce:	f8 85       	ldd	r31, Y+8	; 0x08
    24d0:	91 83       	std	Z+1, r25	; 0x01
    24d2:	80 83       	st	Z, r24
			/* Clear Flag */
			SET_BIT(ADC_u8_ADCSRA_REG,4);
    24d4:	a6 e2       	ldi	r26, 0x26	; 38
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e6 e2       	ldi	r30, 0x26	; 38
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	80 81       	ld	r24, Z
    24de:	80 61       	ori	r24, 0x10	; 16
    24e0:	8c 93       	st	X, r24
    24e2:	01 c0       	rjmp	.+2      	; 0x24e6 <MADC_u8GetDigitalValueSynchNonBlocking+0xe8>
		}

	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    24e4:	1d 82       	std	Y+5, r1	; 0x05
	}
	return Local_u8ErrorState;
    24e6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    24e8:	28 96       	adiw	r28, 0x08	; 8
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	f8 94       	cli
    24ee:	de bf       	out	0x3e, r29	; 62
    24f0:	0f be       	out	0x3f, r0	; 63
    24f2:	cd bf       	out	0x3d, r28	; 61
    24f4:	cf 91       	pop	r28
    24f6:	df 91       	pop	r29
    24f8:	08 95       	ret

000024fa <MADC_u8GetDigitalValueAsync>:

/*******************************************************************************************************/
/*                           ADC Get Digital Value ASynchronous Function                               */
/*******************************************************************************************************/
u8 MADC_u8GetDigitalValueAsync(u8 Copy_u8ChannelNb,void(*Copy_PfNotification)(u16))
{
    24fa:	df 93       	push	r29
    24fc:	cf 93       	push	r28
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <MADC_u8GetDigitalValueAsync+0x6>
    2500:	00 d0       	rcall	.+0      	; 0x2502 <MADC_u8GetDigitalValueAsync+0x8>
    2502:	cd b7       	in	r28, 0x3d	; 61
    2504:	de b7       	in	r29, 0x3e	; 62
    2506:	8a 83       	std	Y+2, r24	; 0x02
    2508:	7c 83       	std	Y+4, r23	; 0x04
    250a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8ChannelNb < 32) && (*Copy_PfNotification != NULL) && (ADC_u8BusyFlag == 0) )
    2510:	8a 81       	ldd	r24, Y+2	; 0x02
    2512:	80 32       	cpi	r24, 0x20	; 32
    2514:	78 f5       	brcc	.+94     	; 0x2574 <MADC_u8GetDigitalValueAsync+0x7a>
    2516:	8b 81       	ldd	r24, Y+3	; 0x03
    2518:	9c 81       	ldd	r25, Y+4	; 0x04
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	59 f1       	breq	.+86     	; 0x2574 <MADC_u8GetDigitalValueAsync+0x7a>
    251e:	80 91 a1 00 	lds	r24, 0x00A1
    2522:	88 23       	and	r24, r24
    2524:	39 f5       	brne	.+78     	; 0x2574 <MADC_u8GetDigitalValueAsync+0x7a>
	{
		/* ADC is Busy */
		ADC_u8BusyFlag = 1;
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	80 93 a1 00 	sts	0x00A1, r24
		/* Updating Global Pointer to a Function With the Notification Function */
		ADC_pfNotification = Copy_PfNotification;
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	9c 81       	ldd	r25, Y+4	; 0x04
    2530:	90 93 a0 00 	sts	0x00A0, r25
    2534:	80 93 9f 00 	sts	0x009F, r24
		/* Enable Interrupt PIE */
		SET_BIT(ADC_u8_ADCSRA_REG,3);
    2538:	a6 e2       	ldi	r26, 0x26	; 38
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	e6 e2       	ldi	r30, 0x26	; 38
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	88 60       	ori	r24, 0x08	; 8
    2544:	8c 93       	st	X, r24
		/* Clear MUX 4..0 Bits */
		ADC_u8_ADMUX_REG &= 0b11100000;
    2546:	a7 e2       	ldi	r26, 0x27	; 39
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	e7 e2       	ldi	r30, 0x27	; 39
    254c:	f0 e0       	ldi	r31, 0x00	; 0
    254e:	80 81       	ld	r24, Z
    2550:	80 7e       	andi	r24, 0xE0	; 224
    2552:	8c 93       	st	X, r24
		/* Select Channel */
		ADC_u8_ADMUX_REG |= Copy_u8ChannelNb;
    2554:	a7 e2       	ldi	r26, 0x27	; 39
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	e7 e2       	ldi	r30, 0x27	; 39
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	90 81       	ld	r25, Z
    255e:	8a 81       	ldd	r24, Y+2	; 0x02
    2560:	89 2b       	or	r24, r25
    2562:	8c 93       	st	X, r24
		/* Start Conversion */
		SET_BIT(ADC_u8_ADCSRA_REG,6);
    2564:	a6 e2       	ldi	r26, 0x26	; 38
    2566:	b0 e0       	ldi	r27, 0x00	; 0
    2568:	e6 e2       	ldi	r30, 0x26	; 38
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	80 81       	ld	r24, Z
    256e:	80 64       	ori	r24, 0x40	; 64
    2570:	8c 93       	st	X, r24
    2572:	01 c0       	rjmp	.+2      	; 0x2576 <MADC_u8GetDigitalValueAsync+0x7c>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    2574:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    2576:	89 81       	ldd	r24, Y+1	; 0x01
}
    2578:	0f 90       	pop	r0
    257a:	0f 90       	pop	r0
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <MADC_u8ReadADCRegister>:
/*******************************************************************************************************/
/*                                Read ADC Register Function                                           */
/*******************************************************************************************************/

u8 MADC_u8ReadADCRegister(u16 * Copy_pu16ADCRegValue)
{
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	00 d0       	rcall	.+0      	; 0x258c <MADC_u8ReadADCRegister+0x6>
    258c:	0f 92       	push	r0
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	9b 83       	std	Y+3, r25	; 0x03
    2594:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = STD_TYPES_OK;
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu16ADCRegValue !=NULL)
    259a:	8a 81       	ldd	r24, Y+2	; 0x02
    259c:	9b 81       	ldd	r25, Y+3	; 0x03
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	49 f0       	breq	.+18     	; 0x25b4 <MADC_u8ReadADCRegister+0x2e>
	{
	    *Copy_pu16ADCRegValue = ADC_u16_ADC_REG;
    25a2:	e4 e2       	ldi	r30, 0x24	; 36
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	91 81       	ldd	r25, Z+1	; 0x01
    25aa:	ea 81       	ldd	r30, Y+2	; 0x02
    25ac:	fb 81       	ldd	r31, Y+3	; 0x03
    25ae:	91 83       	std	Z+1, r25	; 0x01
    25b0:	80 83       	st	Z, r24
    25b2:	01 c0       	rjmp	.+2      	; 0x25b6 <MADC_u8ReadADCRegister+0x30>
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    25b4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    25b8:	0f 90       	pop	r0
    25ba:	0f 90       	pop	r0
    25bc:	0f 90       	pop	r0
    25be:	cf 91       	pop	r28
    25c0:	df 91       	pop	r29
    25c2:	08 95       	ret

000025c4 <__vector_16>:
/*                                 Prototype for ADC ISR Function                                      */
/*******************************************************************************************************/

void __vector_16(void)   __attribute__((signal));
void __vector_16(void)
{
    25c4:	1f 92       	push	r1
    25c6:	0f 92       	push	r0
    25c8:	0f b6       	in	r0, 0x3f	; 63
    25ca:	0f 92       	push	r0
    25cc:	11 24       	eor	r1, r1
    25ce:	2f 93       	push	r18
    25d0:	3f 93       	push	r19
    25d2:	4f 93       	push	r20
    25d4:	5f 93       	push	r21
    25d6:	6f 93       	push	r22
    25d8:	7f 93       	push	r23
    25da:	8f 93       	push	r24
    25dc:	9f 93       	push	r25
    25de:	af 93       	push	r26
    25e0:	bf 93       	push	r27
    25e2:	ef 93       	push	r30
    25e4:	ff 93       	push	r31
    25e6:	df 93       	push	r29
    25e8:	cf 93       	push	r28
    25ea:	cd b7       	in	r28, 0x3d	; 61
    25ec:	de b7       	in	r29, 0x3e	; 62
	if(ADC_pfNotification != NULL)
    25ee:	80 91 9f 00 	lds	r24, 0x009F
    25f2:	90 91 a0 00 	lds	r25, 0x00A0
    25f6:	00 97       	sbiw	r24, 0x00	; 0
    25f8:	99 f0       	breq	.+38     	; 0x2620 <__vector_16+0x5c>
	{
		/* Clear PIE */
		CLR_BIT(ADC_u8_ADCSRA_REG,3);
    25fa:	a6 e2       	ldi	r26, 0x26	; 38
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e6 e2       	ldi	r30, 0x26	; 38
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	87 7f       	andi	r24, 0xF7	; 247
    2606:	8c 93       	st	X, r24
		/* Calling Notification Function */
		ADC_pfNotification(ADC_u16_ADC_REG);
    2608:	20 91 9f 00 	lds	r18, 0x009F
    260c:	30 91 a0 00 	lds	r19, 0x00A0
    2610:	e4 e2       	ldi	r30, 0x24	; 36
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	91 81       	ldd	r25, Z+1	; 0x01
    2618:	f9 01       	movw	r30, r18
    261a:	09 95       	icall
		/* Clear Busy Flag */
		ADC_u8BusyFlag =0;
    261c:	10 92 a1 00 	sts	0x00A1, r1
	}
}
    2620:	cf 91       	pop	r28
    2622:	df 91       	pop	r29
    2624:	ff 91       	pop	r31
    2626:	ef 91       	pop	r30
    2628:	bf 91       	pop	r27
    262a:	af 91       	pop	r26
    262c:	9f 91       	pop	r25
    262e:	8f 91       	pop	r24
    2630:	7f 91       	pop	r23
    2632:	6f 91       	pop	r22
    2634:	5f 91       	pop	r21
    2636:	4f 91       	pop	r20
    2638:	3f 91       	pop	r19
    263a:	2f 91       	pop	r18
    263c:	0f 90       	pop	r0
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	0f 90       	pop	r0
    2642:	1f 90       	pop	r1
    2644:	18 95       	reti

00002646 <HTMP_GetAnalogTempreatureDegree>:
/*******************************************************************************************************/
#include "HTMP_Interface.h"
/*#####################################################################################################*/

void HTMP_GetAnalogTempreatureDegree(u8 Copy_u8ADCChannelNumber , u8* Copy_pu16Temperature)
{
    2646:	df 93       	push	r29
    2648:	cf 93       	push	r28
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	27 97       	sbiw	r28, 0x07	; 7
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	8d 83       	std	Y+5, r24	; 0x05
    265c:	7f 83       	std	Y+7, r23	; 0x07
    265e:	6e 83       	std	Y+6, r22	; 0x06
	MADC_voidInit();
    2660:	0e 94 c0 11 	call	0x2380	; 0x2380 <MADC_voidInit>

	/*              Local Variables Initialization                   */

	u16 Local_u16Digital_Value = 0  ;
    2664:	1c 82       	std	Y+4, r1	; 0x04
    2666:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16Analog_value  = 0  ;
    2668:	1a 82       	std	Y+2, r1	; 0x02
    266a:	19 82       	std	Y+1, r1	; 0x01

	/*              Calculate Temperature                            */
	/*              Get ADC Reading                                  */
	MADC_u8GetDigitalValueSynchNonBlocking(Copy_u8ADCChannelNumber,&Local_u16Digital_Value);
    266c:	9e 01       	movw	r18, r28
    266e:	2d 5f       	subi	r18, 0xFD	; 253
    2670:	3f 4f       	sbci	r19, 0xFF	; 255
    2672:	8d 81       	ldd	r24, Y+5	; 0x05
    2674:	b9 01       	movw	r22, r18
    2676:	0e 94 ff 11 	call	0x23fe	; 0x23fe <MADC_u8GetDigitalValueSynchNonBlocking>
    /*              Read Analog Voltage                              */
	Local_u16Analog_value = (u16)((Local_u16Digital_Value*5000UL)/1024);
    267a:	8b 81       	ldd	r24, Y+3	; 0x03
    267c:	9c 81       	ldd	r25, Y+4	; 0x04
    267e:	cc 01       	movw	r24, r24
    2680:	a0 e0       	ldi	r26, 0x00	; 0
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	28 e8       	ldi	r18, 0x88	; 136
    2686:	33 e1       	ldi	r19, 0x13	; 19
    2688:	40 e0       	ldi	r20, 0x00	; 0
    268a:	50 e0       	ldi	r21, 0x00	; 0
    268c:	bc 01       	movw	r22, r24
    268e:	cd 01       	movw	r24, r26
    2690:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <__mulsi3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	07 2e       	mov	r0, r23
    269a:	7a e0       	ldi	r23, 0x0A	; 10
    269c:	b6 95       	lsr	r27
    269e:	a7 95       	ror	r26
    26a0:	97 95       	ror	r25
    26a2:	87 95       	ror	r24
    26a4:	7a 95       	dec	r23
    26a6:	d1 f7       	brne	.-12     	; 0x269c <HTMP_GetAnalogTempreatureDegree+0x56>
    26a8:	70 2d       	mov	r23, r0
    26aa:	9a 83       	std	Y+2, r25	; 0x02
    26ac:	89 83       	std	Y+1, r24	; 0x01
    /*              Calculate Temperature                            */
	*Copy_pu16Temperature = (Local_u16Analog_value/10);
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	2a e0       	ldi	r18, 0x0A	; 10
    26b4:	30 e0       	ldi	r19, 0x00	; 0
    26b6:	b9 01       	movw	r22, r18
    26b8:	0e 94 19 23 	call	0x4632	; 0x4632 <__udivmodhi4>
    26bc:	cb 01       	movw	r24, r22
    26be:	ee 81       	ldd	r30, Y+6	; 0x06
    26c0:	ff 81       	ldd	r31, Y+7	; 0x07
    26c2:	80 83       	st	Z, r24
}
    26c4:	27 96       	adiw	r28, 0x07	; 7
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	08 95       	ret

000026d6 <Stepper_u8Rotation>:
/*******************************************************************************************************/
/*                             Stepper Motor Rotation Angle Function                                   */
/*******************************************************************************************************/

u8 Stepper_u8Rotation(u16 Copy_u16Angle , u8 Copy_u8Direction)
{
    26d6:	0f 93       	push	r16
    26d8:	1f 93       	push	r17
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	cd b7       	in	r28, 0x3d	; 61
    26e0:	de b7       	in	r29, 0x3e	; 62
    26e2:	ca 57       	subi	r28, 0x7A	; 122
    26e4:	d0 40       	sbci	r29, 0x00	; 0
    26e6:	0f b6       	in	r0, 0x3f	; 63
    26e8:	f8 94       	cli
    26ea:	de bf       	out	0x3e, r29	; 62
    26ec:	0f be       	out	0x3f, r0	; 63
    26ee:	cd bf       	out	0x3d, r28	; 61
    26f0:	fe 01       	movw	r30, r28
    26f2:	e8 58       	subi	r30, 0x88	; 136
    26f4:	ff 4f       	sbci	r31, 0xFF	; 255
    26f6:	91 83       	std	Z+1, r25	; 0x01
    26f8:	80 83       	st	Z, r24
    26fa:	fe 01       	movw	r30, r28
    26fc:	e6 58       	subi	r30, 0x86	; 134
    26fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2700:	60 83       	st	Z, r22
	u8  Local_u8ErrorState;
	u16 Local_u16_Counter ;
	if((Copy_u16Angle <=360))
    2702:	fe 01       	movw	r30, r28
    2704:	e8 58       	subi	r30, 0x88	; 136
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	80 81       	ld	r24, Z
    270a:	91 81       	ldd	r25, Z+1	; 0x01
    270c:	21 e0       	ldi	r18, 0x01	; 1
    270e:	89 36       	cpi	r24, 0x69	; 105
    2710:	92 07       	cpc	r25, r18
    2712:	08 f0       	brcs	.+2      	; 0x2716 <Stepper_u8Rotation+0x40>
    2714:	b5 c5       	rjmp	.+2922   	; 0x3280 <Stepper_u8Rotation+0xbaa>
	{
		Local_u8ErrorState = STD_TYPES_OK;
    2716:	fe 01       	movw	r30, r28
    2718:	e9 58       	subi	r30, 0x89	; 137
    271a:	ff 4f       	sbci	r31, 0xFF	; 255
    271c:	81 e0       	ldi	r24, 0x01	; 1
    271e:	80 83       	st	Z, r24
		u32 NumberofSteps = (u32)((Copy_u16Angle * 2048UL)/360);
    2720:	fe 01       	movw	r30, r28
    2722:	e8 58       	subi	r30, 0x88	; 136
    2724:	ff 4f       	sbci	r31, 0xFF	; 255
    2726:	80 81       	ld	r24, Z
    2728:	91 81       	ldd	r25, Z+1	; 0x01
    272a:	cc 01       	movw	r24, r24
    272c:	a0 e0       	ldi	r26, 0x00	; 0
    272e:	b0 e0       	ldi	r27, 0x00	; 0
    2730:	07 2e       	mov	r0, r23
    2732:	7b e0       	ldi	r23, 0x0B	; 11
    2734:	88 0f       	add	r24, r24
    2736:	99 1f       	adc	r25, r25
    2738:	aa 1f       	adc	r26, r26
    273a:	bb 1f       	adc	r27, r27
    273c:	7a 95       	dec	r23
    273e:	d1 f7       	brne	.-12     	; 0x2734 <Stepper_u8Rotation+0x5e>
    2740:	70 2d       	mov	r23, r0
    2742:	8e 01       	movw	r16, r28
    2744:	0f 58       	subi	r16, 0x8F	; 143
    2746:	1f 4f       	sbci	r17, 0xFF	; 255
    2748:	28 e6       	ldi	r18, 0x68	; 104
    274a:	31 e0       	ldi	r19, 0x01	; 1
    274c:	40 e0       	ldi	r20, 0x00	; 0
    274e:	50 e0       	ldi	r21, 0x00	; 0
    2750:	bc 01       	movw	r22, r24
    2752:	cd 01       	movw	r24, r26
    2754:	0e 94 2d 23 	call	0x465a	; 0x465a <__udivmodsi4>
    2758:	da 01       	movw	r26, r20
    275a:	c9 01       	movw	r24, r18
    275c:	f8 01       	movw	r30, r16
    275e:	80 83       	st	Z, r24
    2760:	91 83       	std	Z+1, r25	; 0x01
    2762:	a2 83       	std	Z+2, r26	; 0x02
    2764:	b3 83       	std	Z+3, r27	; 0x03
		NumberofSteps = NumberofSteps / 4 ;
    2766:	9e 01       	movw	r18, r28
    2768:	2f 58       	subi	r18, 0x8F	; 143
    276a:	3f 4f       	sbci	r19, 0xFF	; 255
    276c:	fe 01       	movw	r30, r28
    276e:	ef 58       	subi	r30, 0x8F	; 143
    2770:	ff 4f       	sbci	r31, 0xFF	; 255
    2772:	80 81       	ld	r24, Z
    2774:	91 81       	ldd	r25, Z+1	; 0x01
    2776:	a2 81       	ldd	r26, Z+2	; 0x02
    2778:	b3 81       	ldd	r27, Z+3	; 0x03
    277a:	b6 95       	lsr	r27
    277c:	a7 95       	ror	r26
    277e:	97 95       	ror	r25
    2780:	87 95       	ror	r24
    2782:	b6 95       	lsr	r27
    2784:	a7 95       	ror	r26
    2786:	97 95       	ror	r25
    2788:	87 95       	ror	r24
    278a:	f9 01       	movw	r30, r18
    278c:	80 83       	st	Z, r24
    278e:	91 83       	std	Z+1, r25	; 0x01
    2790:	a2 83       	std	Z+2, r26	; 0x02
    2792:	b3 83       	std	Z+3, r27	; 0x03

		if(Copy_u8Direction == STPR_AntiClockwise)
    2794:	fe 01       	movw	r30, r28
    2796:	e6 58       	subi	r30, 0x86	; 134
    2798:	ff 4f       	sbci	r31, 0xFF	; 255
    279a:	80 81       	ld	r24, Z
    279c:	81 30       	cpi	r24, 0x01	; 1
    279e:	09 f0       	breq	.+2      	; 0x27a2 <Stepper_u8Rotation+0xcc>
    27a0:	15 c3       	rjmp	.+1578   	; 0x2dcc <Stepper_u8Rotation+0x6f6>
		{
			for(Local_u16_Counter=0; Local_u16_Counter < NumberofSteps ; Local_u16_Counter++)
    27a2:	fe 01       	movw	r30, r28
    27a4:	eb 58       	subi	r30, 0x8B	; 139
    27a6:	ff 4f       	sbci	r31, 0xFF	; 255
    27a8:	11 82       	std	Z+1, r1	; 0x01
    27aa:	10 82       	st	Z, r1
    27ac:	f9 c2       	rjmp	.+1522   	; 0x2da0 <Stepper_u8Rotation+0x6ca>
			{

				//STEP 1
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_HIGH);
    27ae:	82 e0       	ldi	r24, 0x02	; 2
    27b0:	63 e0       	ldi	r22, 0x03	; 3
    27b2:	41 e0       	ldi	r20, 0x01	; 1
    27b4:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    27b8:	82 e0       	ldi	r24, 0x02	; 2
    27ba:	64 e0       	ldi	r22, 0x04	; 4
    27bc:	40 e0       	ldi	r20, 0x00	; 0
    27be:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    27c2:	82 e0       	ldi	r24, 0x02	; 2
    27c4:	65 e0       	ldi	r22, 0x05	; 5
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    27cc:	82 e0       	ldi	r24, 0x02	; 2
    27ce:	66 e0       	ldi	r22, 0x06	; 6
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
    27d6:	fe 01       	movw	r30, r28
    27d8:	e3 59       	subi	r30, 0x93	; 147
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	a0 ea       	ldi	r26, 0xA0	; 160
    27e2:	b0 e4       	ldi	r27, 0x40	; 64
    27e4:	80 83       	st	Z, r24
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	a2 83       	std	Z+2, r26	; 0x02
    27ea:	b3 83       	std	Z+3, r27	; 0x03
    27ec:	8e 01       	movw	r16, r28
    27ee:	07 59       	subi	r16, 0x97	; 151
    27f0:	1f 4f       	sbci	r17, 0xFF	; 255
    27f2:	fe 01       	movw	r30, r28
    27f4:	e3 59       	subi	r30, 0x93	; 147
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	60 81       	ld	r22, Z
    27fa:	71 81       	ldd	r23, Z+1	; 0x01
    27fc:	82 81       	ldd	r24, Z+2	; 0x02
    27fe:	93 81       	ldd	r25, Z+3	; 0x03
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	4a ef       	ldi	r20, 0xFA	; 250
    2806:	54 e4       	ldi	r21, 0x44	; 68
    2808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	f8 01       	movw	r30, r16
    2812:	80 83       	st	Z, r24
    2814:	91 83       	std	Z+1, r25	; 0x01
    2816:	a2 83       	std	Z+2, r26	; 0x02
    2818:	b3 83       	std	Z+3, r27	; 0x03
    281a:	fe 01       	movw	r30, r28
    281c:	e7 59       	subi	r30, 0x97	; 151
    281e:	ff 4f       	sbci	r31, 0xFF	; 255
    2820:	60 81       	ld	r22, Z
    2822:	71 81       	ldd	r23, Z+1	; 0x01
    2824:	82 81       	ldd	r24, Z+2	; 0x02
    2826:	93 81       	ldd	r25, Z+3	; 0x03
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	40 e8       	ldi	r20, 0x80	; 128
    282e:	5f e3       	ldi	r21, 0x3F	; 63
    2830:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2834:	88 23       	and	r24, r24
    2836:	44 f4       	brge	.+16     	; 0x2848 <Stepper_u8Rotation+0x172>
    2838:	fe 01       	movw	r30, r28
    283a:	e9 59       	subi	r30, 0x99	; 153
    283c:	ff 4f       	sbci	r31, 0xFF	; 255
    283e:	81 e0       	ldi	r24, 0x01	; 1
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	91 83       	std	Z+1, r25	; 0x01
    2844:	80 83       	st	Z, r24
    2846:	64 c0       	rjmp	.+200    	; 0x2910 <Stepper_u8Rotation+0x23a>
    2848:	fe 01       	movw	r30, r28
    284a:	e7 59       	subi	r30, 0x97	; 151
    284c:	ff 4f       	sbci	r31, 0xFF	; 255
    284e:	60 81       	ld	r22, Z
    2850:	71 81       	ldd	r23, Z+1	; 0x01
    2852:	82 81       	ldd	r24, Z+2	; 0x02
    2854:	93 81       	ldd	r25, Z+3	; 0x03
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	3f ef       	ldi	r19, 0xFF	; 255
    285a:	4f e7       	ldi	r20, 0x7F	; 127
    285c:	57 e4       	ldi	r21, 0x47	; 71
    285e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2862:	18 16       	cp	r1, r24
    2864:	0c f0       	brlt	.+2      	; 0x2868 <Stepper_u8Rotation+0x192>
    2866:	43 c0       	rjmp	.+134    	; 0x28ee <Stepper_u8Rotation+0x218>
    2868:	fe 01       	movw	r30, r28
    286a:	e3 59       	subi	r30, 0x93	; 147
    286c:	ff 4f       	sbci	r31, 0xFF	; 255
    286e:	60 81       	ld	r22, Z
    2870:	71 81       	ldd	r23, Z+1	; 0x01
    2872:	82 81       	ldd	r24, Z+2	; 0x02
    2874:	93 81       	ldd	r25, Z+3	; 0x03
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e2       	ldi	r20, 0x20	; 32
    287c:	51 e4       	ldi	r21, 0x41	; 65
    287e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	8e 01       	movw	r16, r28
    2888:	09 59       	subi	r16, 0x99	; 153
    288a:	1f 4f       	sbci	r17, 0xFF	; 255
    288c:	bc 01       	movw	r22, r24
    288e:	cd 01       	movw	r24, r26
    2890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	f8 01       	movw	r30, r16
    289a:	91 83       	std	Z+1, r25	; 0x01
    289c:	80 83       	st	Z, r24
    289e:	1f c0       	rjmp	.+62     	; 0x28de <Stepper_u8Rotation+0x208>
    28a0:	fe 01       	movw	r30, r28
    28a2:	eb 59       	subi	r30, 0x9B	; 155
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	88 ec       	ldi	r24, 0xC8	; 200
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	91 83       	std	Z+1, r25	; 0x01
    28ac:	80 83       	st	Z, r24
    28ae:	fe 01       	movw	r30, r28
    28b0:	eb 59       	subi	r30, 0x9B	; 155
    28b2:	ff 4f       	sbci	r31, 0xFF	; 255
    28b4:	80 81       	ld	r24, Z
    28b6:	91 81       	ldd	r25, Z+1	; 0x01
    28b8:	01 97       	sbiw	r24, 0x01	; 1
    28ba:	f1 f7       	brne	.-4      	; 0x28b8 <Stepper_u8Rotation+0x1e2>
    28bc:	fe 01       	movw	r30, r28
    28be:	eb 59       	subi	r30, 0x9B	; 155
    28c0:	ff 4f       	sbci	r31, 0xFF	; 255
    28c2:	91 83       	std	Z+1, r25	; 0x01
    28c4:	80 83       	st	Z, r24
    28c6:	de 01       	movw	r26, r28
    28c8:	a9 59       	subi	r26, 0x99	; 153
    28ca:	bf 4f       	sbci	r27, 0xFF	; 255
    28cc:	fe 01       	movw	r30, r28
    28ce:	e9 59       	subi	r30, 0x99	; 153
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	80 81       	ld	r24, Z
    28d4:	91 81       	ldd	r25, Z+1	; 0x01
    28d6:	01 97       	sbiw	r24, 0x01	; 1
    28d8:	11 96       	adiw	r26, 0x01	; 1
    28da:	9c 93       	st	X, r25
    28dc:	8e 93       	st	-X, r24
    28de:	fe 01       	movw	r30, r28
    28e0:	e9 59       	subi	r30, 0x99	; 153
    28e2:	ff 4f       	sbci	r31, 0xFF	; 255
    28e4:	80 81       	ld	r24, Z
    28e6:	91 81       	ldd	r25, Z+1	; 0x01
    28e8:	00 97       	sbiw	r24, 0x00	; 0
    28ea:	d1 f6       	brne	.-76     	; 0x28a0 <Stepper_u8Rotation+0x1ca>
    28ec:	27 c0       	rjmp	.+78     	; 0x293c <Stepper_u8Rotation+0x266>
    28ee:	8e 01       	movw	r16, r28
    28f0:	09 59       	subi	r16, 0x99	; 153
    28f2:	1f 4f       	sbci	r17, 0xFF	; 255
    28f4:	fe 01       	movw	r30, r28
    28f6:	e7 59       	subi	r30, 0x97	; 151
    28f8:	ff 4f       	sbci	r31, 0xFF	; 255
    28fa:	60 81       	ld	r22, Z
    28fc:	71 81       	ldd	r23, Z+1	; 0x01
    28fe:	82 81       	ldd	r24, Z+2	; 0x02
    2900:	93 81       	ldd	r25, Z+3	; 0x03
    2902:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2906:	dc 01       	movw	r26, r24
    2908:	cb 01       	movw	r24, r22
    290a:	f8 01       	movw	r30, r16
    290c:	91 83       	std	Z+1, r25	; 0x01
    290e:	80 83       	st	Z, r24
    2910:	de 01       	movw	r26, r28
    2912:	ad 59       	subi	r26, 0x9D	; 157
    2914:	bf 4f       	sbci	r27, 0xFF	; 255
    2916:	fe 01       	movw	r30, r28
    2918:	e9 59       	subi	r30, 0x99	; 153
    291a:	ff 4f       	sbci	r31, 0xFF	; 255
    291c:	80 81       	ld	r24, Z
    291e:	91 81       	ldd	r25, Z+1	; 0x01
    2920:	8d 93       	st	X+, r24
    2922:	9c 93       	st	X, r25
    2924:	fe 01       	movw	r30, r28
    2926:	ed 59       	subi	r30, 0x9D	; 157
    2928:	ff 4f       	sbci	r31, 0xFF	; 255
    292a:	80 81       	ld	r24, Z
    292c:	91 81       	ldd	r25, Z+1	; 0x01
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <Stepper_u8Rotation+0x258>
    2932:	fe 01       	movw	r30, r28
    2934:	ed 59       	subi	r30, 0x9D	; 157
    2936:	ff 4f       	sbci	r31, 0xFF	; 255
    2938:	91 83       	std	Z+1, r25	; 0x01
    293a:	80 83       	st	Z, r24
				_delay_ms(5);

				//STEP 2
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    293c:	82 e0       	ldi	r24, 0x02	; 2
    293e:	63 e0       	ldi	r22, 0x03	; 3
    2940:	40 e0       	ldi	r20, 0x00	; 0
    2942:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_HIGH);
    2946:	82 e0       	ldi	r24, 0x02	; 2
    2948:	64 e0       	ldi	r22, 0x04	; 4
    294a:	41 e0       	ldi	r20, 0x01	; 1
    294c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    2950:	82 e0       	ldi	r24, 0x02	; 2
    2952:	65 e0       	ldi	r22, 0x05	; 5
    2954:	40 e0       	ldi	r20, 0x00	; 0
    2956:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    295a:	82 e0       	ldi	r24, 0x02	; 2
    295c:	66 e0       	ldi	r22, 0x06	; 6
    295e:	40 e0       	ldi	r20, 0x00	; 0
    2960:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
    2964:	fe 01       	movw	r30, r28
    2966:	e1 5a       	subi	r30, 0xA1	; 161
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	a0 ea       	ldi	r26, 0xA0	; 160
    2970:	b0 e4       	ldi	r27, 0x40	; 64
    2972:	80 83       	st	Z, r24
    2974:	91 83       	std	Z+1, r25	; 0x01
    2976:	a2 83       	std	Z+2, r26	; 0x02
    2978:	b3 83       	std	Z+3, r27	; 0x03
    297a:	8e 01       	movw	r16, r28
    297c:	05 5a       	subi	r16, 0xA5	; 165
    297e:	1f 4f       	sbci	r17, 0xFF	; 255
    2980:	fe 01       	movw	r30, r28
    2982:	e1 5a       	subi	r30, 0xA1	; 161
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	60 81       	ld	r22, Z
    2988:	71 81       	ldd	r23, Z+1	; 0x01
    298a:	82 81       	ldd	r24, Z+2	; 0x02
    298c:	93 81       	ldd	r25, Z+3	; 0x03
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	4a ef       	ldi	r20, 0xFA	; 250
    2994:	54 e4       	ldi	r21, 0x44	; 68
    2996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	f8 01       	movw	r30, r16
    29a0:	80 83       	st	Z, r24
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	a2 83       	std	Z+2, r26	; 0x02
    29a6:	b3 83       	std	Z+3, r27	; 0x03
    29a8:	fe 01       	movw	r30, r28
    29aa:	e5 5a       	subi	r30, 0xA5	; 165
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	60 81       	ld	r22, Z
    29b0:	71 81       	ldd	r23, Z+1	; 0x01
    29b2:	82 81       	ldd	r24, Z+2	; 0x02
    29b4:	93 81       	ldd	r25, Z+3	; 0x03
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e8       	ldi	r20, 0x80	; 128
    29bc:	5f e3       	ldi	r21, 0x3F	; 63
    29be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29c2:	88 23       	and	r24, r24
    29c4:	44 f4       	brge	.+16     	; 0x29d6 <Stepper_u8Rotation+0x300>
    29c6:	fe 01       	movw	r30, r28
    29c8:	e7 5a       	subi	r30, 0xA7	; 167
    29ca:	ff 4f       	sbci	r31, 0xFF	; 255
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	91 83       	std	Z+1, r25	; 0x01
    29d2:	80 83       	st	Z, r24
    29d4:	64 c0       	rjmp	.+200    	; 0x2a9e <Stepper_u8Rotation+0x3c8>
    29d6:	fe 01       	movw	r30, r28
    29d8:	e5 5a       	subi	r30, 0xA5	; 165
    29da:	ff 4f       	sbci	r31, 0xFF	; 255
    29dc:	60 81       	ld	r22, Z
    29de:	71 81       	ldd	r23, Z+1	; 0x01
    29e0:	82 81       	ldd	r24, Z+2	; 0x02
    29e2:	93 81       	ldd	r25, Z+3	; 0x03
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	3f ef       	ldi	r19, 0xFF	; 255
    29e8:	4f e7       	ldi	r20, 0x7F	; 127
    29ea:	57 e4       	ldi	r21, 0x47	; 71
    29ec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f0:	18 16       	cp	r1, r24
    29f2:	0c f0       	brlt	.+2      	; 0x29f6 <Stepper_u8Rotation+0x320>
    29f4:	43 c0       	rjmp	.+134    	; 0x2a7c <Stepper_u8Rotation+0x3a6>
    29f6:	fe 01       	movw	r30, r28
    29f8:	e1 5a       	subi	r30, 0xA1	; 161
    29fa:	ff 4f       	sbci	r31, 0xFF	; 255
    29fc:	60 81       	ld	r22, Z
    29fe:	71 81       	ldd	r23, Z+1	; 0x01
    2a00:	82 81       	ldd	r24, Z+2	; 0x02
    2a02:	93 81       	ldd	r25, Z+3	; 0x03
    2a04:	20 e0       	ldi	r18, 0x00	; 0
    2a06:	30 e0       	ldi	r19, 0x00	; 0
    2a08:	40 e2       	ldi	r20, 0x20	; 32
    2a0a:	51 e4       	ldi	r21, 0x41	; 65
    2a0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	8e 01       	movw	r16, r28
    2a16:	07 5a       	subi	r16, 0xA7	; 167
    2a18:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1a:	bc 01       	movw	r22, r24
    2a1c:	cd 01       	movw	r24, r26
    2a1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	f8 01       	movw	r30, r16
    2a28:	91 83       	std	Z+1, r25	; 0x01
    2a2a:	80 83       	st	Z, r24
    2a2c:	1f c0       	rjmp	.+62     	; 0x2a6c <Stepper_u8Rotation+0x396>
    2a2e:	fe 01       	movw	r30, r28
    2a30:	e9 5a       	subi	r30, 0xA9	; 169
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	88 ec       	ldi	r24, 0xC8	; 200
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	91 83       	std	Z+1, r25	; 0x01
    2a3a:	80 83       	st	Z, r24
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	e9 5a       	subi	r30, 0xA9	; 169
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 81       	ld	r24, Z
    2a44:	91 81       	ldd	r25, Z+1	; 0x01
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <Stepper_u8Rotation+0x370>
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	e9 5a       	subi	r30, 0xA9	; 169
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	91 83       	std	Z+1, r25	; 0x01
    2a52:	80 83       	st	Z, r24
    2a54:	de 01       	movw	r26, r28
    2a56:	a7 5a       	subi	r26, 0xA7	; 167
    2a58:	bf 4f       	sbci	r27, 0xFF	; 255
    2a5a:	fe 01       	movw	r30, r28
    2a5c:	e7 5a       	subi	r30, 0xA7	; 167
    2a5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a60:	80 81       	ld	r24, Z
    2a62:	91 81       	ldd	r25, Z+1	; 0x01
    2a64:	01 97       	sbiw	r24, 0x01	; 1
    2a66:	11 96       	adiw	r26, 0x01	; 1
    2a68:	9c 93       	st	X, r25
    2a6a:	8e 93       	st	-X, r24
    2a6c:	fe 01       	movw	r30, r28
    2a6e:	e7 5a       	subi	r30, 0xA7	; 167
    2a70:	ff 4f       	sbci	r31, 0xFF	; 255
    2a72:	80 81       	ld	r24, Z
    2a74:	91 81       	ldd	r25, Z+1	; 0x01
    2a76:	00 97       	sbiw	r24, 0x00	; 0
    2a78:	d1 f6       	brne	.-76     	; 0x2a2e <Stepper_u8Rotation+0x358>
    2a7a:	27 c0       	rjmp	.+78     	; 0x2aca <Stepper_u8Rotation+0x3f4>
    2a7c:	8e 01       	movw	r16, r28
    2a7e:	07 5a       	subi	r16, 0xA7	; 167
    2a80:	1f 4f       	sbci	r17, 0xFF	; 255
    2a82:	fe 01       	movw	r30, r28
    2a84:	e5 5a       	subi	r30, 0xA5	; 165
    2a86:	ff 4f       	sbci	r31, 0xFF	; 255
    2a88:	60 81       	ld	r22, Z
    2a8a:	71 81       	ldd	r23, Z+1	; 0x01
    2a8c:	82 81       	ldd	r24, Z+2	; 0x02
    2a8e:	93 81       	ldd	r25, Z+3	; 0x03
    2a90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	f8 01       	movw	r30, r16
    2a9a:	91 83       	std	Z+1, r25	; 0x01
    2a9c:	80 83       	st	Z, r24
    2a9e:	de 01       	movw	r26, r28
    2aa0:	ab 5a       	subi	r26, 0xAB	; 171
    2aa2:	bf 4f       	sbci	r27, 0xFF	; 255
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	e7 5a       	subi	r30, 0xA7	; 167
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	80 81       	ld	r24, Z
    2aac:	91 81       	ldd	r25, Z+1	; 0x01
    2aae:	8d 93       	st	X+, r24
    2ab0:	9c 93       	st	X, r25
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	eb 5a       	subi	r30, 0xAB	; 171
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	80 81       	ld	r24, Z
    2aba:	91 81       	ldd	r25, Z+1	; 0x01
    2abc:	01 97       	sbiw	r24, 0x01	; 1
    2abe:	f1 f7       	brne	.-4      	; 0x2abc <Stepper_u8Rotation+0x3e6>
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	eb 5a       	subi	r30, 0xAB	; 171
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	91 83       	std	Z+1, r25	; 0x01
    2ac8:	80 83       	st	Z, r24
				_delay_ms(5);

				//STEP 3
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    2aca:	82 e0       	ldi	r24, 0x02	; 2
    2acc:	63 e0       	ldi	r22, 0x03	; 3
    2ace:	40 e0       	ldi	r20, 0x00	; 0
    2ad0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    2ad4:	82 e0       	ldi	r24, 0x02	; 2
    2ad6:	64 e0       	ldi	r22, 0x04	; 4
    2ad8:	40 e0       	ldi	r20, 0x00	; 0
    2ada:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_HIGH);
    2ade:	82 e0       	ldi	r24, 0x02	; 2
    2ae0:	65 e0       	ldi	r22, 0x05	; 5
    2ae2:	41 e0       	ldi	r20, 0x01	; 1
    2ae4:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    2ae8:	82 e0       	ldi	r24, 0x02	; 2
    2aea:	66 e0       	ldi	r22, 0x06	; 6
    2aec:	40 e0       	ldi	r20, 0x00	; 0
    2aee:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
    2af2:	fe 01       	movw	r30, r28
    2af4:	ef 5a       	subi	r30, 0xAF	; 175
    2af6:	ff 4f       	sbci	r31, 0xFF	; 255
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	a0 ea       	ldi	r26, 0xA0	; 160
    2afe:	b0 e4       	ldi	r27, 0x40	; 64
    2b00:	80 83       	st	Z, r24
    2b02:	91 83       	std	Z+1, r25	; 0x01
    2b04:	a2 83       	std	Z+2, r26	; 0x02
    2b06:	b3 83       	std	Z+3, r27	; 0x03
    2b08:	8e 01       	movw	r16, r28
    2b0a:	03 5b       	subi	r16, 0xB3	; 179
    2b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2b0e:	fe 01       	movw	r30, r28
    2b10:	ef 5a       	subi	r30, 0xAF	; 175
    2b12:	ff 4f       	sbci	r31, 0xFF	; 255
    2b14:	60 81       	ld	r22, Z
    2b16:	71 81       	ldd	r23, Z+1	; 0x01
    2b18:	82 81       	ldd	r24, Z+2	; 0x02
    2b1a:	93 81       	ldd	r25, Z+3	; 0x03
    2b1c:	20 e0       	ldi	r18, 0x00	; 0
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	4a ef       	ldi	r20, 0xFA	; 250
    2b22:	54 e4       	ldi	r21, 0x44	; 68
    2b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b28:	dc 01       	movw	r26, r24
    2b2a:	cb 01       	movw	r24, r22
    2b2c:	f8 01       	movw	r30, r16
    2b2e:	80 83       	st	Z, r24
    2b30:	91 83       	std	Z+1, r25	; 0x01
    2b32:	a2 83       	std	Z+2, r26	; 0x02
    2b34:	b3 83       	std	Z+3, r27	; 0x03
    2b36:	fe 01       	movw	r30, r28
    2b38:	e3 5b       	subi	r30, 0xB3	; 179
    2b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3c:	60 81       	ld	r22, Z
    2b3e:	71 81       	ldd	r23, Z+1	; 0x01
    2b40:	82 81       	ldd	r24, Z+2	; 0x02
    2b42:	93 81       	ldd	r25, Z+3	; 0x03
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e8       	ldi	r20, 0x80	; 128
    2b4a:	5f e3       	ldi	r21, 0x3F	; 63
    2b4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b50:	88 23       	and	r24, r24
    2b52:	44 f4       	brge	.+16     	; 0x2b64 <Stepper_u8Rotation+0x48e>
    2b54:	fe 01       	movw	r30, r28
    2b56:	e5 5b       	subi	r30, 0xB5	; 181
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	91 83       	std	Z+1, r25	; 0x01
    2b60:	80 83       	st	Z, r24
    2b62:	64 c0       	rjmp	.+200    	; 0x2c2c <Stepper_u8Rotation+0x556>
    2b64:	fe 01       	movw	r30, r28
    2b66:	e3 5b       	subi	r30, 0xB3	; 179
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	60 81       	ld	r22, Z
    2b6c:	71 81       	ldd	r23, Z+1	; 0x01
    2b6e:	82 81       	ldd	r24, Z+2	; 0x02
    2b70:	93 81       	ldd	r25, Z+3	; 0x03
    2b72:	20 e0       	ldi	r18, 0x00	; 0
    2b74:	3f ef       	ldi	r19, 0xFF	; 255
    2b76:	4f e7       	ldi	r20, 0x7F	; 127
    2b78:	57 e4       	ldi	r21, 0x47	; 71
    2b7a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b7e:	18 16       	cp	r1, r24
    2b80:	0c f0       	brlt	.+2      	; 0x2b84 <Stepper_u8Rotation+0x4ae>
    2b82:	43 c0       	rjmp	.+134    	; 0x2c0a <Stepper_u8Rotation+0x534>
    2b84:	fe 01       	movw	r30, r28
    2b86:	ef 5a       	subi	r30, 0xAF	; 175
    2b88:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8a:	60 81       	ld	r22, Z
    2b8c:	71 81       	ldd	r23, Z+1	; 0x01
    2b8e:	82 81       	ldd	r24, Z+2	; 0x02
    2b90:	93 81       	ldd	r25, Z+3	; 0x03
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	40 e2       	ldi	r20, 0x20	; 32
    2b98:	51 e4       	ldi	r21, 0x41	; 65
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	8e 01       	movw	r16, r28
    2ba4:	05 5b       	subi	r16, 0xB5	; 181
    2ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    2ba8:	bc 01       	movw	r22, r24
    2baa:	cd 01       	movw	r24, r26
    2bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	f8 01       	movw	r30, r16
    2bb6:	91 83       	std	Z+1, r25	; 0x01
    2bb8:	80 83       	st	Z, r24
    2bba:	1f c0       	rjmp	.+62     	; 0x2bfa <Stepper_u8Rotation+0x524>
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e7 5b       	subi	r30, 0xB7	; 183
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	88 ec       	ldi	r24, 0xC8	; 200
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	91 83       	std	Z+1, r25	; 0x01
    2bc8:	80 83       	st	Z, r24
    2bca:	fe 01       	movw	r30, r28
    2bcc:	e7 5b       	subi	r30, 0xB7	; 183
    2bce:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd0:	80 81       	ld	r24, Z
    2bd2:	91 81       	ldd	r25, Z+1	; 0x01
    2bd4:	01 97       	sbiw	r24, 0x01	; 1
    2bd6:	f1 f7       	brne	.-4      	; 0x2bd4 <Stepper_u8Rotation+0x4fe>
    2bd8:	fe 01       	movw	r30, r28
    2bda:	e7 5b       	subi	r30, 0xB7	; 183
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	91 83       	std	Z+1, r25	; 0x01
    2be0:	80 83       	st	Z, r24
    2be2:	de 01       	movw	r26, r28
    2be4:	a5 5b       	subi	r26, 0xB5	; 181
    2be6:	bf 4f       	sbci	r27, 0xFF	; 255
    2be8:	fe 01       	movw	r30, r28
    2bea:	e5 5b       	subi	r30, 0xB5	; 181
    2bec:	ff 4f       	sbci	r31, 0xFF	; 255
    2bee:	80 81       	ld	r24, Z
    2bf0:	91 81       	ldd	r25, Z+1	; 0x01
    2bf2:	01 97       	sbiw	r24, 0x01	; 1
    2bf4:	11 96       	adiw	r26, 0x01	; 1
    2bf6:	9c 93       	st	X, r25
    2bf8:	8e 93       	st	-X, r24
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e5 5b       	subi	r30, 0xB5	; 181
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	80 81       	ld	r24, Z
    2c02:	91 81       	ldd	r25, Z+1	; 0x01
    2c04:	00 97       	sbiw	r24, 0x00	; 0
    2c06:	d1 f6       	brne	.-76     	; 0x2bbc <Stepper_u8Rotation+0x4e6>
    2c08:	27 c0       	rjmp	.+78     	; 0x2c58 <Stepper_u8Rotation+0x582>
    2c0a:	8e 01       	movw	r16, r28
    2c0c:	05 5b       	subi	r16, 0xB5	; 181
    2c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c10:	fe 01       	movw	r30, r28
    2c12:	e3 5b       	subi	r30, 0xB3	; 179
    2c14:	ff 4f       	sbci	r31, 0xFF	; 255
    2c16:	60 81       	ld	r22, Z
    2c18:	71 81       	ldd	r23, Z+1	; 0x01
    2c1a:	82 81       	ldd	r24, Z+2	; 0x02
    2c1c:	93 81       	ldd	r25, Z+3	; 0x03
    2c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c22:	dc 01       	movw	r26, r24
    2c24:	cb 01       	movw	r24, r22
    2c26:	f8 01       	movw	r30, r16
    2c28:	91 83       	std	Z+1, r25	; 0x01
    2c2a:	80 83       	st	Z, r24
    2c2c:	de 01       	movw	r26, r28
    2c2e:	a9 5b       	subi	r26, 0xB9	; 185
    2c30:	bf 4f       	sbci	r27, 0xFF	; 255
    2c32:	fe 01       	movw	r30, r28
    2c34:	e5 5b       	subi	r30, 0xB5	; 181
    2c36:	ff 4f       	sbci	r31, 0xFF	; 255
    2c38:	80 81       	ld	r24, Z
    2c3a:	91 81       	ldd	r25, Z+1	; 0x01
    2c3c:	8d 93       	st	X+, r24
    2c3e:	9c 93       	st	X, r25
    2c40:	fe 01       	movw	r30, r28
    2c42:	e9 5b       	subi	r30, 0xB9	; 185
    2c44:	ff 4f       	sbci	r31, 0xFF	; 255
    2c46:	80 81       	ld	r24, Z
    2c48:	91 81       	ldd	r25, Z+1	; 0x01
    2c4a:	01 97       	sbiw	r24, 0x01	; 1
    2c4c:	f1 f7       	brne	.-4      	; 0x2c4a <Stepper_u8Rotation+0x574>
    2c4e:	fe 01       	movw	r30, r28
    2c50:	e9 5b       	subi	r30, 0xB9	; 185
    2c52:	ff 4f       	sbci	r31, 0xFF	; 255
    2c54:	91 83       	std	Z+1, r25	; 0x01
    2c56:	80 83       	st	Z, r24
				_delay_ms(5);

				//STEP 4
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    2c58:	82 e0       	ldi	r24, 0x02	; 2
    2c5a:	63 e0       	ldi	r22, 0x03	; 3
    2c5c:	40 e0       	ldi	r20, 0x00	; 0
    2c5e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    2c62:	82 e0       	ldi	r24, 0x02	; 2
    2c64:	64 e0       	ldi	r22, 0x04	; 4
    2c66:	40 e0       	ldi	r20, 0x00	; 0
    2c68:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    2c6c:	82 e0       	ldi	r24, 0x02	; 2
    2c6e:	65 e0       	ldi	r22, 0x05	; 5
    2c70:	40 e0       	ldi	r20, 0x00	; 0
    2c72:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_HIGH);
    2c76:	82 e0       	ldi	r24, 0x02	; 2
    2c78:	66 e0       	ldi	r22, 0x06	; 6
    2c7a:	41 e0       	ldi	r20, 0x01	; 1
    2c7c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
    2c80:	fe 01       	movw	r30, r28
    2c82:	ed 5b       	subi	r30, 0xBD	; 189
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	a0 ea       	ldi	r26, 0xA0	; 160
    2c8c:	b0 e4       	ldi	r27, 0x40	; 64
    2c8e:	80 83       	st	Z, r24
    2c90:	91 83       	std	Z+1, r25	; 0x01
    2c92:	a2 83       	std	Z+2, r26	; 0x02
    2c94:	b3 83       	std	Z+3, r27	; 0x03
    2c96:	8e 01       	movw	r16, r28
    2c98:	01 5c       	subi	r16, 0xC1	; 193
    2c9a:	1f 4f       	sbci	r17, 0xFF	; 255
    2c9c:	fe 01       	movw	r30, r28
    2c9e:	ed 5b       	subi	r30, 0xBD	; 189
    2ca0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca2:	60 81       	ld	r22, Z
    2ca4:	71 81       	ldd	r23, Z+1	; 0x01
    2ca6:	82 81       	ldd	r24, Z+2	; 0x02
    2ca8:	93 81       	ldd	r25, Z+3	; 0x03
    2caa:	20 e0       	ldi	r18, 0x00	; 0
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	4a ef       	ldi	r20, 0xFA	; 250
    2cb0:	54 e4       	ldi	r21, 0x44	; 68
    2cb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	f8 01       	movw	r30, r16
    2cbc:	80 83       	st	Z, r24
    2cbe:	91 83       	std	Z+1, r25	; 0x01
    2cc0:	a2 83       	std	Z+2, r26	; 0x02
    2cc2:	b3 83       	std	Z+3, r27	; 0x03
    2cc4:	fe 01       	movw	r30, r28
    2cc6:	ff 96       	adiw	r30, 0x3f	; 63
    2cc8:	60 81       	ld	r22, Z
    2cca:	71 81       	ldd	r23, Z+1	; 0x01
    2ccc:	82 81       	ldd	r24, Z+2	; 0x02
    2cce:	93 81       	ldd	r25, Z+3	; 0x03
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e8       	ldi	r20, 0x80	; 128
    2cd6:	5f e3       	ldi	r21, 0x3F	; 63
    2cd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cdc:	88 23       	and	r24, r24
    2cde:	2c f4       	brge	.+10     	; 0x2cea <Stepper_u8Rotation+0x614>
    2ce0:	81 e0       	ldi	r24, 0x01	; 1
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	9e af       	std	Y+62, r25	; 0x3e
    2ce6:	8d af       	std	Y+61, r24	; 0x3d
    2ce8:	46 c0       	rjmp	.+140    	; 0x2d76 <Stepper_u8Rotation+0x6a0>
    2cea:	fe 01       	movw	r30, r28
    2cec:	ff 96       	adiw	r30, 0x3f	; 63
    2cee:	60 81       	ld	r22, Z
    2cf0:	71 81       	ldd	r23, Z+1	; 0x01
    2cf2:	82 81       	ldd	r24, Z+2	; 0x02
    2cf4:	93 81       	ldd	r25, Z+3	; 0x03
    2cf6:	20 e0       	ldi	r18, 0x00	; 0
    2cf8:	3f ef       	ldi	r19, 0xFF	; 255
    2cfa:	4f e7       	ldi	r20, 0x7F	; 127
    2cfc:	57 e4       	ldi	r21, 0x47	; 71
    2cfe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d02:	18 16       	cp	r1, r24
    2d04:	64 f5       	brge	.+88     	; 0x2d5e <Stepper_u8Rotation+0x688>
    2d06:	fe 01       	movw	r30, r28
    2d08:	ed 5b       	subi	r30, 0xBD	; 189
    2d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0c:	60 81       	ld	r22, Z
    2d0e:	71 81       	ldd	r23, Z+1	; 0x01
    2d10:	82 81       	ldd	r24, Z+2	; 0x02
    2d12:	93 81       	ldd	r25, Z+3	; 0x03
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	40 e2       	ldi	r20, 0x20	; 32
    2d1a:	51 e4       	ldi	r21, 0x41	; 65
    2d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	bc 01       	movw	r22, r24
    2d26:	cd 01       	movw	r24, r26
    2d28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d2c:	dc 01       	movw	r26, r24
    2d2e:	cb 01       	movw	r24, r22
    2d30:	9e af       	std	Y+62, r25	; 0x3e
    2d32:	8d af       	std	Y+61, r24	; 0x3d
    2d34:	0f c0       	rjmp	.+30     	; 0x2d54 <Stepper_u8Rotation+0x67e>
    2d36:	88 ec       	ldi	r24, 0xC8	; 200
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	9c af       	std	Y+60, r25	; 0x3c
    2d3c:	8b af       	std	Y+59, r24	; 0x3b
    2d3e:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d40:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d42:	01 97       	sbiw	r24, 0x01	; 1
    2d44:	f1 f7       	brne	.-4      	; 0x2d42 <Stepper_u8Rotation+0x66c>
    2d46:	9c af       	std	Y+60, r25	; 0x3c
    2d48:	8b af       	std	Y+59, r24	; 0x3b
    2d4a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d4c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d4e:	01 97       	sbiw	r24, 0x01	; 1
    2d50:	9e af       	std	Y+62, r25	; 0x3e
    2d52:	8d af       	std	Y+61, r24	; 0x3d
    2d54:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d56:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d58:	00 97       	sbiw	r24, 0x00	; 0
    2d5a:	69 f7       	brne	.-38     	; 0x2d36 <Stepper_u8Rotation+0x660>
    2d5c:	16 c0       	rjmp	.+44     	; 0x2d8a <Stepper_u8Rotation+0x6b4>
    2d5e:	fe 01       	movw	r30, r28
    2d60:	ff 96       	adiw	r30, 0x3f	; 63
    2d62:	60 81       	ld	r22, Z
    2d64:	71 81       	ldd	r23, Z+1	; 0x01
    2d66:	82 81       	ldd	r24, Z+2	; 0x02
    2d68:	93 81       	ldd	r25, Z+3	; 0x03
    2d6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	9e af       	std	Y+62, r25	; 0x3e
    2d74:	8d af       	std	Y+61, r24	; 0x3d
    2d76:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d78:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d7a:	9a af       	std	Y+58, r25	; 0x3a
    2d7c:	89 af       	std	Y+57, r24	; 0x39
    2d7e:	89 ad       	ldd	r24, Y+57	; 0x39
    2d80:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d82:	01 97       	sbiw	r24, 0x01	; 1
    2d84:	f1 f7       	brne	.-4      	; 0x2d82 <Stepper_u8Rotation+0x6ac>
    2d86:	9a af       	std	Y+58, r25	; 0x3a
    2d88:	89 af       	std	Y+57, r24	; 0x39
		u32 NumberofSteps = (u32)((Copy_u16Angle * 2048UL)/360);
		NumberofSteps = NumberofSteps / 4 ;

		if(Copy_u8Direction == STPR_AntiClockwise)
		{
			for(Local_u16_Counter=0; Local_u16_Counter < NumberofSteps ; Local_u16_Counter++)
    2d8a:	de 01       	movw	r26, r28
    2d8c:	ab 58       	subi	r26, 0x8B	; 139
    2d8e:	bf 4f       	sbci	r27, 0xFF	; 255
    2d90:	fe 01       	movw	r30, r28
    2d92:	eb 58       	subi	r30, 0x8B	; 139
    2d94:	ff 4f       	sbci	r31, 0xFF	; 255
    2d96:	80 81       	ld	r24, Z
    2d98:	91 81       	ldd	r25, Z+1	; 0x01
    2d9a:	01 96       	adiw	r24, 0x01	; 1
    2d9c:	8d 93       	st	X+, r24
    2d9e:	9c 93       	st	X, r25
    2da0:	fe 01       	movw	r30, r28
    2da2:	eb 58       	subi	r30, 0x8B	; 139
    2da4:	ff 4f       	sbci	r31, 0xFF	; 255
    2da6:	80 81       	ld	r24, Z
    2da8:	91 81       	ldd	r25, Z+1	; 0x01
    2daa:	9c 01       	movw	r18, r24
    2dac:	40 e0       	ldi	r20, 0x00	; 0
    2dae:	50 e0       	ldi	r21, 0x00	; 0
    2db0:	fe 01       	movw	r30, r28
    2db2:	ef 58       	subi	r30, 0x8F	; 143
    2db4:	ff 4f       	sbci	r31, 0xFF	; 255
    2db6:	80 81       	ld	r24, Z
    2db8:	91 81       	ldd	r25, Z+1	; 0x01
    2dba:	a2 81       	ldd	r26, Z+2	; 0x02
    2dbc:	b3 81       	ldd	r27, Z+3	; 0x03
    2dbe:	28 17       	cp	r18, r24
    2dc0:	39 07       	cpc	r19, r25
    2dc2:	4a 07       	cpc	r20, r26
    2dc4:	5b 07       	cpc	r21, r27
    2dc6:	08 f4       	brcc	.+2      	; 0x2dca <Stepper_u8Rotation+0x6f4>
    2dc8:	f2 cc       	rjmp	.-1564   	; 0x27ae <Stepper_u8Rotation+0xd8>
    2dca:	45 c2       	rjmp	.+1162   	; 0x3256 <Stepper_u8Rotation+0xb80>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_HIGH);
				_delay_ms(5);

			}
		}
		else if(Copy_u8Direction == STPR_Clockwise)
    2dcc:	fe 01       	movw	r30, r28
    2dce:	e6 58       	subi	r30, 0x86	; 134
    2dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd2:	80 81       	ld	r24, Z
    2dd4:	88 23       	and	r24, r24
    2dd6:	09 f0       	breq	.+2      	; 0x2dda <Stepper_u8Rotation+0x704>
    2dd8:	3e c2       	rjmp	.+1148   	; 0x3256 <Stepper_u8Rotation+0xb80>
		{
			for(Local_u16_Counter=0; Local_u16_Counter < NumberofSteps ; Local_u16_Counter++)
    2dda:	fe 01       	movw	r30, r28
    2ddc:	eb 58       	subi	r30, 0x8B	; 139
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	11 82       	std	Z+1, r1	; 0x01
    2de2:	10 82       	st	Z, r1
    2de4:	23 c2       	rjmp	.+1094   	; 0x322c <Stepper_u8Rotation+0xb56>
			{

				//STEP 1
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    2de6:	82 e0       	ldi	r24, 0x02	; 2
    2de8:	63 e0       	ldi	r22, 0x03	; 3
    2dea:	40 e0       	ldi	r20, 0x00	; 0
    2dec:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    2df0:	82 e0       	ldi	r24, 0x02	; 2
    2df2:	64 e0       	ldi	r22, 0x04	; 4
    2df4:	40 e0       	ldi	r20, 0x00	; 0
    2df6:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    2dfa:	82 e0       	ldi	r24, 0x02	; 2
    2dfc:	65 e0       	ldi	r22, 0x05	; 5
    2dfe:	40 e0       	ldi	r20, 0x00	; 0
    2e00:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_HIGH);
    2e04:	82 e0       	ldi	r24, 0x02	; 2
    2e06:	66 e0       	ldi	r22, 0x06	; 6
    2e08:	41 e0       	ldi	r20, 0x01	; 1
    2e0a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	90 e0       	ldi	r25, 0x00	; 0
    2e12:	a0 ea       	ldi	r26, 0xA0	; 160
    2e14:	b0 e4       	ldi	r27, 0x40	; 64
    2e16:	8d ab       	std	Y+53, r24	; 0x35
    2e18:	9e ab       	std	Y+54, r25	; 0x36
    2e1a:	af ab       	std	Y+55, r26	; 0x37
    2e1c:	b8 af       	std	Y+56, r27	; 0x38
    2e1e:	6d a9       	ldd	r22, Y+53	; 0x35
    2e20:	7e a9       	ldd	r23, Y+54	; 0x36
    2e22:	8f a9       	ldd	r24, Y+55	; 0x37
    2e24:	98 ad       	ldd	r25, Y+56	; 0x38
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	4a ef       	ldi	r20, 0xFA	; 250
    2e2c:	54 e4       	ldi	r21, 0x44	; 68
    2e2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e32:	dc 01       	movw	r26, r24
    2e34:	cb 01       	movw	r24, r22
    2e36:	89 ab       	std	Y+49, r24	; 0x31
    2e38:	9a ab       	std	Y+50, r25	; 0x32
    2e3a:	ab ab       	std	Y+51, r26	; 0x33
    2e3c:	bc ab       	std	Y+52, r27	; 0x34
    2e3e:	69 a9       	ldd	r22, Y+49	; 0x31
    2e40:	7a a9       	ldd	r23, Y+50	; 0x32
    2e42:	8b a9       	ldd	r24, Y+51	; 0x33
    2e44:	9c a9       	ldd	r25, Y+52	; 0x34
    2e46:	20 e0       	ldi	r18, 0x00	; 0
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	40 e8       	ldi	r20, 0x80	; 128
    2e4c:	5f e3       	ldi	r21, 0x3F	; 63
    2e4e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e52:	88 23       	and	r24, r24
    2e54:	2c f4       	brge	.+10     	; 0x2e60 <Stepper_u8Rotation+0x78a>
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	98 ab       	std	Y+48, r25	; 0x30
    2e5c:	8f a7       	std	Y+47, r24	; 0x2f
    2e5e:	3f c0       	rjmp	.+126    	; 0x2ede <Stepper_u8Rotation+0x808>
    2e60:	69 a9       	ldd	r22, Y+49	; 0x31
    2e62:	7a a9       	ldd	r23, Y+50	; 0x32
    2e64:	8b a9       	ldd	r24, Y+51	; 0x33
    2e66:	9c a9       	ldd	r25, Y+52	; 0x34
    2e68:	20 e0       	ldi	r18, 0x00	; 0
    2e6a:	3f ef       	ldi	r19, 0xFF	; 255
    2e6c:	4f e7       	ldi	r20, 0x7F	; 127
    2e6e:	57 e4       	ldi	r21, 0x47	; 71
    2e70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e74:	18 16       	cp	r1, r24
    2e76:	4c f5       	brge	.+82     	; 0x2eca <Stepper_u8Rotation+0x7f4>
    2e78:	6d a9       	ldd	r22, Y+53	; 0x35
    2e7a:	7e a9       	ldd	r23, Y+54	; 0x36
    2e7c:	8f a9       	ldd	r24, Y+55	; 0x37
    2e7e:	98 ad       	ldd	r25, Y+56	; 0x38
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	40 e2       	ldi	r20, 0x20	; 32
    2e86:	51 e4       	ldi	r21, 0x41	; 65
    2e88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e8c:	dc 01       	movw	r26, r24
    2e8e:	cb 01       	movw	r24, r22
    2e90:	bc 01       	movw	r22, r24
    2e92:	cd 01       	movw	r24, r26
    2e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	98 ab       	std	Y+48, r25	; 0x30
    2e9e:	8f a7       	std	Y+47, r24	; 0x2f
    2ea0:	0f c0       	rjmp	.+30     	; 0x2ec0 <Stepper_u8Rotation+0x7ea>
    2ea2:	88 ec       	ldi	r24, 0xC8	; 200
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	9e a7       	std	Y+46, r25	; 0x2e
    2ea8:	8d a7       	std	Y+45, r24	; 0x2d
    2eaa:	8d a5       	ldd	r24, Y+45	; 0x2d
    2eac:	9e a5       	ldd	r25, Y+46	; 0x2e
    2eae:	01 97       	sbiw	r24, 0x01	; 1
    2eb0:	f1 f7       	brne	.-4      	; 0x2eae <Stepper_u8Rotation+0x7d8>
    2eb2:	9e a7       	std	Y+46, r25	; 0x2e
    2eb4:	8d a7       	std	Y+45, r24	; 0x2d
    2eb6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eb8:	98 a9       	ldd	r25, Y+48	; 0x30
    2eba:	01 97       	sbiw	r24, 0x01	; 1
    2ebc:	98 ab       	std	Y+48, r25	; 0x30
    2ebe:	8f a7       	std	Y+47, r24	; 0x2f
    2ec0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ec2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ec4:	00 97       	sbiw	r24, 0x00	; 0
    2ec6:	69 f7       	brne	.-38     	; 0x2ea2 <Stepper_u8Rotation+0x7cc>
    2ec8:	14 c0       	rjmp	.+40     	; 0x2ef2 <Stepper_u8Rotation+0x81c>
    2eca:	69 a9       	ldd	r22, Y+49	; 0x31
    2ecc:	7a a9       	ldd	r23, Y+50	; 0x32
    2ece:	8b a9       	ldd	r24, Y+51	; 0x33
    2ed0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ed2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed6:	dc 01       	movw	r26, r24
    2ed8:	cb 01       	movw	r24, r22
    2eda:	98 ab       	std	Y+48, r25	; 0x30
    2edc:	8f a7       	std	Y+47, r24	; 0x2f
    2ede:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ee0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ee2:	9c a7       	std	Y+44, r25	; 0x2c
    2ee4:	8b a7       	std	Y+43, r24	; 0x2b
    2ee6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ee8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	f1 f7       	brne	.-4      	; 0x2eea <Stepper_u8Rotation+0x814>
    2eee:	9c a7       	std	Y+44, r25	; 0x2c
    2ef0:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(5);

				//STEP 2
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    2ef2:	82 e0       	ldi	r24, 0x02	; 2
    2ef4:	63 e0       	ldi	r22, 0x03	; 3
    2ef6:	40 e0       	ldi	r20, 0x00	; 0
    2ef8:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    2efc:	82 e0       	ldi	r24, 0x02	; 2
    2efe:	64 e0       	ldi	r22, 0x04	; 4
    2f00:	40 e0       	ldi	r20, 0x00	; 0
    2f02:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_HIGH);
    2f06:	82 e0       	ldi	r24, 0x02	; 2
    2f08:	65 e0       	ldi	r22, 0x05	; 5
    2f0a:	41 e0       	ldi	r20, 0x01	; 1
    2f0c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    2f10:	82 e0       	ldi	r24, 0x02	; 2
    2f12:	66 e0       	ldi	r22, 0x06	; 6
    2f14:	40 e0       	ldi	r20, 0x00	; 0
    2f16:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
    2f1a:	80 e0       	ldi	r24, 0x00	; 0
    2f1c:	90 e0       	ldi	r25, 0x00	; 0
    2f1e:	a0 ea       	ldi	r26, 0xA0	; 160
    2f20:	b0 e4       	ldi	r27, 0x40	; 64
    2f22:	8f a3       	std	Y+39, r24	; 0x27
    2f24:	98 a7       	std	Y+40, r25	; 0x28
    2f26:	a9 a7       	std	Y+41, r26	; 0x29
    2f28:	ba a7       	std	Y+42, r27	; 0x2a
    2f2a:	6f a1       	ldd	r22, Y+39	; 0x27
    2f2c:	78 a5       	ldd	r23, Y+40	; 0x28
    2f2e:	89 a5       	ldd	r24, Y+41	; 0x29
    2f30:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f32:	20 e0       	ldi	r18, 0x00	; 0
    2f34:	30 e0       	ldi	r19, 0x00	; 0
    2f36:	4a ef       	ldi	r20, 0xFA	; 250
    2f38:	54 e4       	ldi	r21, 0x44	; 68
    2f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3e:	dc 01       	movw	r26, r24
    2f40:	cb 01       	movw	r24, r22
    2f42:	8b a3       	std	Y+35, r24	; 0x23
    2f44:	9c a3       	std	Y+36, r25	; 0x24
    2f46:	ad a3       	std	Y+37, r26	; 0x25
    2f48:	be a3       	std	Y+38, r27	; 0x26
    2f4a:	6b a1       	ldd	r22, Y+35	; 0x23
    2f4c:	7c a1       	ldd	r23, Y+36	; 0x24
    2f4e:	8d a1       	ldd	r24, Y+37	; 0x25
    2f50:	9e a1       	ldd	r25, Y+38	; 0x26
    2f52:	20 e0       	ldi	r18, 0x00	; 0
    2f54:	30 e0       	ldi	r19, 0x00	; 0
    2f56:	40 e8       	ldi	r20, 0x80	; 128
    2f58:	5f e3       	ldi	r21, 0x3F	; 63
    2f5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f5e:	88 23       	and	r24, r24
    2f60:	2c f4       	brge	.+10     	; 0x2f6c <Stepper_u8Rotation+0x896>
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	90 e0       	ldi	r25, 0x00	; 0
    2f66:	9a a3       	std	Y+34, r25	; 0x22
    2f68:	89 a3       	std	Y+33, r24	; 0x21
    2f6a:	3f c0       	rjmp	.+126    	; 0x2fea <Stepper_u8Rotation+0x914>
    2f6c:	6b a1       	ldd	r22, Y+35	; 0x23
    2f6e:	7c a1       	ldd	r23, Y+36	; 0x24
    2f70:	8d a1       	ldd	r24, Y+37	; 0x25
    2f72:	9e a1       	ldd	r25, Y+38	; 0x26
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	3f ef       	ldi	r19, 0xFF	; 255
    2f78:	4f e7       	ldi	r20, 0x7F	; 127
    2f7a:	57 e4       	ldi	r21, 0x47	; 71
    2f7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f80:	18 16       	cp	r1, r24
    2f82:	4c f5       	brge	.+82     	; 0x2fd6 <Stepper_u8Rotation+0x900>
    2f84:	6f a1       	ldd	r22, Y+39	; 0x27
    2f86:	78 a5       	ldd	r23, Y+40	; 0x28
    2f88:	89 a5       	ldd	r24, Y+41	; 0x29
    2f8a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f8c:	20 e0       	ldi	r18, 0x00	; 0
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	40 e2       	ldi	r20, 0x20	; 32
    2f92:	51 e4       	ldi	r21, 0x41	; 65
    2f94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	bc 01       	movw	r22, r24
    2f9e:	cd 01       	movw	r24, r26
    2fa0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	cb 01       	movw	r24, r22
    2fa8:	9a a3       	std	Y+34, r25	; 0x22
    2faa:	89 a3       	std	Y+33, r24	; 0x21
    2fac:	0f c0       	rjmp	.+30     	; 0x2fcc <Stepper_u8Rotation+0x8f6>
    2fae:	88 ec       	ldi	r24, 0xC8	; 200
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	98 a3       	std	Y+32, r25	; 0x20
    2fb4:	8f 8f       	std	Y+31, r24	; 0x1f
    2fb6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fb8:	98 a1       	ldd	r25, Y+32	; 0x20
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	f1 f7       	brne	.-4      	; 0x2fba <Stepper_u8Rotation+0x8e4>
    2fbe:	98 a3       	std	Y+32, r25	; 0x20
    2fc0:	8f 8f       	std	Y+31, r24	; 0x1f
    2fc2:	89 a1       	ldd	r24, Y+33	; 0x21
    2fc4:	9a a1       	ldd	r25, Y+34	; 0x22
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	9a a3       	std	Y+34, r25	; 0x22
    2fca:	89 a3       	std	Y+33, r24	; 0x21
    2fcc:	89 a1       	ldd	r24, Y+33	; 0x21
    2fce:	9a a1       	ldd	r25, Y+34	; 0x22
    2fd0:	00 97       	sbiw	r24, 0x00	; 0
    2fd2:	69 f7       	brne	.-38     	; 0x2fae <Stepper_u8Rotation+0x8d8>
    2fd4:	14 c0       	rjmp	.+40     	; 0x2ffe <Stepper_u8Rotation+0x928>
    2fd6:	6b a1       	ldd	r22, Y+35	; 0x23
    2fd8:	7c a1       	ldd	r23, Y+36	; 0x24
    2fda:	8d a1       	ldd	r24, Y+37	; 0x25
    2fdc:	9e a1       	ldd	r25, Y+38	; 0x26
    2fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	cb 01       	movw	r24, r22
    2fe6:	9a a3       	std	Y+34, r25	; 0x22
    2fe8:	89 a3       	std	Y+33, r24	; 0x21
    2fea:	89 a1       	ldd	r24, Y+33	; 0x21
    2fec:	9a a1       	ldd	r25, Y+34	; 0x22
    2fee:	9e 8f       	std	Y+30, r25	; 0x1e
    2ff0:	8d 8f       	std	Y+29, r24	; 0x1d
    2ff2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ff4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2ff6:	01 97       	sbiw	r24, 0x01	; 1
    2ff8:	f1 f7       	brne	.-4      	; 0x2ff6 <Stepper_u8Rotation+0x920>
    2ffa:	9e 8f       	std	Y+30, r25	; 0x1e
    2ffc:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(5);

				//STEP 3
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    2ffe:	82 e0       	ldi	r24, 0x02	; 2
    3000:	63 e0       	ldi	r22, 0x03	; 3
    3002:	40 e0       	ldi	r20, 0x00	; 0
    3004:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_HIGH);
    3008:	82 e0       	ldi	r24, 0x02	; 2
    300a:	64 e0       	ldi	r22, 0x04	; 4
    300c:	41 e0       	ldi	r20, 0x01	; 1
    300e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    3012:	82 e0       	ldi	r24, 0x02	; 2
    3014:	65 e0       	ldi	r22, 0x05	; 5
    3016:	40 e0       	ldi	r20, 0x00	; 0
    3018:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    301c:	82 e0       	ldi	r24, 0x02	; 2
    301e:	66 e0       	ldi	r22, 0x06	; 6
    3020:	40 e0       	ldi	r20, 0x00	; 0
    3022:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
    3026:	80 e0       	ldi	r24, 0x00	; 0
    3028:	90 e0       	ldi	r25, 0x00	; 0
    302a:	a0 ea       	ldi	r26, 0xA0	; 160
    302c:	b0 e4       	ldi	r27, 0x40	; 64
    302e:	89 8f       	std	Y+25, r24	; 0x19
    3030:	9a 8f       	std	Y+26, r25	; 0x1a
    3032:	ab 8f       	std	Y+27, r26	; 0x1b
    3034:	bc 8f       	std	Y+28, r27	; 0x1c
    3036:	69 8d       	ldd	r22, Y+25	; 0x19
    3038:	7a 8d       	ldd	r23, Y+26	; 0x1a
    303a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    303c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    303e:	20 e0       	ldi	r18, 0x00	; 0
    3040:	30 e0       	ldi	r19, 0x00	; 0
    3042:	4a ef       	ldi	r20, 0xFA	; 250
    3044:	54 e4       	ldi	r21, 0x44	; 68
    3046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304a:	dc 01       	movw	r26, r24
    304c:	cb 01       	movw	r24, r22
    304e:	8d 8b       	std	Y+21, r24	; 0x15
    3050:	9e 8b       	std	Y+22, r25	; 0x16
    3052:	af 8b       	std	Y+23, r26	; 0x17
    3054:	b8 8f       	std	Y+24, r27	; 0x18
    3056:	6d 89       	ldd	r22, Y+21	; 0x15
    3058:	7e 89       	ldd	r23, Y+22	; 0x16
    305a:	8f 89       	ldd	r24, Y+23	; 0x17
    305c:	98 8d       	ldd	r25, Y+24	; 0x18
    305e:	20 e0       	ldi	r18, 0x00	; 0
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	40 e8       	ldi	r20, 0x80	; 128
    3064:	5f e3       	ldi	r21, 0x3F	; 63
    3066:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    306a:	88 23       	and	r24, r24
    306c:	2c f4       	brge	.+10     	; 0x3078 <Stepper_u8Rotation+0x9a2>
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	9c 8b       	std	Y+20, r25	; 0x14
    3074:	8b 8b       	std	Y+19, r24	; 0x13
    3076:	3f c0       	rjmp	.+126    	; 0x30f6 <Stepper_u8Rotation+0xa20>
    3078:	6d 89       	ldd	r22, Y+21	; 0x15
    307a:	7e 89       	ldd	r23, Y+22	; 0x16
    307c:	8f 89       	ldd	r24, Y+23	; 0x17
    307e:	98 8d       	ldd	r25, Y+24	; 0x18
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	3f ef       	ldi	r19, 0xFF	; 255
    3084:	4f e7       	ldi	r20, 0x7F	; 127
    3086:	57 e4       	ldi	r21, 0x47	; 71
    3088:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    308c:	18 16       	cp	r1, r24
    308e:	4c f5       	brge	.+82     	; 0x30e2 <Stepper_u8Rotation+0xa0c>
    3090:	69 8d       	ldd	r22, Y+25	; 0x19
    3092:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3094:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3096:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3098:	20 e0       	ldi	r18, 0x00	; 0
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	40 e2       	ldi	r20, 0x20	; 32
    309e:	51 e4       	ldi	r21, 0x41	; 65
    30a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a4:	dc 01       	movw	r26, r24
    30a6:	cb 01       	movw	r24, r22
    30a8:	bc 01       	movw	r22, r24
    30aa:	cd 01       	movw	r24, r26
    30ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30b0:	dc 01       	movw	r26, r24
    30b2:	cb 01       	movw	r24, r22
    30b4:	9c 8b       	std	Y+20, r25	; 0x14
    30b6:	8b 8b       	std	Y+19, r24	; 0x13
    30b8:	0f c0       	rjmp	.+30     	; 0x30d8 <Stepper_u8Rotation+0xa02>
    30ba:	88 ec       	ldi	r24, 0xC8	; 200
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	9a 8b       	std	Y+18, r25	; 0x12
    30c0:	89 8b       	std	Y+17, r24	; 0x11
    30c2:	89 89       	ldd	r24, Y+17	; 0x11
    30c4:	9a 89       	ldd	r25, Y+18	; 0x12
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	f1 f7       	brne	.-4      	; 0x30c6 <Stepper_u8Rotation+0x9f0>
    30ca:	9a 8b       	std	Y+18, r25	; 0x12
    30cc:	89 8b       	std	Y+17, r24	; 0x11
    30ce:	8b 89       	ldd	r24, Y+19	; 0x13
    30d0:	9c 89       	ldd	r25, Y+20	; 0x14
    30d2:	01 97       	sbiw	r24, 0x01	; 1
    30d4:	9c 8b       	std	Y+20, r25	; 0x14
    30d6:	8b 8b       	std	Y+19, r24	; 0x13
    30d8:	8b 89       	ldd	r24, Y+19	; 0x13
    30da:	9c 89       	ldd	r25, Y+20	; 0x14
    30dc:	00 97       	sbiw	r24, 0x00	; 0
    30de:	69 f7       	brne	.-38     	; 0x30ba <Stepper_u8Rotation+0x9e4>
    30e0:	14 c0       	rjmp	.+40     	; 0x310a <Stepper_u8Rotation+0xa34>
    30e2:	6d 89       	ldd	r22, Y+21	; 0x15
    30e4:	7e 89       	ldd	r23, Y+22	; 0x16
    30e6:	8f 89       	ldd	r24, Y+23	; 0x17
    30e8:	98 8d       	ldd	r25, Y+24	; 0x18
    30ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ee:	dc 01       	movw	r26, r24
    30f0:	cb 01       	movw	r24, r22
    30f2:	9c 8b       	std	Y+20, r25	; 0x14
    30f4:	8b 8b       	std	Y+19, r24	; 0x13
    30f6:	8b 89       	ldd	r24, Y+19	; 0x13
    30f8:	9c 89       	ldd	r25, Y+20	; 0x14
    30fa:	98 8b       	std	Y+16, r25	; 0x10
    30fc:	8f 87       	std	Y+15, r24	; 0x0f
    30fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3100:	98 89       	ldd	r25, Y+16	; 0x10
    3102:	01 97       	sbiw	r24, 0x01	; 1
    3104:	f1 f7       	brne	.-4      	; 0x3102 <Stepper_u8Rotation+0xa2c>
    3106:	98 8b       	std	Y+16, r25	; 0x10
    3108:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(5);

				//STEP 4
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_HIGH);
    310a:	82 e0       	ldi	r24, 0x02	; 2
    310c:	63 e0       	ldi	r22, 0x03	; 3
    310e:	41 e0       	ldi	r20, 0x01	; 1
    3110:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    3114:	82 e0       	ldi	r24, 0x02	; 2
    3116:	64 e0       	ldi	r22, 0x04	; 4
    3118:	40 e0       	ldi	r20, 0x00	; 0
    311a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    311e:	82 e0       	ldi	r24, 0x02	; 2
    3120:	65 e0       	ldi	r22, 0x05	; 5
    3122:	40 e0       	ldi	r20, 0x00	; 0
    3124:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    3128:	82 e0       	ldi	r24, 0x02	; 2
    312a:	66 e0       	ldi	r22, 0x06	; 6
    312c:	40 e0       	ldi	r20, 0x00	; 0
    312e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
    3132:	80 e0       	ldi	r24, 0x00	; 0
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	a0 ea       	ldi	r26, 0xA0	; 160
    3138:	b0 e4       	ldi	r27, 0x40	; 64
    313a:	8b 87       	std	Y+11, r24	; 0x0b
    313c:	9c 87       	std	Y+12, r25	; 0x0c
    313e:	ad 87       	std	Y+13, r26	; 0x0d
    3140:	be 87       	std	Y+14, r27	; 0x0e
    3142:	6b 85       	ldd	r22, Y+11	; 0x0b
    3144:	7c 85       	ldd	r23, Y+12	; 0x0c
    3146:	8d 85       	ldd	r24, Y+13	; 0x0d
    3148:	9e 85       	ldd	r25, Y+14	; 0x0e
    314a:	20 e0       	ldi	r18, 0x00	; 0
    314c:	30 e0       	ldi	r19, 0x00	; 0
    314e:	4a ef       	ldi	r20, 0xFA	; 250
    3150:	54 e4       	ldi	r21, 0x44	; 68
    3152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3156:	dc 01       	movw	r26, r24
    3158:	cb 01       	movw	r24, r22
    315a:	8f 83       	std	Y+7, r24	; 0x07
    315c:	98 87       	std	Y+8, r25	; 0x08
    315e:	a9 87       	std	Y+9, r26	; 0x09
    3160:	ba 87       	std	Y+10, r27	; 0x0a
    3162:	6f 81       	ldd	r22, Y+7	; 0x07
    3164:	78 85       	ldd	r23, Y+8	; 0x08
    3166:	89 85       	ldd	r24, Y+9	; 0x09
    3168:	9a 85       	ldd	r25, Y+10	; 0x0a
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	40 e8       	ldi	r20, 0x80	; 128
    3170:	5f e3       	ldi	r21, 0x3F	; 63
    3172:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3176:	88 23       	and	r24, r24
    3178:	2c f4       	brge	.+10     	; 0x3184 <Stepper_u8Rotation+0xaae>
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	9e 83       	std	Y+6, r25	; 0x06
    3180:	8d 83       	std	Y+5, r24	; 0x05
    3182:	3f c0       	rjmp	.+126    	; 0x3202 <Stepper_u8Rotation+0xb2c>
    3184:	6f 81       	ldd	r22, Y+7	; 0x07
    3186:	78 85       	ldd	r23, Y+8	; 0x08
    3188:	89 85       	ldd	r24, Y+9	; 0x09
    318a:	9a 85       	ldd	r25, Y+10	; 0x0a
    318c:	20 e0       	ldi	r18, 0x00	; 0
    318e:	3f ef       	ldi	r19, 0xFF	; 255
    3190:	4f e7       	ldi	r20, 0x7F	; 127
    3192:	57 e4       	ldi	r21, 0x47	; 71
    3194:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3198:	18 16       	cp	r1, r24
    319a:	4c f5       	brge	.+82     	; 0x31ee <Stepper_u8Rotation+0xb18>
    319c:	6b 85       	ldd	r22, Y+11	; 0x0b
    319e:	7c 85       	ldd	r23, Y+12	; 0x0c
    31a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31a4:	20 e0       	ldi	r18, 0x00	; 0
    31a6:	30 e0       	ldi	r19, 0x00	; 0
    31a8:	40 e2       	ldi	r20, 0x20	; 32
    31aa:	51 e4       	ldi	r21, 0x41	; 65
    31ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b0:	dc 01       	movw	r26, r24
    31b2:	cb 01       	movw	r24, r22
    31b4:	bc 01       	movw	r22, r24
    31b6:	cd 01       	movw	r24, r26
    31b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31bc:	dc 01       	movw	r26, r24
    31be:	cb 01       	movw	r24, r22
    31c0:	9e 83       	std	Y+6, r25	; 0x06
    31c2:	8d 83       	std	Y+5, r24	; 0x05
    31c4:	0f c0       	rjmp	.+30     	; 0x31e4 <Stepper_u8Rotation+0xb0e>
    31c6:	88 ec       	ldi	r24, 0xC8	; 200
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	9c 83       	std	Y+4, r25	; 0x04
    31cc:	8b 83       	std	Y+3, r24	; 0x03
    31ce:	8b 81       	ldd	r24, Y+3	; 0x03
    31d0:	9c 81       	ldd	r25, Y+4	; 0x04
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	f1 f7       	brne	.-4      	; 0x31d2 <Stepper_u8Rotation+0xafc>
    31d6:	9c 83       	std	Y+4, r25	; 0x04
    31d8:	8b 83       	std	Y+3, r24	; 0x03
    31da:	8d 81       	ldd	r24, Y+5	; 0x05
    31dc:	9e 81       	ldd	r25, Y+6	; 0x06
    31de:	01 97       	sbiw	r24, 0x01	; 1
    31e0:	9e 83       	std	Y+6, r25	; 0x06
    31e2:	8d 83       	std	Y+5, r24	; 0x05
    31e4:	8d 81       	ldd	r24, Y+5	; 0x05
    31e6:	9e 81       	ldd	r25, Y+6	; 0x06
    31e8:	00 97       	sbiw	r24, 0x00	; 0
    31ea:	69 f7       	brne	.-38     	; 0x31c6 <Stepper_u8Rotation+0xaf0>
    31ec:	14 c0       	rjmp	.+40     	; 0x3216 <Stepper_u8Rotation+0xb40>
    31ee:	6f 81       	ldd	r22, Y+7	; 0x07
    31f0:	78 85       	ldd	r23, Y+8	; 0x08
    31f2:	89 85       	ldd	r24, Y+9	; 0x09
    31f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    31f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	9e 83       	std	Y+6, r25	; 0x06
    3200:	8d 83       	std	Y+5, r24	; 0x05
    3202:	8d 81       	ldd	r24, Y+5	; 0x05
    3204:	9e 81       	ldd	r25, Y+6	; 0x06
    3206:	9a 83       	std	Y+2, r25	; 0x02
    3208:	89 83       	std	Y+1, r24	; 0x01
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	9a 81       	ldd	r25, Y+2	; 0x02
    320e:	01 97       	sbiw	r24, 0x01	; 1
    3210:	f1 f7       	brne	.-4      	; 0x320e <Stepper_u8Rotation+0xb38>
    3212:	9a 83       	std	Y+2, r25	; 0x02
    3214:	89 83       	std	Y+1, r24	; 0x01

			}
		}
		else if(Copy_u8Direction == STPR_Clockwise)
		{
			for(Local_u16_Counter=0; Local_u16_Counter < NumberofSteps ; Local_u16_Counter++)
    3216:	de 01       	movw	r26, r28
    3218:	ab 58       	subi	r26, 0x8B	; 139
    321a:	bf 4f       	sbci	r27, 0xFF	; 255
    321c:	fe 01       	movw	r30, r28
    321e:	eb 58       	subi	r30, 0x8B	; 139
    3220:	ff 4f       	sbci	r31, 0xFF	; 255
    3222:	80 81       	ld	r24, Z
    3224:	91 81       	ldd	r25, Z+1	; 0x01
    3226:	01 96       	adiw	r24, 0x01	; 1
    3228:	8d 93       	st	X+, r24
    322a:	9c 93       	st	X, r25
    322c:	fe 01       	movw	r30, r28
    322e:	eb 58       	subi	r30, 0x8B	; 139
    3230:	ff 4f       	sbci	r31, 0xFF	; 255
    3232:	80 81       	ld	r24, Z
    3234:	91 81       	ldd	r25, Z+1	; 0x01
    3236:	9c 01       	movw	r18, r24
    3238:	40 e0       	ldi	r20, 0x00	; 0
    323a:	50 e0       	ldi	r21, 0x00	; 0
    323c:	fe 01       	movw	r30, r28
    323e:	ef 58       	subi	r30, 0x8F	; 143
    3240:	ff 4f       	sbci	r31, 0xFF	; 255
    3242:	80 81       	ld	r24, Z
    3244:	91 81       	ldd	r25, Z+1	; 0x01
    3246:	a2 81       	ldd	r26, Z+2	; 0x02
    3248:	b3 81       	ldd	r27, Z+3	; 0x03
    324a:	28 17       	cp	r18, r24
    324c:	39 07       	cpc	r19, r25
    324e:	4a 07       	cpc	r20, r26
    3250:	5b 07       	cpc	r21, r27
    3252:	08 f4       	brcc	.+2      	; 0x3256 <Stepper_u8Rotation+0xb80>
    3254:	c8 cd       	rjmp	.-1136   	; 0x2de6 <Stepper_u8Rotation+0x710>
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
				MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
				_delay_ms(5);
			}
		}
		MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    3256:	82 e0       	ldi	r24, 0x02	; 2
    3258:	63 e0       	ldi	r22, 0x03	; 3
    325a:	40 e0       	ldi	r20, 0x00	; 0
    325c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
		MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    3260:	82 e0       	ldi	r24, 0x02	; 2
    3262:	64 e0       	ldi	r22, 0x04	; 4
    3264:	40 e0       	ldi	r20, 0x00	; 0
    3266:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
		MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    326a:	82 e0       	ldi	r24, 0x02	; 2
    326c:	65 e0       	ldi	r22, 0x05	; 5
    326e:	40 e0       	ldi	r20, 0x00	; 0
    3270:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
		MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    3274:	82 e0       	ldi	r24, 0x02	; 2
    3276:	66 e0       	ldi	r22, 0x06	; 6
    3278:	40 e0       	ldi	r20, 0x00	; 0
    327a:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
    327e:	04 c0       	rjmp	.+8      	; 0x3288 <Stepper_u8Rotation+0xbb2>


	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    3280:	fe 01       	movw	r30, r28
    3282:	e9 58       	subi	r30, 0x89	; 137
    3284:	ff 4f       	sbci	r31, 0xFF	; 255
    3286:	10 82       	st	Z, r1
	}
	return Local_u8ErrorState;
    3288:	fe 01       	movw	r30, r28
    328a:	e9 58       	subi	r30, 0x89	; 137
    328c:	ff 4f       	sbci	r31, 0xFF	; 255
    328e:	80 81       	ld	r24, Z
}
    3290:	c6 58       	subi	r28, 0x86	; 134
    3292:	df 4f       	sbci	r29, 0xFF	; 255
    3294:	0f b6       	in	r0, 0x3f	; 63
    3296:	f8 94       	cli
    3298:	de bf       	out	0x3e, r29	; 62
    329a:	0f be       	out	0x3f, r0	; 63
    329c:	cd bf       	out	0x3d, r28	; 61
    329e:	cf 91       	pop	r28
    32a0:	df 91       	pop	r29
    32a2:	1f 91       	pop	r17
    32a4:	0f 91       	pop	r16
    32a6:	08 95       	ret

000032a8 <Stepper_voidStop>:
/*******************************************************************************************************/
/*                              Stepper Motor Stop Rotation Function                                   */
/*******************************************************************************************************/

void Stepper_voidStop(void)
{
    32a8:	df 93       	push	r29
    32aa:	cf 93       	push	r28
    32ac:	cd b7       	in	r28, 0x3d	; 61
    32ae:	de b7       	in	r29, 0x3e	; 62
	MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_BLUE_COIL,DIO_u8_LOW);
    32b0:	82 e0       	ldi	r24, 0x02	; 2
    32b2:	63 e0       	ldi	r22, 0x03	; 3
    32b4:	40 e0       	ldi	r20, 0x00	; 0
    32b6:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
	MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_PINK_COIL,DIO_u8_LOW);
    32ba:	82 e0       	ldi	r24, 0x02	; 2
    32bc:	64 e0       	ldi	r22, 0x04	; 4
    32be:	40 e0       	ldi	r20, 0x00	; 0
    32c0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
	MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_YELLOW_COIL,DIO_u8_LOW);
    32c4:	82 e0       	ldi	r24, 0x02	; 2
    32c6:	65 e0       	ldi	r22, 0x05	; 5
    32c8:	40 e0       	ldi	r20, 0x00	; 0
    32ca:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
	MDIO_u8SetPinValue(STEPPER_MOTOR,STEPPER_MOTOR_ORANGE_COIL,DIO_u8_LOW);
    32ce:	82 e0       	ldi	r24, 0x02	; 2
    32d0:	66 e0       	ldi	r22, 0x06	; 6
    32d2:	40 e0       	ldi	r20, 0x00	; 0
    32d4:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>

}
    32d8:	cf 91       	pop	r28
    32da:	df 91       	pop	r29
    32dc:	08 95       	ret

000032de <HSERVO_voidSetAngle>:
/*******************************************************************************************************/
/*                                      SERVO Set Angle Function                                       */
/*******************************************************************************************************/

void HSERVO_voidSetAngle(u8 Copy_u8ServoAngle)
{
    32de:	df 93       	push	r29
    32e0:	cf 93       	push	r28
    32e2:	00 d0       	rcall	.+0      	; 0x32e4 <HSERVO_voidSetAngle+0x6>
    32e4:	0f 92       	push	r0
    32e6:	cd b7       	in	r28, 0x3d	; 61
    32e8:	de b7       	in	r29, 0x3e	; 62
    32ea:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16OCRValue;
	if(Copy_u8ServoAngle<=180 && Copy_u8ServoAngle>= 0 )
    32ec:	8b 81       	ldd	r24, Y+3	; 0x03
    32ee:	85 3b       	cpi	r24, 0xB5	; 181
    32f0:	10 f5       	brcc	.+68     	; 0x3336 <HSERVO_voidSetAngle+0x58>
	{
		Local_u16OCRValue =((2000UL* Copy_u8ServoAngle)/180)+600;
    32f2:	8b 81       	ldd	r24, Y+3	; 0x03
    32f4:	88 2f       	mov	r24, r24
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	a0 e0       	ldi	r26, 0x00	; 0
    32fa:	b0 e0       	ldi	r27, 0x00	; 0
    32fc:	20 ed       	ldi	r18, 0xD0	; 208
    32fe:	37 e0       	ldi	r19, 0x07	; 7
    3300:	40 e0       	ldi	r20, 0x00	; 0
    3302:	50 e0       	ldi	r21, 0x00	; 0
    3304:	bc 01       	movw	r22, r24
    3306:	cd 01       	movw	r24, r26
    3308:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <__mulsi3>
    330c:	dc 01       	movw	r26, r24
    330e:	cb 01       	movw	r24, r22
    3310:	24 eb       	ldi	r18, 0xB4	; 180
    3312:	30 e0       	ldi	r19, 0x00	; 0
    3314:	40 e0       	ldi	r20, 0x00	; 0
    3316:	50 e0       	ldi	r21, 0x00	; 0
    3318:	bc 01       	movw	r22, r24
    331a:	cd 01       	movw	r24, r26
    331c:	0e 94 2d 23 	call	0x465a	; 0x465a <__udivmodsi4>
    3320:	da 01       	movw	r26, r20
    3322:	c9 01       	movw	r24, r18
    3324:	88 5a       	subi	r24, 0xA8	; 168
    3326:	9d 4f       	sbci	r25, 0xFD	; 253
    3328:	9a 83       	std	Y+2, r25	; 0x02
    332a:	89 83       	std	Y+1, r24	; 0x01

		MTMR_voidTimer1SetCompareMatchValueChannelA(Copy_u8ServoAngle);
    332c:	8b 81       	ldd	r24, Y+3	; 0x03
    332e:	88 2f       	mov	r24, r24
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	0e 94 04 07 	call	0xe08	; 0xe08 <MTMR_voidTimer1SetCompareMatchValueChannelA>
	else
	{
		/*Do Nothing*/
	}

}
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	cf 91       	pop	r28
    333e:	df 91       	pop	r29
    3340:	08 95       	ret

00003342 <HLED_VoidLed_On>:

/*******************************************************************************************************/
/*                                    Function That Turns On LED                                       */
/*******************************************************************************************************/
void HLED_VoidLed_On     (u8 Copy_u8LedPortNumber,u8 Copy_u8LedPinNumber)
{
    3342:	df 93       	push	r29
    3344:	cf 93       	push	r28
    3346:	00 d0       	rcall	.+0      	; 0x3348 <HLED_VoidLed_On+0x6>
    3348:	cd b7       	in	r28, 0x3d	; 61
    334a:	de b7       	in	r29, 0x3e	; 62
    334c:	89 83       	std	Y+1, r24	; 0x01
    334e:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_u8SetPinValue(Copy_u8LedPortNumber , Copy_u8LedPinNumber , DIO_u8_HIGH);
    3350:	89 81       	ldd	r24, Y+1	; 0x01
    3352:	6a 81       	ldd	r22, Y+2	; 0x02
    3354:	41 e0       	ldi	r20, 0x01	; 1
    3356:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
}
    335a:	0f 90       	pop	r0
    335c:	0f 90       	pop	r0
    335e:	cf 91       	pop	r28
    3360:	df 91       	pop	r29
    3362:	08 95       	ret

00003364 <HLED_VoidLed_Off>:

/*******************************************************************************************************/
/*                                   Function That Turns Off LED                                       */
/*******************************************************************************************************/
void HLED_VoidLed_Off    (u8 Copy_u8LedPortNumber , u8 Copy_u8LedPinNumber)
{
    3364:	df 93       	push	r29
    3366:	cf 93       	push	r28
    3368:	00 d0       	rcall	.+0      	; 0x336a <HLED_VoidLed_Off+0x6>
    336a:	cd b7       	in	r28, 0x3d	; 61
    336c:	de b7       	in	r29, 0x3e	; 62
    336e:	89 83       	std	Y+1, r24	; 0x01
    3370:	6a 83       	std	Y+2, r22	; 0x02
	MDIO_u8SetPinValue(Copy_u8LedPortNumber , Copy_u8LedPinNumber , DIO_u8_LOW);
    3372:	89 81       	ldd	r24, Y+1	; 0x01
    3374:	6a 81       	ldd	r22, Y+2	; 0x02
    3376:	40 e0       	ldi	r20, 0x00	; 0
    3378:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
}
    337c:	0f 90       	pop	r0
    337e:	0f 90       	pop	r0
    3380:	cf 91       	pop	r28
    3382:	df 91       	pop	r29
    3384:	08 95       	ret

00003386 <HLED_VoidLed_Toggle>:

/*******************************************************************************************************/
/*                                     Function That Toggles LED                                       */
/*******************************************************************************************************/
void HLED_VoidLed_Toggle (u8 Copy_u8LedPortNumber , u8 Copy_u8LedPinNumber)
{
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	00 d0       	rcall	.+0      	; 0x338c <HLED_VoidLed_Toggle+0x6>
    338c:	0f 92       	push	r0
    338e:	cd b7       	in	r28, 0x3d	; 61
    3390:	de b7       	in	r29, 0x3e	; 62
    3392:	8a 83       	std	Y+2, r24	; 0x02
    3394:	6b 83       	std	Y+3, r22	; 0x03
	u8 LED_Flag  = 0;
    3396:	19 82       	std	Y+1, r1	; 0x01

	MDIO_u8GetPinValue(Copy_u8LedPortNumber , Copy_u8LedPinNumber , &LED_Flag);
    3398:	8a 81       	ldd	r24, Y+2	; 0x02
    339a:	6b 81       	ldd	r22, Y+3	; 0x03
    339c:	9e 01       	movw	r18, r28
    339e:	2f 5f       	subi	r18, 0xFF	; 255
    33a0:	3f 4f       	sbci	r19, 0xFF	; 255
    33a2:	a9 01       	movw	r20, r18
    33a4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <MDIO_u8GetPinValue>

	if(LED_Flag == DIO_u8_HIGH)
    33a8:	89 81       	ldd	r24, Y+1	; 0x01
    33aa:	81 30       	cpi	r24, 0x01	; 1
    33ac:	29 f4       	brne	.+10     	; 0x33b8 <HLED_VoidLed_Toggle+0x32>
	{
		HLED_VoidLed_Off(Copy_u8LedPortNumber , Copy_u8LedPinNumber);
    33ae:	8a 81       	ldd	r24, Y+2	; 0x02
    33b0:	6b 81       	ldd	r22, Y+3	; 0x03
    33b2:	0e 94 b2 19 	call	0x3364	; 0x3364 <HLED_VoidLed_Off>
    33b6:	04 c0       	rjmp	.+8      	; 0x33c0 <HLED_VoidLed_Toggle+0x3a>
	}
	else
	{
		HLED_VoidLed_On(Copy_u8LedPortNumber , Copy_u8LedPinNumber);
    33b8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ba:	6b 81       	ldd	r22, Y+3	; 0x03
    33bc:	0e 94 a1 19 	call	0x3342	; 0x3342 <HLED_VoidLed_On>
	}

}
    33c0:	0f 90       	pop	r0
    33c2:	0f 90       	pop	r0
    33c4:	0f 90       	pop	r0
    33c6:	cf 91       	pop	r28
    33c8:	df 91       	pop	r29
    33ca:	08 95       	ret

000033cc <HTMP_u8GetAnalogLDRValue>:
/*******************************************************************************************************/
#include "HLDR_Interface.h"
/*#####################################################################################################*/

void HTMP_u8GetAnalogLDRValue(u8 Copy_u8ADCChannelNumber , u8* Copy_pu16LDRValue)
{
    33cc:	df 93       	push	r29
    33ce:	cf 93       	push	r28
    33d0:	cd b7       	in	r28, 0x3d	; 61
    33d2:	de b7       	in	r29, 0x3e	; 62
    33d4:	27 97       	sbiw	r28, 0x07	; 7
    33d6:	0f b6       	in	r0, 0x3f	; 63
    33d8:	f8 94       	cli
    33da:	de bf       	out	0x3e, r29	; 62
    33dc:	0f be       	out	0x3f, r0	; 63
    33de:	cd bf       	out	0x3d, r28	; 61
    33e0:	8d 83       	std	Y+5, r24	; 0x05
    33e2:	7f 83       	std	Y+7, r23	; 0x07
    33e4:	6e 83       	std	Y+6, r22	; 0x06

	MADC_voidInit();
    33e6:	0e 94 c0 11 	call	0x2380	; 0x2380 <MADC_voidInit>

	/*              Local Variables Initialization                   */

	u16 Local_u16Digital_Value = 0  ;
    33ea:	1c 82       	std	Y+4, r1	; 0x04
    33ec:	1b 82       	std	Y+3, r1	; 0x03
	u16 Local_u16Analog_value  = 0  ;
    33ee:	1a 82       	std	Y+2, r1	; 0x02
    33f0:	19 82       	std	Y+1, r1	; 0x01

	/*              Calculate Light Intensity                        */
	/*              Get ADC Reading                                  */
	MADC_u8GetDigitalValueSynchNonBlocking(Copy_u8ADCChannelNumber,&Local_u16Digital_Value);
    33f2:	9e 01       	movw	r18, r28
    33f4:	2d 5f       	subi	r18, 0xFD	; 253
    33f6:	3f 4f       	sbci	r19, 0xFF	; 255
    33f8:	8d 81       	ldd	r24, Y+5	; 0x05
    33fa:	b9 01       	movw	r22, r18
    33fc:	0e 94 ff 11 	call	0x23fe	; 0x23fe <MADC_u8GetDigitalValueSynchNonBlocking>
    /*              Read Analog Voltage                              */
	Local_u16Analog_value = (u16)((Local_u16Digital_Value*5000UL)/1024);
    3400:	8b 81       	ldd	r24, Y+3	; 0x03
    3402:	9c 81       	ldd	r25, Y+4	; 0x04
    3404:	cc 01       	movw	r24, r24
    3406:	a0 e0       	ldi	r26, 0x00	; 0
    3408:	b0 e0       	ldi	r27, 0x00	; 0
    340a:	28 e8       	ldi	r18, 0x88	; 136
    340c:	33 e1       	ldi	r19, 0x13	; 19
    340e:	40 e0       	ldi	r20, 0x00	; 0
    3410:	50 e0       	ldi	r21, 0x00	; 0
    3412:	bc 01       	movw	r22, r24
    3414:	cd 01       	movw	r24, r26
    3416:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <__mulsi3>
    341a:	dc 01       	movw	r26, r24
    341c:	cb 01       	movw	r24, r22
    341e:	07 2e       	mov	r0, r23
    3420:	7a e0       	ldi	r23, 0x0A	; 10
    3422:	b6 95       	lsr	r27
    3424:	a7 95       	ror	r26
    3426:	97 95       	ror	r25
    3428:	87 95       	ror	r24
    342a:	7a 95       	dec	r23
    342c:	d1 f7       	brne	.-12     	; 0x3422 <HTMP_u8GetAnalogLDRValue+0x56>
    342e:	70 2d       	mov	r23, r0
    3430:	9a 83       	std	Y+2, r25	; 0x02
    3432:	89 83       	std	Y+1, r24	; 0x01
    /*              Calculate Temperature                            */
	*Copy_pu16LDRValue = Local_u16Analog_value;
    3434:	89 81       	ldd	r24, Y+1	; 0x01
    3436:	ee 81       	ldd	r30, Y+6	; 0x06
    3438:	ff 81       	ldd	r31, Y+7	; 0x07
    343a:	80 83       	st	Z, r24
}
    343c:	27 96       	adiw	r28, 0x07	; 7
    343e:	0f b6       	in	r0, 0x3f	; 63
    3440:	f8 94       	cli
    3442:	de bf       	out	0x3e, r29	; 62
    3444:	0f be       	out	0x3f, r0	; 63
    3446:	cd bf       	out	0x3d, r28	; 61
    3448:	cf 91       	pop	r28
    344a:	df 91       	pop	r29
    344c:	08 95       	ret

0000344e <HLCD_voidInit>:

/*******************************************************************************************************/
/*                                    LCD Initialization Function                                      */
/*******************************************************************************************************/
void HLCD_voidInit     (void)
{
    344e:	df 93       	push	r29
    3450:	cf 93       	push	r28
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
    3456:	e8 97       	sbiw	r28, 0x38	; 56
    3458:	0f b6       	in	r0, 0x3f	; 63
    345a:	f8 94       	cli
    345c:	de bf       	out	0x3e, r29	; 62
    345e:	0f be       	out	0x3f, r0	; 63
    3460:	cd bf       	out	0x3d, r28	; 61
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	a8 e4       	ldi	r26, 0x48	; 72
    3468:	b2 e4       	ldi	r27, 0x42	; 66
    346a:	8d ab       	std	Y+53, r24	; 0x35
    346c:	9e ab       	std	Y+54, r25	; 0x36
    346e:	af ab       	std	Y+55, r26	; 0x37
    3470:	b8 af       	std	Y+56, r27	; 0x38
    3472:	6d a9       	ldd	r22, Y+53	; 0x35
    3474:	7e a9       	ldd	r23, Y+54	; 0x36
    3476:	8f a9       	ldd	r24, Y+55	; 0x37
    3478:	98 ad       	ldd	r25, Y+56	; 0x38
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	4a ef       	ldi	r20, 0xFA	; 250
    3480:	54 e4       	ldi	r21, 0x44	; 68
    3482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	89 ab       	std	Y+49, r24	; 0x31
    348c:	9a ab       	std	Y+50, r25	; 0x32
    348e:	ab ab       	std	Y+51, r26	; 0x33
    3490:	bc ab       	std	Y+52, r27	; 0x34
    3492:	69 a9       	ldd	r22, Y+49	; 0x31
    3494:	7a a9       	ldd	r23, Y+50	; 0x32
    3496:	8b a9       	ldd	r24, Y+51	; 0x33
    3498:	9c a9       	ldd	r25, Y+52	; 0x34
    349a:	20 e0       	ldi	r18, 0x00	; 0
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	40 e8       	ldi	r20, 0x80	; 128
    34a0:	5f e3       	ldi	r21, 0x3F	; 63
    34a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34a6:	88 23       	and	r24, r24
    34a8:	2c f4       	brge	.+10     	; 0x34b4 <HLCD_voidInit+0x66>
    34aa:	81 e0       	ldi	r24, 0x01	; 1
    34ac:	90 e0       	ldi	r25, 0x00	; 0
    34ae:	98 ab       	std	Y+48, r25	; 0x30
    34b0:	8f a7       	std	Y+47, r24	; 0x2f
    34b2:	3f c0       	rjmp	.+126    	; 0x3532 <HLCD_voidInit+0xe4>
    34b4:	69 a9       	ldd	r22, Y+49	; 0x31
    34b6:	7a a9       	ldd	r23, Y+50	; 0x32
    34b8:	8b a9       	ldd	r24, Y+51	; 0x33
    34ba:	9c a9       	ldd	r25, Y+52	; 0x34
    34bc:	20 e0       	ldi	r18, 0x00	; 0
    34be:	3f ef       	ldi	r19, 0xFF	; 255
    34c0:	4f e7       	ldi	r20, 0x7F	; 127
    34c2:	57 e4       	ldi	r21, 0x47	; 71
    34c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34c8:	18 16       	cp	r1, r24
    34ca:	4c f5       	brge	.+82     	; 0x351e <HLCD_voidInit+0xd0>
    34cc:	6d a9       	ldd	r22, Y+53	; 0x35
    34ce:	7e a9       	ldd	r23, Y+54	; 0x36
    34d0:	8f a9       	ldd	r24, Y+55	; 0x37
    34d2:	98 ad       	ldd	r25, Y+56	; 0x38
    34d4:	20 e0       	ldi	r18, 0x00	; 0
    34d6:	30 e0       	ldi	r19, 0x00	; 0
    34d8:	40 e2       	ldi	r20, 0x20	; 32
    34da:	51 e4       	ldi	r21, 0x41	; 65
    34dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	bc 01       	movw	r22, r24
    34e6:	cd 01       	movw	r24, r26
    34e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ec:	dc 01       	movw	r26, r24
    34ee:	cb 01       	movw	r24, r22
    34f0:	98 ab       	std	Y+48, r25	; 0x30
    34f2:	8f a7       	std	Y+47, r24	; 0x2f
    34f4:	0f c0       	rjmp	.+30     	; 0x3514 <HLCD_voidInit+0xc6>
    34f6:	88 ec       	ldi	r24, 0xC8	; 200
    34f8:	90 e0       	ldi	r25, 0x00	; 0
    34fa:	9e a7       	std	Y+46, r25	; 0x2e
    34fc:	8d a7       	std	Y+45, r24	; 0x2d
    34fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    3500:	9e a5       	ldd	r25, Y+46	; 0x2e
    3502:	01 97       	sbiw	r24, 0x01	; 1
    3504:	f1 f7       	brne	.-4      	; 0x3502 <HLCD_voidInit+0xb4>
    3506:	9e a7       	std	Y+46, r25	; 0x2e
    3508:	8d a7       	std	Y+45, r24	; 0x2d
    350a:	8f a5       	ldd	r24, Y+47	; 0x2f
    350c:	98 a9       	ldd	r25, Y+48	; 0x30
    350e:	01 97       	sbiw	r24, 0x01	; 1
    3510:	98 ab       	std	Y+48, r25	; 0x30
    3512:	8f a7       	std	Y+47, r24	; 0x2f
    3514:	8f a5       	ldd	r24, Y+47	; 0x2f
    3516:	98 a9       	ldd	r25, Y+48	; 0x30
    3518:	00 97       	sbiw	r24, 0x00	; 0
    351a:	69 f7       	brne	.-38     	; 0x34f6 <HLCD_voidInit+0xa8>
    351c:	14 c0       	rjmp	.+40     	; 0x3546 <HLCD_voidInit+0xf8>
    351e:	69 a9       	ldd	r22, Y+49	; 0x31
    3520:	7a a9       	ldd	r23, Y+50	; 0x32
    3522:	8b a9       	ldd	r24, Y+51	; 0x33
    3524:	9c a9       	ldd	r25, Y+52	; 0x34
    3526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    352a:	dc 01       	movw	r26, r24
    352c:	cb 01       	movw	r24, r22
    352e:	98 ab       	std	Y+48, r25	; 0x30
    3530:	8f a7       	std	Y+47, r24	; 0x2f
    3532:	8f a5       	ldd	r24, Y+47	; 0x2f
    3534:	98 a9       	ldd	r25, Y+48	; 0x30
    3536:	9c a7       	std	Y+44, r25	; 0x2c
    3538:	8b a7       	std	Y+43, r24	; 0x2b
    353a:	8b a5       	ldd	r24, Y+43	; 0x2b
    353c:	9c a5       	ldd	r25, Y+44	; 0x2c
    353e:	01 97       	sbiw	r24, 0x01	; 1
    3540:	f1 f7       	brne	.-4      	; 0x353e <HLCD_voidInit+0xf0>
    3542:	9c a7       	std	Y+44, r25	; 0x2c
    3544:	8b a7       	std	Y+43, r24	; 0x2b
	{


		_delay_ms(50);
		/*send function set command*/
		HLCD_voidSendCmnd(FUNCTION_SET_4BITS>>4);
    3546:	82 e0       	ldi	r24, 0x02	; 2
    3548:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
		HLCD_voidSendCmnd(FUNCTION_SET_4BITS>>4);
    354c:	82 e0       	ldi	r24, 0x02	; 2
    354e:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
		HLCD_voidSendCmnd(FUNCTION_SET_4BITS);
    3552:	88 e2       	ldi	r24, 0x28	; 40
    3554:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	a0 e8       	ldi	r26, 0x80	; 128
    355e:	bf e3       	ldi	r27, 0x3F	; 63
    3560:	8f a3       	std	Y+39, r24	; 0x27
    3562:	98 a7       	std	Y+40, r25	; 0x28
    3564:	a9 a7       	std	Y+41, r26	; 0x29
    3566:	ba a7       	std	Y+42, r27	; 0x2a
    3568:	6f a1       	ldd	r22, Y+39	; 0x27
    356a:	78 a5       	ldd	r23, Y+40	; 0x28
    356c:	89 a5       	ldd	r24, Y+41	; 0x29
    356e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	4a ef       	ldi	r20, 0xFA	; 250
    3576:	54 e4       	ldi	r21, 0x44	; 68
    3578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357c:	dc 01       	movw	r26, r24
    357e:	cb 01       	movw	r24, r22
    3580:	8b a3       	std	Y+35, r24	; 0x23
    3582:	9c a3       	std	Y+36, r25	; 0x24
    3584:	ad a3       	std	Y+37, r26	; 0x25
    3586:	be a3       	std	Y+38, r27	; 0x26
    3588:	6b a1       	ldd	r22, Y+35	; 0x23
    358a:	7c a1       	ldd	r23, Y+36	; 0x24
    358c:	8d a1       	ldd	r24, Y+37	; 0x25
    358e:	9e a1       	ldd	r25, Y+38	; 0x26
    3590:	20 e0       	ldi	r18, 0x00	; 0
    3592:	30 e0       	ldi	r19, 0x00	; 0
    3594:	40 e8       	ldi	r20, 0x80	; 128
    3596:	5f e3       	ldi	r21, 0x3F	; 63
    3598:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    359c:	88 23       	and	r24, r24
    359e:	2c f4       	brge	.+10     	; 0x35aa <HLCD_voidInit+0x15c>
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	90 e0       	ldi	r25, 0x00	; 0
    35a4:	9a a3       	std	Y+34, r25	; 0x22
    35a6:	89 a3       	std	Y+33, r24	; 0x21
    35a8:	3f c0       	rjmp	.+126    	; 0x3628 <HLCD_voidInit+0x1da>
    35aa:	6b a1       	ldd	r22, Y+35	; 0x23
    35ac:	7c a1       	ldd	r23, Y+36	; 0x24
    35ae:	8d a1       	ldd	r24, Y+37	; 0x25
    35b0:	9e a1       	ldd	r25, Y+38	; 0x26
    35b2:	20 e0       	ldi	r18, 0x00	; 0
    35b4:	3f ef       	ldi	r19, 0xFF	; 255
    35b6:	4f e7       	ldi	r20, 0x7F	; 127
    35b8:	57 e4       	ldi	r21, 0x47	; 71
    35ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    35be:	18 16       	cp	r1, r24
    35c0:	4c f5       	brge	.+82     	; 0x3614 <HLCD_voidInit+0x1c6>
    35c2:	6f a1       	ldd	r22, Y+39	; 0x27
    35c4:	78 a5       	ldd	r23, Y+40	; 0x28
    35c6:	89 a5       	ldd	r24, Y+41	; 0x29
    35c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	40 e2       	ldi	r20, 0x20	; 32
    35d0:	51 e4       	ldi	r21, 0x41	; 65
    35d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d6:	dc 01       	movw	r26, r24
    35d8:	cb 01       	movw	r24, r22
    35da:	bc 01       	movw	r22, r24
    35dc:	cd 01       	movw	r24, r26
    35de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e2:	dc 01       	movw	r26, r24
    35e4:	cb 01       	movw	r24, r22
    35e6:	9a a3       	std	Y+34, r25	; 0x22
    35e8:	89 a3       	std	Y+33, r24	; 0x21
    35ea:	0f c0       	rjmp	.+30     	; 0x360a <HLCD_voidInit+0x1bc>
    35ec:	88 ec       	ldi	r24, 0xC8	; 200
    35ee:	90 e0       	ldi	r25, 0x00	; 0
    35f0:	98 a3       	std	Y+32, r25	; 0x20
    35f2:	8f 8f       	std	Y+31, r24	; 0x1f
    35f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    35f6:	98 a1       	ldd	r25, Y+32	; 0x20
    35f8:	01 97       	sbiw	r24, 0x01	; 1
    35fa:	f1 f7       	brne	.-4      	; 0x35f8 <HLCD_voidInit+0x1aa>
    35fc:	98 a3       	std	Y+32, r25	; 0x20
    35fe:	8f 8f       	std	Y+31, r24	; 0x1f
    3600:	89 a1       	ldd	r24, Y+33	; 0x21
    3602:	9a a1       	ldd	r25, Y+34	; 0x22
    3604:	01 97       	sbiw	r24, 0x01	; 1
    3606:	9a a3       	std	Y+34, r25	; 0x22
    3608:	89 a3       	std	Y+33, r24	; 0x21
    360a:	89 a1       	ldd	r24, Y+33	; 0x21
    360c:	9a a1       	ldd	r25, Y+34	; 0x22
    360e:	00 97       	sbiw	r24, 0x00	; 0
    3610:	69 f7       	brne	.-38     	; 0x35ec <HLCD_voidInit+0x19e>
    3612:	14 c0       	rjmp	.+40     	; 0x363c <HLCD_voidInit+0x1ee>
    3614:	6b a1       	ldd	r22, Y+35	; 0x23
    3616:	7c a1       	ldd	r23, Y+36	; 0x24
    3618:	8d a1       	ldd	r24, Y+37	; 0x25
    361a:	9e a1       	ldd	r25, Y+38	; 0x26
    361c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3620:	dc 01       	movw	r26, r24
    3622:	cb 01       	movw	r24, r22
    3624:	9a a3       	std	Y+34, r25	; 0x22
    3626:	89 a3       	std	Y+33, r24	; 0x21
    3628:	89 a1       	ldd	r24, Y+33	; 0x21
    362a:	9a a1       	ldd	r25, Y+34	; 0x22
    362c:	9e 8f       	std	Y+30, r25	; 0x1e
    362e:	8d 8f       	std	Y+29, r24	; 0x1d
    3630:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3632:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3634:	01 97       	sbiw	r24, 0x01	; 1
    3636:	f1 f7       	brne	.-4      	; 0x3634 <HLCD_voidInit+0x1e6>
    3638:	9e 8f       	std	Y+30, r25	; 0x1e
    363a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);
		/*send LCD On Off command*/
		HLCD_voidSendCmnd(LCD_DISPLAY_ON_OFF>>4);
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
		HLCD_voidSendCmnd(LCD_DISPLAY_ON_OFF);
    3642:	8c e0       	ldi	r24, 0x0C	; 12
    3644:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
    3648:	80 e0       	ldi	r24, 0x00	; 0
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	a0 e8       	ldi	r26, 0x80	; 128
    364e:	bf e3       	ldi	r27, 0x3F	; 63
    3650:	89 8f       	std	Y+25, r24	; 0x19
    3652:	9a 8f       	std	Y+26, r25	; 0x1a
    3654:	ab 8f       	std	Y+27, r26	; 0x1b
    3656:	bc 8f       	std	Y+28, r27	; 0x1c
    3658:	69 8d       	ldd	r22, Y+25	; 0x19
    365a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    365c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    365e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3660:	20 e0       	ldi	r18, 0x00	; 0
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	4a ef       	ldi	r20, 0xFA	; 250
    3666:	54 e4       	ldi	r21, 0x44	; 68
    3668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    366c:	dc 01       	movw	r26, r24
    366e:	cb 01       	movw	r24, r22
    3670:	8d 8b       	std	Y+21, r24	; 0x15
    3672:	9e 8b       	std	Y+22, r25	; 0x16
    3674:	af 8b       	std	Y+23, r26	; 0x17
    3676:	b8 8f       	std	Y+24, r27	; 0x18
    3678:	6d 89       	ldd	r22, Y+21	; 0x15
    367a:	7e 89       	ldd	r23, Y+22	; 0x16
    367c:	8f 89       	ldd	r24, Y+23	; 0x17
    367e:	98 8d       	ldd	r25, Y+24	; 0x18
    3680:	20 e0       	ldi	r18, 0x00	; 0
    3682:	30 e0       	ldi	r19, 0x00	; 0
    3684:	40 e8       	ldi	r20, 0x80	; 128
    3686:	5f e3       	ldi	r21, 0x3F	; 63
    3688:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    368c:	88 23       	and	r24, r24
    368e:	2c f4       	brge	.+10     	; 0x369a <HLCD_voidInit+0x24c>
    3690:	81 e0       	ldi	r24, 0x01	; 1
    3692:	90 e0       	ldi	r25, 0x00	; 0
    3694:	9c 8b       	std	Y+20, r25	; 0x14
    3696:	8b 8b       	std	Y+19, r24	; 0x13
    3698:	3f c0       	rjmp	.+126    	; 0x3718 <HLCD_voidInit+0x2ca>
    369a:	6d 89       	ldd	r22, Y+21	; 0x15
    369c:	7e 89       	ldd	r23, Y+22	; 0x16
    369e:	8f 89       	ldd	r24, Y+23	; 0x17
    36a0:	98 8d       	ldd	r25, Y+24	; 0x18
    36a2:	20 e0       	ldi	r18, 0x00	; 0
    36a4:	3f ef       	ldi	r19, 0xFF	; 255
    36a6:	4f e7       	ldi	r20, 0x7F	; 127
    36a8:	57 e4       	ldi	r21, 0x47	; 71
    36aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    36ae:	18 16       	cp	r1, r24
    36b0:	4c f5       	brge	.+82     	; 0x3704 <HLCD_voidInit+0x2b6>
    36b2:	69 8d       	ldd	r22, Y+25	; 0x19
    36b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    36b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    36b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    36ba:	20 e0       	ldi	r18, 0x00	; 0
    36bc:	30 e0       	ldi	r19, 0x00	; 0
    36be:	40 e2       	ldi	r20, 0x20	; 32
    36c0:	51 e4       	ldi	r21, 0x41	; 65
    36c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36c6:	dc 01       	movw	r26, r24
    36c8:	cb 01       	movw	r24, r22
    36ca:	bc 01       	movw	r22, r24
    36cc:	cd 01       	movw	r24, r26
    36ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36d2:	dc 01       	movw	r26, r24
    36d4:	cb 01       	movw	r24, r22
    36d6:	9c 8b       	std	Y+20, r25	; 0x14
    36d8:	8b 8b       	std	Y+19, r24	; 0x13
    36da:	0f c0       	rjmp	.+30     	; 0x36fa <HLCD_voidInit+0x2ac>
    36dc:	88 ec       	ldi	r24, 0xC8	; 200
    36de:	90 e0       	ldi	r25, 0x00	; 0
    36e0:	9a 8b       	std	Y+18, r25	; 0x12
    36e2:	89 8b       	std	Y+17, r24	; 0x11
    36e4:	89 89       	ldd	r24, Y+17	; 0x11
    36e6:	9a 89       	ldd	r25, Y+18	; 0x12
    36e8:	01 97       	sbiw	r24, 0x01	; 1
    36ea:	f1 f7       	brne	.-4      	; 0x36e8 <HLCD_voidInit+0x29a>
    36ec:	9a 8b       	std	Y+18, r25	; 0x12
    36ee:	89 8b       	std	Y+17, r24	; 0x11
    36f0:	8b 89       	ldd	r24, Y+19	; 0x13
    36f2:	9c 89       	ldd	r25, Y+20	; 0x14
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	9c 8b       	std	Y+20, r25	; 0x14
    36f8:	8b 8b       	std	Y+19, r24	; 0x13
    36fa:	8b 89       	ldd	r24, Y+19	; 0x13
    36fc:	9c 89       	ldd	r25, Y+20	; 0x14
    36fe:	00 97       	sbiw	r24, 0x00	; 0
    3700:	69 f7       	brne	.-38     	; 0x36dc <HLCD_voidInit+0x28e>
    3702:	14 c0       	rjmp	.+40     	; 0x372c <HLCD_voidInit+0x2de>
    3704:	6d 89       	ldd	r22, Y+21	; 0x15
    3706:	7e 89       	ldd	r23, Y+22	; 0x16
    3708:	8f 89       	ldd	r24, Y+23	; 0x17
    370a:	98 8d       	ldd	r25, Y+24	; 0x18
    370c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3710:	dc 01       	movw	r26, r24
    3712:	cb 01       	movw	r24, r22
    3714:	9c 8b       	std	Y+20, r25	; 0x14
    3716:	8b 8b       	std	Y+19, r24	; 0x13
    3718:	8b 89       	ldd	r24, Y+19	; 0x13
    371a:	9c 89       	ldd	r25, Y+20	; 0x14
    371c:	98 8b       	std	Y+16, r25	; 0x10
    371e:	8f 87       	std	Y+15, r24	; 0x0f
    3720:	8f 85       	ldd	r24, Y+15	; 0x0f
    3722:	98 89       	ldd	r25, Y+16	; 0x10
    3724:	01 97       	sbiw	r24, 0x01	; 1
    3726:	f1 f7       	brne	.-4      	; 0x3724 <HLCD_voidInit+0x2d6>
    3728:	98 8b       	std	Y+16, r25	; 0x10
    372a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		/*send LCD Display Clear command*/
		HLCD_voidSendCmnd(LCD_DISPLAY_CLEAR>>4);
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
		HLCD_voidSendCmnd(LCD_DISPLAY_CLEAR);
    3732:	81 e0       	ldi	r24, 0x01	; 1
    3734:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
    3738:	80 e0       	ldi	r24, 0x00	; 0
    373a:	90 e0       	ldi	r25, 0x00	; 0
    373c:	a0 e0       	ldi	r26, 0x00	; 0
    373e:	b0 e4       	ldi	r27, 0x40	; 64
    3740:	8b 87       	std	Y+11, r24	; 0x0b
    3742:	9c 87       	std	Y+12, r25	; 0x0c
    3744:	ad 87       	std	Y+13, r26	; 0x0d
    3746:	be 87       	std	Y+14, r27	; 0x0e
    3748:	6b 85       	ldd	r22, Y+11	; 0x0b
    374a:	7c 85       	ldd	r23, Y+12	; 0x0c
    374c:	8d 85       	ldd	r24, Y+13	; 0x0d
    374e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3750:	20 e0       	ldi	r18, 0x00	; 0
    3752:	30 e0       	ldi	r19, 0x00	; 0
    3754:	4a ef       	ldi	r20, 0xFA	; 250
    3756:	54 e4       	ldi	r21, 0x44	; 68
    3758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375c:	dc 01       	movw	r26, r24
    375e:	cb 01       	movw	r24, r22
    3760:	8f 83       	std	Y+7, r24	; 0x07
    3762:	98 87       	std	Y+8, r25	; 0x08
    3764:	a9 87       	std	Y+9, r26	; 0x09
    3766:	ba 87       	std	Y+10, r27	; 0x0a
    3768:	6f 81       	ldd	r22, Y+7	; 0x07
    376a:	78 85       	ldd	r23, Y+8	; 0x08
    376c:	89 85       	ldd	r24, Y+9	; 0x09
    376e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3770:	20 e0       	ldi	r18, 0x00	; 0
    3772:	30 e0       	ldi	r19, 0x00	; 0
    3774:	40 e8       	ldi	r20, 0x80	; 128
    3776:	5f e3       	ldi	r21, 0x3F	; 63
    3778:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    377c:	88 23       	and	r24, r24
    377e:	2c f4       	brge	.+10     	; 0x378a <HLCD_voidInit+0x33c>
    3780:	81 e0       	ldi	r24, 0x01	; 1
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	9e 83       	std	Y+6, r25	; 0x06
    3786:	8d 83       	std	Y+5, r24	; 0x05
    3788:	3f c0       	rjmp	.+126    	; 0x3808 <HLCD_voidInit+0x3ba>
    378a:	6f 81       	ldd	r22, Y+7	; 0x07
    378c:	78 85       	ldd	r23, Y+8	; 0x08
    378e:	89 85       	ldd	r24, Y+9	; 0x09
    3790:	9a 85       	ldd	r25, Y+10	; 0x0a
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	3f ef       	ldi	r19, 0xFF	; 255
    3796:	4f e7       	ldi	r20, 0x7F	; 127
    3798:	57 e4       	ldi	r21, 0x47	; 71
    379a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    379e:	18 16       	cp	r1, r24
    37a0:	4c f5       	brge	.+82     	; 0x37f4 <HLCD_voidInit+0x3a6>
    37a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    37a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    37a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    37a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    37aa:	20 e0       	ldi	r18, 0x00	; 0
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	40 e2       	ldi	r20, 0x20	; 32
    37b0:	51 e4       	ldi	r21, 0x41	; 65
    37b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b6:	dc 01       	movw	r26, r24
    37b8:	cb 01       	movw	r24, r22
    37ba:	bc 01       	movw	r22, r24
    37bc:	cd 01       	movw	r24, r26
    37be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	9e 83       	std	Y+6, r25	; 0x06
    37c8:	8d 83       	std	Y+5, r24	; 0x05
    37ca:	0f c0       	rjmp	.+30     	; 0x37ea <HLCD_voidInit+0x39c>
    37cc:	88 ec       	ldi	r24, 0xC8	; 200
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	9c 83       	std	Y+4, r25	; 0x04
    37d2:	8b 83       	std	Y+3, r24	; 0x03
    37d4:	8b 81       	ldd	r24, Y+3	; 0x03
    37d6:	9c 81       	ldd	r25, Y+4	; 0x04
    37d8:	01 97       	sbiw	r24, 0x01	; 1
    37da:	f1 f7       	brne	.-4      	; 0x37d8 <HLCD_voidInit+0x38a>
    37dc:	9c 83       	std	Y+4, r25	; 0x04
    37de:	8b 83       	std	Y+3, r24	; 0x03
    37e0:	8d 81       	ldd	r24, Y+5	; 0x05
    37e2:	9e 81       	ldd	r25, Y+6	; 0x06
    37e4:	01 97       	sbiw	r24, 0x01	; 1
    37e6:	9e 83       	std	Y+6, r25	; 0x06
    37e8:	8d 83       	std	Y+5, r24	; 0x05
    37ea:	8d 81       	ldd	r24, Y+5	; 0x05
    37ec:	9e 81       	ldd	r25, Y+6	; 0x06
    37ee:	00 97       	sbiw	r24, 0x00	; 0
    37f0:	69 f7       	brne	.-38     	; 0x37cc <HLCD_voidInit+0x37e>
    37f2:	14 c0       	rjmp	.+40     	; 0x381c <HLCD_voidInit+0x3ce>
    37f4:	6f 81       	ldd	r22, Y+7	; 0x07
    37f6:	78 85       	ldd	r23, Y+8	; 0x08
    37f8:	89 85       	ldd	r24, Y+9	; 0x09
    37fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    37fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3800:	dc 01       	movw	r26, r24
    3802:	cb 01       	movw	r24, r22
    3804:	9e 83       	std	Y+6, r25	; 0x06
    3806:	8d 83       	std	Y+5, r24	; 0x05
    3808:	8d 81       	ldd	r24, Y+5	; 0x05
    380a:	9e 81       	ldd	r25, Y+6	; 0x06
    380c:	9a 83       	std	Y+2, r25	; 0x02
    380e:	89 83       	std	Y+1, r24	; 0x01
    3810:	89 81       	ldd	r24, Y+1	; 0x01
    3812:	9a 81       	ldd	r25, Y+2	; 0x02
    3814:	01 97       	sbiw	r24, 0x01	; 1
    3816:	f1 f7       	brne	.-4      	; 0x3814 <HLCD_voidInit+0x3c6>
    3818:	9a 83       	std	Y+2, r25	; 0x02
    381a:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		/*send Entry Mode Set command*/
		HLCD_voidSendCmnd(LCD_ENTRY_MODE>>4);
    381c:	80 e0       	ldi	r24, 0x00	; 0
    381e:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
		HLCD_voidSendCmnd(LCD_ENTRY_MODE);
    3822:	86 e0       	ldi	r24, 0x06	; 6
    3824:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
	{
      #error "Wrong LCD Mode Choice"
	}
#endif

}
    3828:	e8 96       	adiw	r28, 0x38	; 56
    382a:	0f b6       	in	r0, 0x3f	; 63
    382c:	f8 94       	cli
    382e:	de bf       	out	0x3e, r29	; 62
    3830:	0f be       	out	0x3f, r0	; 63
    3832:	cd bf       	out	0x3d, r28	; 61
    3834:	cf 91       	pop	r28
    3836:	df 91       	pop	r29
    3838:	08 95       	ret

0000383a <HLCD_voidClear>:

/*******************************************************************************************************/
/*                                   Clears LCD Display Function                                       */
/*******************************************************************************************************/
void HLCD_voidClear       (void)
{
    383a:	df 93       	push	r29
    383c:	cf 93       	push	r28
    383e:	cd b7       	in	r28, 0x3d	; 61
    3840:	de b7       	in	r29, 0x3e	; 62
    3842:	2e 97       	sbiw	r28, 0x0e	; 14
    3844:	0f b6       	in	r0, 0x3f	; 63
    3846:	f8 94       	cli
    3848:	de bf       	out	0x3e, r29	; 62
    384a:	0f be       	out	0x3f, r0	; 63
    384c:	cd bf       	out	0x3d, r28	; 61
		HLCD_voidSendCmnd(LCD_DISPLAY_CLEAR);
		_delay_ms(2);
	}
#elif(LCD_MODE == LCD_4_BIT_MODE)
	{
		HLCD_voidSendCmnd(LCD_DISPLAY_CLEAR>>4);
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
		HLCD_voidSendCmnd(LCD_DISPLAY_CLEAR);
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
    385a:	80 e0       	ldi	r24, 0x00	; 0
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	a0 e0       	ldi	r26, 0x00	; 0
    3860:	b0 e4       	ldi	r27, 0x40	; 64
    3862:	8b 87       	std	Y+11, r24	; 0x0b
    3864:	9c 87       	std	Y+12, r25	; 0x0c
    3866:	ad 87       	std	Y+13, r26	; 0x0d
    3868:	be 87       	std	Y+14, r27	; 0x0e
    386a:	6b 85       	ldd	r22, Y+11	; 0x0b
    386c:	7c 85       	ldd	r23, Y+12	; 0x0c
    386e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3870:	9e 85       	ldd	r25, Y+14	; 0x0e
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	4a ef       	ldi	r20, 0xFA	; 250
    3878:	54 e4       	ldi	r21, 0x44	; 68
    387a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387e:	dc 01       	movw	r26, r24
    3880:	cb 01       	movw	r24, r22
    3882:	8f 83       	std	Y+7, r24	; 0x07
    3884:	98 87       	std	Y+8, r25	; 0x08
    3886:	a9 87       	std	Y+9, r26	; 0x09
    3888:	ba 87       	std	Y+10, r27	; 0x0a
    388a:	6f 81       	ldd	r22, Y+7	; 0x07
    388c:	78 85       	ldd	r23, Y+8	; 0x08
    388e:	89 85       	ldd	r24, Y+9	; 0x09
    3890:	9a 85       	ldd	r25, Y+10	; 0x0a
    3892:	20 e0       	ldi	r18, 0x00	; 0
    3894:	30 e0       	ldi	r19, 0x00	; 0
    3896:	40 e8       	ldi	r20, 0x80	; 128
    3898:	5f e3       	ldi	r21, 0x3F	; 63
    389a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    389e:	88 23       	and	r24, r24
    38a0:	2c f4       	brge	.+10     	; 0x38ac <HLCD_voidClear+0x72>
    38a2:	81 e0       	ldi	r24, 0x01	; 1
    38a4:	90 e0       	ldi	r25, 0x00	; 0
    38a6:	9e 83       	std	Y+6, r25	; 0x06
    38a8:	8d 83       	std	Y+5, r24	; 0x05
    38aa:	3f c0       	rjmp	.+126    	; 0x392a <HLCD_voidClear+0xf0>
    38ac:	6f 81       	ldd	r22, Y+7	; 0x07
    38ae:	78 85       	ldd	r23, Y+8	; 0x08
    38b0:	89 85       	ldd	r24, Y+9	; 0x09
    38b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    38b4:	20 e0       	ldi	r18, 0x00	; 0
    38b6:	3f ef       	ldi	r19, 0xFF	; 255
    38b8:	4f e7       	ldi	r20, 0x7F	; 127
    38ba:	57 e4       	ldi	r21, 0x47	; 71
    38bc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    38c0:	18 16       	cp	r1, r24
    38c2:	4c f5       	brge	.+82     	; 0x3916 <HLCD_voidClear+0xdc>
    38c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    38c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    38c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    38ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    38cc:	20 e0       	ldi	r18, 0x00	; 0
    38ce:	30 e0       	ldi	r19, 0x00	; 0
    38d0:	40 e2       	ldi	r20, 0x20	; 32
    38d2:	51 e4       	ldi	r21, 0x41	; 65
    38d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38d8:	dc 01       	movw	r26, r24
    38da:	cb 01       	movw	r24, r22
    38dc:	bc 01       	movw	r22, r24
    38de:	cd 01       	movw	r24, r26
    38e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38e4:	dc 01       	movw	r26, r24
    38e6:	cb 01       	movw	r24, r22
    38e8:	9e 83       	std	Y+6, r25	; 0x06
    38ea:	8d 83       	std	Y+5, r24	; 0x05
    38ec:	0f c0       	rjmp	.+30     	; 0x390c <HLCD_voidClear+0xd2>
    38ee:	88 ec       	ldi	r24, 0xC8	; 200
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	9c 83       	std	Y+4, r25	; 0x04
    38f4:	8b 83       	std	Y+3, r24	; 0x03
    38f6:	8b 81       	ldd	r24, Y+3	; 0x03
    38f8:	9c 81       	ldd	r25, Y+4	; 0x04
    38fa:	01 97       	sbiw	r24, 0x01	; 1
    38fc:	f1 f7       	brne	.-4      	; 0x38fa <HLCD_voidClear+0xc0>
    38fe:	9c 83       	std	Y+4, r25	; 0x04
    3900:	8b 83       	std	Y+3, r24	; 0x03
    3902:	8d 81       	ldd	r24, Y+5	; 0x05
    3904:	9e 81       	ldd	r25, Y+6	; 0x06
    3906:	01 97       	sbiw	r24, 0x01	; 1
    3908:	9e 83       	std	Y+6, r25	; 0x06
    390a:	8d 83       	std	Y+5, r24	; 0x05
    390c:	8d 81       	ldd	r24, Y+5	; 0x05
    390e:	9e 81       	ldd	r25, Y+6	; 0x06
    3910:	00 97       	sbiw	r24, 0x00	; 0
    3912:	69 f7       	brne	.-38     	; 0x38ee <HLCD_voidClear+0xb4>
    3914:	14 c0       	rjmp	.+40     	; 0x393e <HLCD_voidClear+0x104>
    3916:	6f 81       	ldd	r22, Y+7	; 0x07
    3918:	78 85       	ldd	r23, Y+8	; 0x08
    391a:	89 85       	ldd	r24, Y+9	; 0x09
    391c:	9a 85       	ldd	r25, Y+10	; 0x0a
    391e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3922:	dc 01       	movw	r26, r24
    3924:	cb 01       	movw	r24, r22
    3926:	9e 83       	std	Y+6, r25	; 0x06
    3928:	8d 83       	std	Y+5, r24	; 0x05
    392a:	8d 81       	ldd	r24, Y+5	; 0x05
    392c:	9e 81       	ldd	r25, Y+6	; 0x06
    392e:	9a 83       	std	Y+2, r25	; 0x02
    3930:	89 83       	std	Y+1, r24	; 0x01
    3932:	89 81       	ldd	r24, Y+1	; 0x01
    3934:	9a 81       	ldd	r25, Y+2	; 0x02
    3936:	01 97       	sbiw	r24, 0x01	; 1
    3938:	f1 f7       	brne	.-4      	; 0x3936 <HLCD_voidClear+0xfc>
    393a:	9a 83       	std	Y+2, r25	; 0x02
    393c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}
#endif
}
    393e:	2e 96       	adiw	r28, 0x0e	; 14
    3940:	0f b6       	in	r0, 0x3f	; 63
    3942:	f8 94       	cli
    3944:	de bf       	out	0x3e, r29	; 62
    3946:	0f be       	out	0x3f, r0	; 63
    3948:	cd bf       	out	0x3d, r28	; 61
    394a:	cf 91       	pop	r28
    394c:	df 91       	pop	r29
    394e:	08 95       	ret

00003950 <HLCD_voidCursorBlinkerOff>:

/*******************************************************************************************************/
/*                                   Turns off Cursor Blinker Function                                 */
/*******************************************************************************************************/
void HLCD_voidCursorBlinkerOff(void)
{
    3950:	df 93       	push	r29
    3952:	cf 93       	push	r28
    3954:	cd b7       	in	r28, 0x3d	; 61
    3956:	de b7       	in	r29, 0x3e	; 62
    3958:	2e 97       	sbiw	r28, 0x0e	; 14
    395a:	0f b6       	in	r0, 0x3f	; 63
    395c:	f8 94       	cli
    395e:	de bf       	out	0x3e, r29	; 62
    3960:	0f be       	out	0x3f, r0	; 63
    3962:	cd bf       	out	0x3d, r28	; 61
		HLCD_voidSendCmnd(LCD_BLINKER_OFF);
		_delay_ms(2);
	}
#elif(LCD_MODE == LCD_4_BIT_MODE)
	{
		HLCD_voidSendCmnd(LCD_BLINKER_OFF>>4);
    3964:	80 e0       	ldi	r24, 0x00	; 0
    3966:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
		HLCD_voidSendCmnd(LCD_BLINKER_OFF);
    396a:	8c e0       	ldi	r24, 0x0C	; 12
    396c:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	a0 e0       	ldi	r26, 0x00	; 0
    3976:	b0 e4       	ldi	r27, 0x40	; 64
    3978:	8b 87       	std	Y+11, r24	; 0x0b
    397a:	9c 87       	std	Y+12, r25	; 0x0c
    397c:	ad 87       	std	Y+13, r26	; 0x0d
    397e:	be 87       	std	Y+14, r27	; 0x0e
    3980:	6b 85       	ldd	r22, Y+11	; 0x0b
    3982:	7c 85       	ldd	r23, Y+12	; 0x0c
    3984:	8d 85       	ldd	r24, Y+13	; 0x0d
    3986:	9e 85       	ldd	r25, Y+14	; 0x0e
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	4a ef       	ldi	r20, 0xFA	; 250
    398e:	54 e4       	ldi	r21, 0x44	; 68
    3990:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	8f 83       	std	Y+7, r24	; 0x07
    399a:	98 87       	std	Y+8, r25	; 0x08
    399c:	a9 87       	std	Y+9, r26	; 0x09
    399e:	ba 87       	std	Y+10, r27	; 0x0a
    39a0:	6f 81       	ldd	r22, Y+7	; 0x07
    39a2:	78 85       	ldd	r23, Y+8	; 0x08
    39a4:	89 85       	ldd	r24, Y+9	; 0x09
    39a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    39a8:	20 e0       	ldi	r18, 0x00	; 0
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	40 e8       	ldi	r20, 0x80	; 128
    39ae:	5f e3       	ldi	r21, 0x3F	; 63
    39b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39b4:	88 23       	and	r24, r24
    39b6:	2c f4       	brge	.+10     	; 0x39c2 <HLCD_voidCursorBlinkerOff+0x72>
    39b8:	81 e0       	ldi	r24, 0x01	; 1
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	9e 83       	std	Y+6, r25	; 0x06
    39be:	8d 83       	std	Y+5, r24	; 0x05
    39c0:	3f c0       	rjmp	.+126    	; 0x3a40 <HLCD_voidCursorBlinkerOff+0xf0>
    39c2:	6f 81       	ldd	r22, Y+7	; 0x07
    39c4:	78 85       	ldd	r23, Y+8	; 0x08
    39c6:	89 85       	ldd	r24, Y+9	; 0x09
    39c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	3f ef       	ldi	r19, 0xFF	; 255
    39ce:	4f e7       	ldi	r20, 0x7F	; 127
    39d0:	57 e4       	ldi	r21, 0x47	; 71
    39d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39d6:	18 16       	cp	r1, r24
    39d8:	4c f5       	brge	.+82     	; 0x3a2c <HLCD_voidCursorBlinkerOff+0xdc>
    39da:	6b 85       	ldd	r22, Y+11	; 0x0b
    39dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    39de:	8d 85       	ldd	r24, Y+13	; 0x0d
    39e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39e2:	20 e0       	ldi	r18, 0x00	; 0
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	40 e2       	ldi	r20, 0x20	; 32
    39e8:	51 e4       	ldi	r21, 0x41	; 65
    39ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39ee:	dc 01       	movw	r26, r24
    39f0:	cb 01       	movw	r24, r22
    39f2:	bc 01       	movw	r22, r24
    39f4:	cd 01       	movw	r24, r26
    39f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39fa:	dc 01       	movw	r26, r24
    39fc:	cb 01       	movw	r24, r22
    39fe:	9e 83       	std	Y+6, r25	; 0x06
    3a00:	8d 83       	std	Y+5, r24	; 0x05
    3a02:	0f c0       	rjmp	.+30     	; 0x3a22 <HLCD_voidCursorBlinkerOff+0xd2>
    3a04:	88 ec       	ldi	r24, 0xC8	; 200
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	9c 83       	std	Y+4, r25	; 0x04
    3a0a:	8b 83       	std	Y+3, r24	; 0x03
    3a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a10:	01 97       	sbiw	r24, 0x01	; 1
    3a12:	f1 f7       	brne	.-4      	; 0x3a10 <HLCD_voidCursorBlinkerOff+0xc0>
    3a14:	9c 83       	std	Y+4, r25	; 0x04
    3a16:	8b 83       	std	Y+3, r24	; 0x03
    3a18:	8d 81       	ldd	r24, Y+5	; 0x05
    3a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a1c:	01 97       	sbiw	r24, 0x01	; 1
    3a1e:	9e 83       	std	Y+6, r25	; 0x06
    3a20:	8d 83       	std	Y+5, r24	; 0x05
    3a22:	8d 81       	ldd	r24, Y+5	; 0x05
    3a24:	9e 81       	ldd	r25, Y+6	; 0x06
    3a26:	00 97       	sbiw	r24, 0x00	; 0
    3a28:	69 f7       	brne	.-38     	; 0x3a04 <HLCD_voidCursorBlinkerOff+0xb4>
    3a2a:	14 c0       	rjmp	.+40     	; 0x3a54 <HLCD_voidCursorBlinkerOff+0x104>
    3a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a2e:	78 85       	ldd	r23, Y+8	; 0x08
    3a30:	89 85       	ldd	r24, Y+9	; 0x09
    3a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a38:	dc 01       	movw	r26, r24
    3a3a:	cb 01       	movw	r24, r22
    3a3c:	9e 83       	std	Y+6, r25	; 0x06
    3a3e:	8d 83       	std	Y+5, r24	; 0x05
    3a40:	8d 81       	ldd	r24, Y+5	; 0x05
    3a42:	9e 81       	ldd	r25, Y+6	; 0x06
    3a44:	9a 83       	std	Y+2, r25	; 0x02
    3a46:	89 83       	std	Y+1, r24	; 0x01
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
    3a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a4c:	01 97       	sbiw	r24, 0x01	; 1
    3a4e:	f1 f7       	brne	.-4      	; 0x3a4c <HLCD_voidCursorBlinkerOff+0xfc>
    3a50:	9a 83       	std	Y+2, r25	; 0x02
    3a52:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
	}
#endif

}
    3a54:	2e 96       	adiw	r28, 0x0e	; 14
    3a56:	0f b6       	in	r0, 0x3f	; 63
    3a58:	f8 94       	cli
    3a5a:	de bf       	out	0x3e, r29	; 62
    3a5c:	0f be       	out	0x3f, r0	; 63
    3a5e:	cd bf       	out	0x3d, r28	; 61
    3a60:	cf 91       	pop	r28
    3a62:	df 91       	pop	r29
    3a64:	08 95       	ret

00003a66 <HLCD_voidSendCmnd>:

/*******************************************************************************************************/
/*                                   LCD Send Command Function                                         */
/*******************************************************************************************************/
void HLCD_voidSendCmnd (u8 Copy_u8Cmnd)
{
    3a66:	df 93       	push	r29
    3a68:	cf 93       	push	r28
    3a6a:	cd b7       	in	r28, 0x3d	; 61
    3a6c:	de b7       	in	r29, 0x3e	; 62
    3a6e:	2f 97       	sbiw	r28, 0x0f	; 15
    3a70:	0f b6       	in	r0, 0x3f	; 63
    3a72:	f8 94       	cli
    3a74:	de bf       	out	0x3e, r29	; 62
    3a76:	0f be       	out	0x3f, r0	; 63
    3a78:	cd bf       	out	0x3d, r28	; 61
    3a7a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(1);
	}
#elif(LCD_MODE == LCD_4_BIT_MODE)
	{
		/* Rs = 0 */
		MDIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	60 e0       	ldi	r22, 0x00	; 0
    3a80:	40 e0       	ldi	r20, 0x00	; 0
    3a82:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
		/* Rw = 0 */
		MDIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    3a86:	81 e0       	ldi	r24, 0x01	; 1
    3a88:	61 e0       	ldi	r22, 0x01	; 1
    3a8a:	40 e0       	ldi	r20, 0x00	; 0
    3a8c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>

		/* Send Cmnd byte to the Data Pins of LCD */
		MDIO_u8Set4PinsValue(LCD_u8_DATA_PORT,LCD_u8_4BIT_START_PIN,Copy_u8Cmnd);
    3a90:	81 e0       	ldi	r24, 0x01	; 1
    3a92:	64 e0       	ldi	r22, 0x04	; 4
    3a94:	4f 85       	ldd	r20, Y+15	; 0x0f
    3a96:	0e 94 86 10 	call	0x210c	; 0x210c <MDIO_u8Set4PinsValue>

		/* Pulse of Enable E = 1 , E = 0 */
		MDIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    3a9a:	81 e0       	ldi	r24, 0x01	; 1
    3a9c:	62 e0       	ldi	r22, 0x02	; 2
    3a9e:	41 e0       	ldi	r20, 0x01	; 1
    3aa0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
    3aa4:	80 e0       	ldi	r24, 0x00	; 0
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	a0 e0       	ldi	r26, 0x00	; 0
    3aaa:	b0 e4       	ldi	r27, 0x40	; 64
    3aac:	8b 87       	std	Y+11, r24	; 0x0b
    3aae:	9c 87       	std	Y+12, r25	; 0x0c
    3ab0:	ad 87       	std	Y+13, r26	; 0x0d
    3ab2:	be 87       	std	Y+14, r27	; 0x0e
    3ab4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ab6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ab8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3aba:	9e 85       	ldd	r25, Y+14	; 0x0e
    3abc:	20 e0       	ldi	r18, 0x00	; 0
    3abe:	30 e0       	ldi	r19, 0x00	; 0
    3ac0:	4a ef       	ldi	r20, 0xFA	; 250
    3ac2:	54 e4       	ldi	r21, 0x44	; 68
    3ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac8:	dc 01       	movw	r26, r24
    3aca:	cb 01       	movw	r24, r22
    3acc:	8f 83       	std	Y+7, r24	; 0x07
    3ace:	98 87       	std	Y+8, r25	; 0x08
    3ad0:	a9 87       	std	Y+9, r26	; 0x09
    3ad2:	ba 87       	std	Y+10, r27	; 0x0a
    3ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ad6:	78 85       	ldd	r23, Y+8	; 0x08
    3ad8:	89 85       	ldd	r24, Y+9	; 0x09
    3ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    3adc:	20 e0       	ldi	r18, 0x00	; 0
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	40 e8       	ldi	r20, 0x80	; 128
    3ae2:	5f e3       	ldi	r21, 0x3F	; 63
    3ae4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ae8:	88 23       	and	r24, r24
    3aea:	2c f4       	brge	.+10     	; 0x3af6 <HLCD_voidSendCmnd+0x90>
    3aec:	81 e0       	ldi	r24, 0x01	; 1
    3aee:	90 e0       	ldi	r25, 0x00	; 0
    3af0:	9e 83       	std	Y+6, r25	; 0x06
    3af2:	8d 83       	std	Y+5, r24	; 0x05
    3af4:	3f c0       	rjmp	.+126    	; 0x3b74 <HLCD_voidSendCmnd+0x10e>
    3af6:	6f 81       	ldd	r22, Y+7	; 0x07
    3af8:	78 85       	ldd	r23, Y+8	; 0x08
    3afa:	89 85       	ldd	r24, Y+9	; 0x09
    3afc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3afe:	20 e0       	ldi	r18, 0x00	; 0
    3b00:	3f ef       	ldi	r19, 0xFF	; 255
    3b02:	4f e7       	ldi	r20, 0x7F	; 127
    3b04:	57 e4       	ldi	r21, 0x47	; 71
    3b06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b0a:	18 16       	cp	r1, r24
    3b0c:	4c f5       	brge	.+82     	; 0x3b60 <HLCD_voidSendCmnd+0xfa>
    3b0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b10:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b12:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b14:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b16:	20 e0       	ldi	r18, 0x00	; 0
    3b18:	30 e0       	ldi	r19, 0x00	; 0
    3b1a:	40 e2       	ldi	r20, 0x20	; 32
    3b1c:	51 e4       	ldi	r21, 0x41	; 65
    3b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b22:	dc 01       	movw	r26, r24
    3b24:	cb 01       	movw	r24, r22
    3b26:	bc 01       	movw	r22, r24
    3b28:	cd 01       	movw	r24, r26
    3b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b2e:	dc 01       	movw	r26, r24
    3b30:	cb 01       	movw	r24, r22
    3b32:	9e 83       	std	Y+6, r25	; 0x06
    3b34:	8d 83       	std	Y+5, r24	; 0x05
    3b36:	0f c0       	rjmp	.+30     	; 0x3b56 <HLCD_voidSendCmnd+0xf0>
    3b38:	88 ec       	ldi	r24, 0xC8	; 200
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	9c 83       	std	Y+4, r25	; 0x04
    3b3e:	8b 83       	std	Y+3, r24	; 0x03
    3b40:	8b 81       	ldd	r24, Y+3	; 0x03
    3b42:	9c 81       	ldd	r25, Y+4	; 0x04
    3b44:	01 97       	sbiw	r24, 0x01	; 1
    3b46:	f1 f7       	brne	.-4      	; 0x3b44 <HLCD_voidSendCmnd+0xde>
    3b48:	9c 83       	std	Y+4, r25	; 0x04
    3b4a:	8b 83       	std	Y+3, r24	; 0x03
    3b4c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b4e:	9e 81       	ldd	r25, Y+6	; 0x06
    3b50:	01 97       	sbiw	r24, 0x01	; 1
    3b52:	9e 83       	std	Y+6, r25	; 0x06
    3b54:	8d 83       	std	Y+5, r24	; 0x05
    3b56:	8d 81       	ldd	r24, Y+5	; 0x05
    3b58:	9e 81       	ldd	r25, Y+6	; 0x06
    3b5a:	00 97       	sbiw	r24, 0x00	; 0
    3b5c:	69 f7       	brne	.-38     	; 0x3b38 <HLCD_voidSendCmnd+0xd2>
    3b5e:	14 c0       	rjmp	.+40     	; 0x3b88 <HLCD_voidSendCmnd+0x122>
    3b60:	6f 81       	ldd	r22, Y+7	; 0x07
    3b62:	78 85       	ldd	r23, Y+8	; 0x08
    3b64:	89 85       	ldd	r24, Y+9	; 0x09
    3b66:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b6c:	dc 01       	movw	r26, r24
    3b6e:	cb 01       	movw	r24, r22
    3b70:	9e 83       	std	Y+6, r25	; 0x06
    3b72:	8d 83       	std	Y+5, r24	; 0x05
    3b74:	8d 81       	ldd	r24, Y+5	; 0x05
    3b76:	9e 81       	ldd	r25, Y+6	; 0x06
    3b78:	9a 83       	std	Y+2, r25	; 0x02
    3b7a:	89 83       	std	Y+1, r24	; 0x01
    3b7c:	89 81       	ldd	r24, Y+1	; 0x01
    3b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    3b80:	01 97       	sbiw	r24, 0x01	; 1
    3b82:	f1 f7       	brne	.-4      	; 0x3b80 <HLCD_voidSendCmnd+0x11a>
    3b84:	9a 83       	std	Y+2, r25	; 0x02
    3b86:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		MDIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    3b88:	81 e0       	ldi	r24, 0x01	; 1
    3b8a:	62 e0       	ldi	r22, 0x02	; 2
    3b8c:	40 e0       	ldi	r20, 0x00	; 0
    3b8e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>

	}
#endif

}
    3b92:	2f 96       	adiw	r28, 0x0f	; 15
    3b94:	0f b6       	in	r0, 0x3f	; 63
    3b96:	f8 94       	cli
    3b98:	de bf       	out	0x3e, r29	; 62
    3b9a:	0f be       	out	0x3f, r0	; 63
    3b9c:	cd bf       	out	0x3d, r28	; 61
    3b9e:	cf 91       	pop	r28
    3ba0:	df 91       	pop	r29
    3ba2:	08 95       	ret

00003ba4 <HLCD_voidSendChar>:

/*******************************************************************************************************/
/*                              Configure LCD to Send Data Function                                    */
/*******************************************************************************************************/
static void HLCD_voidSendChar (u8 Copy_u8Char)
{
    3ba4:	df 93       	push	r29
    3ba6:	cf 93       	push	r28
    3ba8:	cd b7       	in	r28, 0x3d	; 61
    3baa:	de b7       	in	r29, 0x3e	; 62
    3bac:	2f 97       	sbiw	r28, 0x0f	; 15
    3bae:	0f b6       	in	r0, 0x3f	; 63
    3bb0:	f8 94       	cli
    3bb2:	de bf       	out	0x3e, r29	; 62
    3bb4:	0f be       	out	0x3f, r0	; 63
    3bb6:	cd bf       	out	0x3d, r28	; 61
    3bb8:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_us(1);
	}
#elif(LCD_MODE == LCD_4_BIT_MODE)
	{
		/* Rs = 1 */
		MDIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	60 e0       	ldi	r22, 0x00	; 0
    3bbe:	41 e0       	ldi	r20, 0x01	; 1
    3bc0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
		/* Rw = 0 */
		MDIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    3bc4:	81 e0       	ldi	r24, 0x01	; 1
    3bc6:	61 e0       	ldi	r22, 0x01	; 1
    3bc8:	40 e0       	ldi	r20, 0x00	; 0
    3bca:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>

		/* Send Char byte to the 4 Data Pins of LCD */
		MDIO_u8Set4PinsValue(LCD_u8_DATA_PORT,LCD_u8_4BIT_START_PIN,Copy_u8Char);
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	64 e0       	ldi	r22, 0x04	; 4
    3bd2:	4f 85       	ldd	r20, Y+15	; 0x0f
    3bd4:	0e 94 86 10 	call	0x210c	; 0x210c <MDIO_u8Set4PinsValue>
		/* Pulse of Enable E = 1 , E = 0 */
		MDIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_HIGH);
    3bd8:	81 e0       	ldi	r24, 0x01	; 1
    3bda:	62 e0       	ldi	r22, 0x02	; 2
    3bdc:	41 e0       	ldi	r20, 0x01	; 1
    3bde:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
    3be2:	80 e0       	ldi	r24, 0x00	; 0
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	a0 e0       	ldi	r26, 0x00	; 0
    3be8:	b0 e4       	ldi	r27, 0x40	; 64
    3bea:	8b 87       	std	Y+11, r24	; 0x0b
    3bec:	9c 87       	std	Y+12, r25	; 0x0c
    3bee:	ad 87       	std	Y+13, r26	; 0x0d
    3bf0:	be 87       	std	Y+14, r27	; 0x0e
    3bf2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bf4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bf6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bf8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bfa:	20 e0       	ldi	r18, 0x00	; 0
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
    3bfe:	4a ef       	ldi	r20, 0xFA	; 250
    3c00:	54 e4       	ldi	r21, 0x44	; 68
    3c02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c06:	dc 01       	movw	r26, r24
    3c08:	cb 01       	movw	r24, r22
    3c0a:	8f 83       	std	Y+7, r24	; 0x07
    3c0c:	98 87       	std	Y+8, r25	; 0x08
    3c0e:	a9 87       	std	Y+9, r26	; 0x09
    3c10:	ba 87       	std	Y+10, r27	; 0x0a
    3c12:	6f 81       	ldd	r22, Y+7	; 0x07
    3c14:	78 85       	ldd	r23, Y+8	; 0x08
    3c16:	89 85       	ldd	r24, Y+9	; 0x09
    3c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c1a:	20 e0       	ldi	r18, 0x00	; 0
    3c1c:	30 e0       	ldi	r19, 0x00	; 0
    3c1e:	40 e8       	ldi	r20, 0x80	; 128
    3c20:	5f e3       	ldi	r21, 0x3F	; 63
    3c22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c26:	88 23       	and	r24, r24
    3c28:	2c f4       	brge	.+10     	; 0x3c34 <HLCD_voidSendChar+0x90>
    3c2a:	81 e0       	ldi	r24, 0x01	; 1
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	9e 83       	std	Y+6, r25	; 0x06
    3c30:	8d 83       	std	Y+5, r24	; 0x05
    3c32:	3f c0       	rjmp	.+126    	; 0x3cb2 <HLCD_voidSendChar+0x10e>
    3c34:	6f 81       	ldd	r22, Y+7	; 0x07
    3c36:	78 85       	ldd	r23, Y+8	; 0x08
    3c38:	89 85       	ldd	r24, Y+9	; 0x09
    3c3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c3c:	20 e0       	ldi	r18, 0x00	; 0
    3c3e:	3f ef       	ldi	r19, 0xFF	; 255
    3c40:	4f e7       	ldi	r20, 0x7F	; 127
    3c42:	57 e4       	ldi	r21, 0x47	; 71
    3c44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c48:	18 16       	cp	r1, r24
    3c4a:	4c f5       	brge	.+82     	; 0x3c9e <HLCD_voidSendChar+0xfa>
    3c4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c50:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c52:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c54:	20 e0       	ldi	r18, 0x00	; 0
    3c56:	30 e0       	ldi	r19, 0x00	; 0
    3c58:	40 e2       	ldi	r20, 0x20	; 32
    3c5a:	51 e4       	ldi	r21, 0x41	; 65
    3c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c60:	dc 01       	movw	r26, r24
    3c62:	cb 01       	movw	r24, r22
    3c64:	bc 01       	movw	r22, r24
    3c66:	cd 01       	movw	r24, r26
    3c68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c6c:	dc 01       	movw	r26, r24
    3c6e:	cb 01       	movw	r24, r22
    3c70:	9e 83       	std	Y+6, r25	; 0x06
    3c72:	8d 83       	std	Y+5, r24	; 0x05
    3c74:	0f c0       	rjmp	.+30     	; 0x3c94 <HLCD_voidSendChar+0xf0>
    3c76:	88 ec       	ldi	r24, 0xC8	; 200
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	9c 83       	std	Y+4, r25	; 0x04
    3c7c:	8b 83       	std	Y+3, r24	; 0x03
    3c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3c80:	9c 81       	ldd	r25, Y+4	; 0x04
    3c82:	01 97       	sbiw	r24, 0x01	; 1
    3c84:	f1 f7       	brne	.-4      	; 0x3c82 <HLCD_voidSendChar+0xde>
    3c86:	9c 83       	std	Y+4, r25	; 0x04
    3c88:	8b 83       	std	Y+3, r24	; 0x03
    3c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    3c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    3c8e:	01 97       	sbiw	r24, 0x01	; 1
    3c90:	9e 83       	std	Y+6, r25	; 0x06
    3c92:	8d 83       	std	Y+5, r24	; 0x05
    3c94:	8d 81       	ldd	r24, Y+5	; 0x05
    3c96:	9e 81       	ldd	r25, Y+6	; 0x06
    3c98:	00 97       	sbiw	r24, 0x00	; 0
    3c9a:	69 f7       	brne	.-38     	; 0x3c76 <HLCD_voidSendChar+0xd2>
    3c9c:	14 c0       	rjmp	.+40     	; 0x3cc6 <HLCD_voidSendChar+0x122>
    3c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca0:	78 85       	ldd	r23, Y+8	; 0x08
    3ca2:	89 85       	ldd	r24, Y+9	; 0x09
    3ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3caa:	dc 01       	movw	r26, r24
    3cac:	cb 01       	movw	r24, r22
    3cae:	9e 83       	std	Y+6, r25	; 0x06
    3cb0:	8d 83       	std	Y+5, r24	; 0x05
    3cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb4:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb6:	9a 83       	std	Y+2, r25	; 0x02
    3cb8:	89 83       	std	Y+1, r24	; 0x01
    3cba:	89 81       	ldd	r24, Y+1	; 0x01
    3cbc:	9a 81       	ldd	r25, Y+2	; 0x02
    3cbe:	01 97       	sbiw	r24, 0x01	; 1
    3cc0:	f1 f7       	brne	.-4      	; 0x3cbe <HLCD_voidSendChar+0x11a>
    3cc2:	9a 83       	std	Y+2, r25	; 0x02
    3cc4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		MDIO_u8SetPinValue(LCD_u8_CONTROL_PORT,LCD_u8_E_PIN,DIO_u8_LOW);
    3cc6:	81 e0       	ldi	r24, 0x01	; 1
    3cc8:	62 e0       	ldi	r22, 0x02	; 2
    3cca:	40 e0       	ldi	r20, 0x00	; 0
    3ccc:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>

	}
#endif

}
    3cd0:	2f 96       	adiw	r28, 0x0f	; 15
    3cd2:	0f b6       	in	r0, 0x3f	; 63
    3cd4:	f8 94       	cli
    3cd6:	de bf       	out	0x3e, r29	; 62
    3cd8:	0f be       	out	0x3f, r0	; 63
    3cda:	cd bf       	out	0x3d, r28	; 61
    3cdc:	cf 91       	pop	r28
    3cde:	df 91       	pop	r29
    3ce0:	08 95       	ret

00003ce2 <HLCD_voidWriteChar>:

/*******************************************************************************************************/
/*                               Display Character on LCD Function                                     */
/*******************************************************************************************************/
void HLCD_voidWriteChar (u8 Copy_u8Char)
{
    3ce2:	df 93       	push	r29
    3ce4:	cf 93       	push	r28
    3ce6:	0f 92       	push	r0
    3ce8:	cd b7       	in	r28, 0x3d	; 61
    3cea:	de b7       	in	r29, 0x3e	; 62
    3cec:	89 83       	std	Y+1, r24	; 0x01
	{
		HLCD_voidSendChar ( Copy_u8Char);
	}
#elif(LCD_MODE == LCD_4_BIT_MODE)
	{
		HLCD_voidSendChar ( Copy_u8Char>>4);
    3cee:	89 81       	ldd	r24, Y+1	; 0x01
    3cf0:	82 95       	swap	r24
    3cf2:	8f 70       	andi	r24, 0x0F	; 15
    3cf4:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <HLCD_voidSendChar>
		HLCD_voidSendChar ( Copy_u8Char);
    3cf8:	89 81       	ldd	r24, Y+1	; 0x01
    3cfa:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <HLCD_voidSendChar>
	}
#endif

}
    3cfe:	0f 90       	pop	r0
    3d00:	cf 91       	pop	r28
    3d02:	df 91       	pop	r29
    3d04:	08 95       	ret

00003d06 <HLCD_voidWriteString>:

/*******************************************************************************************************/
/*                               Display String on LCD Function                                        */
/*******************************************************************************************************/
void HLCD_voidWriteString (u8 * Copy_pu8String)
{
    3d06:	df 93       	push	r29
    3d08:	cf 93       	push	r28
    3d0a:	00 d0       	rcall	.+0      	; 0x3d0c <HLCD_voidWriteString+0x6>
    3d0c:	00 d0       	rcall	.+0      	; 0x3d0e <HLCD_voidWriteString+0x8>
    3d0e:	cd b7       	in	r28, 0x3d	; 61
    3d10:	de b7       	in	r29, 0x3e	; 62
    3d12:	9c 83       	std	Y+4, r25	; 0x04
    3d14:	8b 83       	std	Y+3, r24	; 0x03
	if(Copy_pu8String != NULL )
    3d16:	8b 81       	ldd	r24, Y+3	; 0x03
    3d18:	9c 81       	ldd	r25, Y+4	; 0x04
    3d1a:	00 97       	sbiw	r24, 0x00	; 0
    3d1c:	21 f1       	breq	.+72     	; 0x3d66 <HLCD_voidWriteString+0x60>
	{
		u8 x = 0;
    3d1e:	1a 82       	std	Y+2, r1	; 0x02
		u8 i = 0;
    3d20:	19 82       	std	Y+1, r1	; 0x01
    3d22:	16 c0       	rjmp	.+44     	; 0x3d50 <HLCD_voidWriteString+0x4a>
		while(Copy_pu8String[x] != '\0')
		{
			x++ ;
    3d24:	8a 81       	ldd	r24, Y+2	; 0x02
    3d26:	8f 5f       	subi	r24, 0xFF	; 255
    3d28:	8a 83       	std	Y+2, r24	; 0x02
    3d2a:	0e c0       	rjmp	.+28     	; 0x3d48 <HLCD_voidWriteString+0x42>
			for(  ; i < x; i++)
			{
				/* Write Character on LCD */
				HLCD_voidWriteChar (Copy_pu8String[i]);
    3d2c:	89 81       	ldd	r24, Y+1	; 0x01
    3d2e:	28 2f       	mov	r18, r24
    3d30:	30 e0       	ldi	r19, 0x00	; 0
    3d32:	8b 81       	ldd	r24, Y+3	; 0x03
    3d34:	9c 81       	ldd	r25, Y+4	; 0x04
    3d36:	fc 01       	movw	r30, r24
    3d38:	e2 0f       	add	r30, r18
    3d3a:	f3 1f       	adc	r31, r19
    3d3c:	80 81       	ld	r24, Z
    3d3e:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <HLCD_voidWriteChar>
		u8 x = 0;
		u8 i = 0;
		while(Copy_pu8String[x] != '\0')
		{
			x++ ;
			for(  ; i < x; i++)
    3d42:	89 81       	ldd	r24, Y+1	; 0x01
    3d44:	8f 5f       	subi	r24, 0xFF	; 255
    3d46:	89 83       	std	Y+1, r24	; 0x01
    3d48:	99 81       	ldd	r25, Y+1	; 0x01
    3d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d4c:	98 17       	cp	r25, r24
    3d4e:	70 f3       	brcs	.-36     	; 0x3d2c <HLCD_voidWriteString+0x26>
{
	if(Copy_pu8String != NULL )
	{
		u8 x = 0;
		u8 i = 0;
		while(Copy_pu8String[x] != '\0')
    3d50:	8a 81       	ldd	r24, Y+2	; 0x02
    3d52:	28 2f       	mov	r18, r24
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	8b 81       	ldd	r24, Y+3	; 0x03
    3d58:	9c 81       	ldd	r25, Y+4	; 0x04
    3d5a:	fc 01       	movw	r30, r24
    3d5c:	e2 0f       	add	r30, r18
    3d5e:	f3 1f       	adc	r31, r19
    3d60:	80 81       	ld	r24, Z
    3d62:	88 23       	and	r24, r24
    3d64:	f9 f6       	brne	.-66     	; 0x3d24 <HLCD_voidWriteString+0x1e>
			}

		}
	}

}
    3d66:	0f 90       	pop	r0
    3d68:	0f 90       	pop	r0
    3d6a:	0f 90       	pop	r0
    3d6c:	0f 90       	pop	r0
    3d6e:	cf 91       	pop	r28
    3d70:	df 91       	pop	r29
    3d72:	08 95       	ret

00003d74 <HLCD_u8_GoTo_XY>:

/*******************************************************************************************************/
/*                           Configure Position on LCD Function                                        */
/*******************************************************************************************************/
u8 HLCD_u8_GoTo_XY     (u8 Copy_u8X,u8 Copy_u8Y)
{
    3d74:	df 93       	push	r29
    3d76:	cf 93       	push	r28
    3d78:	00 d0       	rcall	.+0      	; 0x3d7a <HLCD_u8_GoTo_XY+0x6>
    3d7a:	00 d0       	rcall	.+0      	; 0x3d7c <HLCD_u8_GoTo_XY+0x8>
    3d7c:	0f 92       	push	r0
    3d7e:	cd b7       	in	r28, 0x3d	; 61
    3d80:	de b7       	in	r29, 0x3e	; 62
    3d82:	8a 83       	std	Y+2, r24	; 0x02
    3d84:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8ReturnState = STD_TYPES_OK;
    3d86:	81 e0       	ldi	r24, 0x01	; 1
    3d88:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8X <=1)&&(Copy_u8Y <= 39))
    3d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8c:	82 30       	cpi	r24, 0x02	; 2
    3d8e:	d0 f5       	brcc	.+116    	; 0x3e04 <HLCD_u8_GoTo_XY+0x90>
    3d90:	8b 81       	ldd	r24, Y+3	; 0x03
    3d92:	88 32       	cpi	r24, 0x28	; 40
    3d94:	b8 f5       	brcc	.+110    	; 0x3e04 <HLCD_u8_GoTo_XY+0x90>
			case LCD_u8_LINE1 : HLCD_voidSendCmnd(0xC0 + Copy_u8Y);break;
			}
		}
#elif(LCD_MODE == LCD_4_BIT_MODE)
		{
			switch(Copy_u8X)
    3d96:	8a 81       	ldd	r24, Y+2	; 0x02
    3d98:	28 2f       	mov	r18, r24
    3d9a:	30 e0       	ldi	r19, 0x00	; 0
    3d9c:	3d 83       	std	Y+5, r19	; 0x05
    3d9e:	2c 83       	std	Y+4, r18	; 0x04
    3da0:	8c 81       	ldd	r24, Y+4	; 0x04
    3da2:	9d 81       	ldd	r25, Y+5	; 0x05
    3da4:	00 97       	sbiw	r24, 0x00	; 0
    3da6:	31 f0       	breq	.+12     	; 0x3db4 <HLCD_u8_GoTo_XY+0x40>
    3da8:	2c 81       	ldd	r18, Y+4	; 0x04
    3daa:	3d 81       	ldd	r19, Y+5	; 0x05
    3dac:	21 30       	cpi	r18, 0x01	; 1
    3dae:	31 05       	cpc	r19, r1
    3db0:	a9 f0       	breq	.+42     	; 0x3ddc <HLCD_u8_GoTo_XY+0x68>
    3db2:	29 c0       	rjmp	.+82     	; 0x3e06 <HLCD_u8_GoTo_XY+0x92>
			{

			case LCD_u8_LINE0 :
				HLCD_voidSendCmnd((0x80 + Copy_u8Y)>>4);
    3db4:	8b 81       	ldd	r24, Y+3	; 0x03
    3db6:	88 2f       	mov	r24, r24
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	80 58       	subi	r24, 0x80	; 128
    3dbc:	9f 4f       	sbci	r25, 0xFF	; 255
    3dbe:	95 95       	asr	r25
    3dc0:	87 95       	ror	r24
    3dc2:	95 95       	asr	r25
    3dc4:	87 95       	ror	r24
    3dc6:	95 95       	asr	r25
    3dc8:	87 95       	ror	r24
    3dca:	95 95       	asr	r25
    3dcc:	87 95       	ror	r24
    3dce:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
			    HLCD_voidSendCmnd (0x80 + Copy_u8Y);
    3dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    3dd4:	80 58       	subi	r24, 0x80	; 128
    3dd6:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
    3dda:	15 c0       	rjmp	.+42     	; 0x3e06 <HLCD_u8_GoTo_XY+0x92>
			break;

			case LCD_u8_LINE1 :
				HLCD_voidSendCmnd((0xC0 + Copy_u8Y)>>4);
    3ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    3dde:	88 2f       	mov	r24, r24
    3de0:	90 e0       	ldi	r25, 0x00	; 0
    3de2:	80 54       	subi	r24, 0x40	; 64
    3de4:	9f 4f       	sbci	r25, 0xFF	; 255
    3de6:	95 95       	asr	r25
    3de8:	87 95       	ror	r24
    3dea:	95 95       	asr	r25
    3dec:	87 95       	ror	r24
    3dee:	95 95       	asr	r25
    3df0:	87 95       	ror	r24
    3df2:	95 95       	asr	r25
    3df4:	87 95       	ror	r24
    3df6:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
				HLCD_voidSendCmnd( 0xC0 + Copy_u8Y);
    3dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3dfc:	80 54       	subi	r24, 0x40	; 64
    3dfe:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
    3e02:	01 c0       	rjmp	.+2      	; 0x3e06 <HLCD_u8_GoTo_XY+0x92>
#endif

	}
	else
	{
		Local_u8ReturnState = STD_TYPES_NOK;
    3e04:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ReturnState;
    3e06:	89 81       	ldd	r24, Y+1	; 0x01


}
    3e08:	0f 90       	pop	r0
    3e0a:	0f 90       	pop	r0
    3e0c:	0f 90       	pop	r0
    3e0e:	0f 90       	pop	r0
    3e10:	0f 90       	pop	r0
    3e12:	cf 91       	pop	r28
    3e14:	df 91       	pop	r29
    3e16:	08 95       	ret

00003e18 <HLCD_voidWriteNumber>:

/*******************************************************************************************************/
/*                               Display Number on LCD Function                                        */
/*******************************************************************************************************/
void HLCD_voidWriteNumber (u32  Copy_u32Num)
{
    3e18:	df 93       	push	r29
    3e1a:	cf 93       	push	r28
    3e1c:	cd b7       	in	r28, 0x3d	; 61
    3e1e:	de b7       	in	r29, 0x3e	; 62
    3e20:	66 97       	sbiw	r28, 0x16	; 22
    3e22:	0f b6       	in	r0, 0x3f	; 63
    3e24:	f8 94       	cli
    3e26:	de bf       	out	0x3e, r29	; 62
    3e28:	0f be       	out	0x3f, r0	; 63
    3e2a:	cd bf       	out	0x3d, r28	; 61
    3e2c:	6b 8b       	std	Y+19, r22	; 0x13
    3e2e:	7c 8b       	std	Y+20, r23	; 0x14
    3e30:	8d 8b       	std	Y+21, r24	; 0x15
    3e32:	9e 8b       	std	Y+22, r25	; 0x16

	u8 Arr[10];
	u8 Local_Remainder = 1;
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	88 87       	std	Y+8, r24	; 0x08
	u32 Local_Number = Copy_u32Num;
    3e38:	8b 89       	ldd	r24, Y+19	; 0x13
    3e3a:	9c 89       	ldd	r25, Y+20	; 0x14
    3e3c:	ad 89       	ldd	r26, Y+21	; 0x15
    3e3e:	be 89       	ldd	r27, Y+22	; 0x16
    3e40:	8c 83       	std	Y+4, r24	; 0x04
    3e42:	9d 83       	std	Y+5, r25	; 0x05
    3e44:	ae 83       	std	Y+6, r26	; 0x06
    3e46:	bf 83       	std	Y+7, r27	; 0x07
	u8 Local_Counter = 0;
    3e48:	1b 82       	std	Y+3, r1	; 0x03
	u8 Local_Counter2 ;


	for(u8 initial = 10 ; initial >=1 ; initial--)
    3e4a:	8a e0       	ldi	r24, 0x0A	; 10
    3e4c:	89 83       	std	Y+1, r24	; 0x01
    3e4e:	42 c0       	rjmp	.+132    	; 0x3ed4 <HLCD_voidWriteNumber+0xbc>
	{
		Local_Remainder = Local_Number % 10 ;
    3e50:	8c 81       	ldd	r24, Y+4	; 0x04
    3e52:	9d 81       	ldd	r25, Y+5	; 0x05
    3e54:	ae 81       	ldd	r26, Y+6	; 0x06
    3e56:	bf 81       	ldd	r27, Y+7	; 0x07
    3e58:	2a e0       	ldi	r18, 0x0A	; 10
    3e5a:	30 e0       	ldi	r19, 0x00	; 0
    3e5c:	40 e0       	ldi	r20, 0x00	; 0
    3e5e:	50 e0       	ldi	r21, 0x00	; 0
    3e60:	bc 01       	movw	r22, r24
    3e62:	cd 01       	movw	r24, r26
    3e64:	0e 94 2d 23 	call	0x465a	; 0x465a <__udivmodsi4>
    3e68:	dc 01       	movw	r26, r24
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	88 87       	std	Y+8, r24	; 0x08
		Local_Number    = Local_Number /10 ;
    3e6e:	8c 81       	ldd	r24, Y+4	; 0x04
    3e70:	9d 81       	ldd	r25, Y+5	; 0x05
    3e72:	ae 81       	ldd	r26, Y+6	; 0x06
    3e74:	bf 81       	ldd	r27, Y+7	; 0x07
    3e76:	2a e0       	ldi	r18, 0x0A	; 10
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	40 e0       	ldi	r20, 0x00	; 0
    3e7c:	50 e0       	ldi	r21, 0x00	; 0
    3e7e:	bc 01       	movw	r22, r24
    3e80:	cd 01       	movw	r24, r26
    3e82:	0e 94 2d 23 	call	0x465a	; 0x465a <__udivmodsi4>
    3e86:	da 01       	movw	r26, r20
    3e88:	c9 01       	movw	r24, r18
    3e8a:	8c 83       	std	Y+4, r24	; 0x04
    3e8c:	9d 83       	std	Y+5, r25	; 0x05
    3e8e:	ae 83       	std	Y+6, r26	; 0x06
    3e90:	bf 83       	std	Y+7, r27	; 0x07

		if((Local_Remainder ==0) && (Local_Number<1) && (Local_Counter>0) )
    3e92:	88 85       	ldd	r24, Y+8	; 0x08
    3e94:	88 23       	and	r24, r24
    3e96:	59 f4       	brne	.+22     	; 0x3eae <HLCD_voidWriteNumber+0x96>
    3e98:	8c 81       	ldd	r24, Y+4	; 0x04
    3e9a:	9d 81       	ldd	r25, Y+5	; 0x05
    3e9c:	ae 81       	ldd	r26, Y+6	; 0x06
    3e9e:	bf 81       	ldd	r27, Y+7	; 0x07
    3ea0:	00 97       	sbiw	r24, 0x00	; 0
    3ea2:	a1 05       	cpc	r26, r1
    3ea4:	b1 05       	cpc	r27, r1
    3ea6:	19 f4       	brne	.+6      	; 0x3eae <HLCD_voidWriteNumber+0x96>
    3ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    3eaa:	88 23       	and	r24, r24
    3eac:	b9 f4       	brne	.+46     	; 0x3edc <HLCD_voidWriteNumber+0xc4>
		{
			break;
		}
		Local_Counter ++;
    3eae:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb0:	8f 5f       	subi	r24, 0xFF	; 255
    3eb2:	8b 83       	std	Y+3, r24	; 0x03
		Arr[initial-1] = Local_Remainder ;
    3eb4:	89 81       	ldd	r24, Y+1	; 0x01
    3eb6:	88 2f       	mov	r24, r24
    3eb8:	90 e0       	ldi	r25, 0x00	; 0
    3eba:	9c 01       	movw	r18, r24
    3ebc:	21 50       	subi	r18, 0x01	; 1
    3ebe:	30 40       	sbci	r19, 0x00	; 0
    3ec0:	ce 01       	movw	r24, r28
    3ec2:	09 96       	adiw	r24, 0x09	; 9
    3ec4:	fc 01       	movw	r30, r24
    3ec6:	e2 0f       	add	r30, r18
    3ec8:	f3 1f       	adc	r31, r19
    3eca:	88 85       	ldd	r24, Y+8	; 0x08
    3ecc:	80 83       	st	Z, r24
	u32 Local_Number = Copy_u32Num;
	u8 Local_Counter = 0;
	u8 Local_Counter2 ;


	for(u8 initial = 10 ; initial >=1 ; initial--)
    3ece:	89 81       	ldd	r24, Y+1	; 0x01
    3ed0:	81 50       	subi	r24, 0x01	; 1
    3ed2:	89 83       	std	Y+1, r24	; 0x01
    3ed4:	89 81       	ldd	r24, Y+1	; 0x01
    3ed6:	88 23       	and	r24, r24
    3ed8:	09 f0       	breq	.+2      	; 0x3edc <HLCD_voidWriteNumber+0xc4>
    3eda:	ba cf       	rjmp	.-140    	; 0x3e50 <HLCD_voidWriteNumber+0x38>
		}
		Local_Counter ++;
		Arr[initial-1] = Local_Remainder ;
	}

	for(Local_Counter2 = 10 - Local_Counter; Local_Counter2 < 10 ; Local_Counter2 ++)
    3edc:	8a e0       	ldi	r24, 0x0A	; 10
    3ede:	9b 81       	ldd	r25, Y+3	; 0x03
    3ee0:	89 1b       	sub	r24, r25
    3ee2:	8a 83       	std	Y+2, r24	; 0x02
    3ee4:	0f c0       	rjmp	.+30     	; 0x3f04 <HLCD_voidWriteNumber+0xec>
	{
		HLCD_voidWriteChar(Arr[Local_Counter2]+48);
    3ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee8:	28 2f       	mov	r18, r24
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	ce 01       	movw	r24, r28
    3eee:	09 96       	adiw	r24, 0x09	; 9
    3ef0:	fc 01       	movw	r30, r24
    3ef2:	e2 0f       	add	r30, r18
    3ef4:	f3 1f       	adc	r31, r19
    3ef6:	80 81       	ld	r24, Z
    3ef8:	80 5d       	subi	r24, 0xD0	; 208
    3efa:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <HLCD_voidWriteChar>
		}
		Local_Counter ++;
		Arr[initial-1] = Local_Remainder ;
	}

	for(Local_Counter2 = 10 - Local_Counter; Local_Counter2 < 10 ; Local_Counter2 ++)
    3efe:	8a 81       	ldd	r24, Y+2	; 0x02
    3f00:	8f 5f       	subi	r24, 0xFF	; 255
    3f02:	8a 83       	std	Y+2, r24	; 0x02
    3f04:	8a 81       	ldd	r24, Y+2	; 0x02
    3f06:	8a 30       	cpi	r24, 0x0A	; 10
    3f08:	70 f3       	brcs	.-36     	; 0x3ee6 <HLCD_voidWriteNumber+0xce>
		HLCD_voidWriteChar(Arr[Local_Counter2]+48);
	}



}
    3f0a:	66 96       	adiw	r28, 0x16	; 22
    3f0c:	0f b6       	in	r0, 0x3f	; 63
    3f0e:	f8 94       	cli
    3f10:	de bf       	out	0x3e, r29	; 62
    3f12:	0f be       	out	0x3f, r0	; 63
    3f14:	cd bf       	out	0x3d, r28	; 61
    3f16:	cf 91       	pop	r28
    3f18:	df 91       	pop	r29
    3f1a:	08 95       	ret

00003f1c <HLCD_voidSendSpecialChar>:

/*******************************************************************************************************/
/*                Send And Display Special Character on LCD Function                                   */
/*******************************************************************************************************/
void HLCD_voidSendSpecialChar(u8 Copy_u8CharNo,u8 Copy_u8X,u8 Copy_u8Y,u8 * Copy_PSpecialChar)
{
    3f1c:	df 93       	push	r29
    3f1e:	cf 93       	push	r28
    3f20:	cd b7       	in	r28, 0x3d	; 61
    3f22:	de b7       	in	r29, 0x3e	; 62
    3f24:	28 97       	sbiw	r28, 0x08	; 8
    3f26:	0f b6       	in	r0, 0x3f	; 63
    3f28:	f8 94       	cli
    3f2a:	de bf       	out	0x3e, r29	; 62
    3f2c:	0f be       	out	0x3f, r0	; 63
    3f2e:	cd bf       	out	0x3d, r28	; 61
    3f30:	8a 83       	std	Y+2, r24	; 0x02
    3f32:	6b 83       	std	Y+3, r22	; 0x03
    3f34:	4c 83       	std	Y+4, r20	; 0x04
    3f36:	3e 83       	std	Y+6, r19	; 0x06
    3f38:	2d 83       	std	Y+5, r18	; 0x05
			break;
		}
	}
#elif(LCD_MODE == LCD_4_BIT_MODE)
	{
		switch(Copy_u8CharNo)
    3f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f3c:	28 2f       	mov	r18, r24
    3f3e:	30 e0       	ldi	r19, 0x00	; 0
    3f40:	38 87       	std	Y+8, r19	; 0x08
    3f42:	2f 83       	std	Y+7, r18	; 0x07
    3f44:	8f 81       	ldd	r24, Y+7	; 0x07
    3f46:	98 85       	ldd	r25, Y+8	; 0x08
    3f48:	83 30       	cpi	r24, 0x03	; 3
    3f4a:	91 05       	cpc	r25, r1
    3f4c:	09 f4       	brne	.+2      	; 0x3f50 <HLCD_voidSendSpecialChar+0x34>
    3f4e:	3e c0       	rjmp	.+124    	; 0x3fcc <HLCD_voidSendSpecialChar+0xb0>
    3f50:	2f 81       	ldd	r18, Y+7	; 0x07
    3f52:	38 85       	ldd	r19, Y+8	; 0x08
    3f54:	24 30       	cpi	r18, 0x04	; 4
    3f56:	31 05       	cpc	r19, r1
    3f58:	7c f4       	brge	.+30     	; 0x3f78 <HLCD_voidSendSpecialChar+0x5c>
    3f5a:	8f 81       	ldd	r24, Y+7	; 0x07
    3f5c:	98 85       	ldd	r25, Y+8	; 0x08
    3f5e:	81 30       	cpi	r24, 0x01	; 1
    3f60:	91 05       	cpc	r25, r1
    3f62:	31 f1       	breq	.+76     	; 0x3fb0 <HLCD_voidSendSpecialChar+0x94>
    3f64:	2f 81       	ldd	r18, Y+7	; 0x07
    3f66:	38 85       	ldd	r19, Y+8	; 0x08
    3f68:	22 30       	cpi	r18, 0x02	; 2
    3f6a:	31 05       	cpc	r19, r1
    3f6c:	44 f5       	brge	.+80     	; 0x3fbe <HLCD_voidSendSpecialChar+0xa2>
    3f6e:	8f 81       	ldd	r24, Y+7	; 0x07
    3f70:	98 85       	ldd	r25, Y+8	; 0x08
    3f72:	00 97       	sbiw	r24, 0x00	; 0
    3f74:	b1 f0       	breq	.+44     	; 0x3fa2 <HLCD_voidSendSpecialChar+0x86>
    3f76:	4c c0       	rjmp	.+152    	; 0x4010 <HLCD_voidSendSpecialChar+0xf4>
    3f78:	2f 81       	ldd	r18, Y+7	; 0x07
    3f7a:	38 85       	ldd	r19, Y+8	; 0x08
    3f7c:	25 30       	cpi	r18, 0x05	; 5
    3f7e:	31 05       	cpc	r19, r1
    3f80:	99 f1       	breq	.+102    	; 0x3fe8 <HLCD_voidSendSpecialChar+0xcc>
    3f82:	8f 81       	ldd	r24, Y+7	; 0x07
    3f84:	98 85       	ldd	r25, Y+8	; 0x08
    3f86:	85 30       	cpi	r24, 0x05	; 5
    3f88:	91 05       	cpc	r25, r1
    3f8a:	3c f1       	brlt	.+78     	; 0x3fda <HLCD_voidSendSpecialChar+0xbe>
    3f8c:	2f 81       	ldd	r18, Y+7	; 0x07
    3f8e:	38 85       	ldd	r19, Y+8	; 0x08
    3f90:	26 30       	cpi	r18, 0x06	; 6
    3f92:	31 05       	cpc	r19, r1
    3f94:	81 f1       	breq	.+96     	; 0x3ff6 <HLCD_voidSendSpecialChar+0xda>
    3f96:	8f 81       	ldd	r24, Y+7	; 0x07
    3f98:	98 85       	ldd	r25, Y+8	; 0x08
    3f9a:	87 30       	cpi	r24, 0x07	; 7
    3f9c:	91 05       	cpc	r25, r1
    3f9e:	91 f1       	breq	.+100    	; 0x4004 <HLCD_voidSendSpecialChar+0xe8>
    3fa0:	37 c0       	rjmp	.+110    	; 0x4010 <HLCD_voidSendSpecialChar+0xf4>
		{
		case 0:
			HLCD_voidSendCmnd(0b01000000>>4);
    3fa2:	84 e0       	ldi	r24, 0x04	; 4
    3fa4:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
			HLCD_voidSendCmnd(0b01000000);
    3fa8:	80 e4       	ldi	r24, 0x40	; 64
    3faa:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
    3fae:	30 c0       	rjmp	.+96     	; 0x4010 <HLCD_voidSendSpecialChar+0xf4>
			break;
		case 1:
			HLCD_voidSendCmnd(0b01001000>>4);
    3fb0:	84 e0       	ldi	r24, 0x04	; 4
    3fb2:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
			HLCD_voidSendCmnd(0b01001000);
    3fb6:	88 e4       	ldi	r24, 0x48	; 72
    3fb8:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
    3fbc:	29 c0       	rjmp	.+82     	; 0x4010 <HLCD_voidSendSpecialChar+0xf4>
			break;
		case 2:
			HLCD_voidSendCmnd(0b01010000>>4);
    3fbe:	85 e0       	ldi	r24, 0x05	; 5
    3fc0:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
			HLCD_voidSendCmnd(0b01010000);
    3fc4:	80 e5       	ldi	r24, 0x50	; 80
    3fc6:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
    3fca:	22 c0       	rjmp	.+68     	; 0x4010 <HLCD_voidSendSpecialChar+0xf4>
			break;
		case 3:
			HLCD_voidSendCmnd(0b01011000>>4);
    3fcc:	85 e0       	ldi	r24, 0x05	; 5
    3fce:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
			HLCD_voidSendCmnd(0b01011000);
    3fd2:	88 e5       	ldi	r24, 0x58	; 88
    3fd4:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
    3fd8:	1b c0       	rjmp	.+54     	; 0x4010 <HLCD_voidSendSpecialChar+0xf4>
			break;
		case 4:
			HLCD_voidSendCmnd(0b01100000>>4);
    3fda:	86 e0       	ldi	r24, 0x06	; 6
    3fdc:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
			HLCD_voidSendCmnd(0b01100000);
    3fe0:	80 e6       	ldi	r24, 0x60	; 96
    3fe2:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
    3fe6:	14 c0       	rjmp	.+40     	; 0x4010 <HLCD_voidSendSpecialChar+0xf4>
			break;
		case 5:
			HLCD_voidSendCmnd(0b01101000>>4);
    3fe8:	86 e0       	ldi	r24, 0x06	; 6
    3fea:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
			HLCD_voidSendCmnd(0b01101000);
    3fee:	88 e6       	ldi	r24, 0x68	; 104
    3ff0:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
    3ff4:	0d c0       	rjmp	.+26     	; 0x4010 <HLCD_voidSendSpecialChar+0xf4>
			break;
		case 6:
			HLCD_voidSendCmnd(0b01110000>>4);
    3ff6:	87 e0       	ldi	r24, 0x07	; 7
    3ff8:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
			HLCD_voidSendCmnd(0b01110000);
    3ffc:	80 e7       	ldi	r24, 0x70	; 112
    3ffe:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
    4002:	06 c0       	rjmp	.+12     	; 0x4010 <HLCD_voidSendSpecialChar+0xf4>
			break;
		case 7:
			HLCD_voidSendCmnd(0b01111000>>4);
    4004:	87 e0       	ldi	r24, 0x07	; 7
    4006:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
			HLCD_voidSendCmnd(0b01111000);
    400a:	88 e7       	ldi	r24, 0x78	; 120
    400c:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
#endif



     /* Display Special Character on LCD */
	for(u8 specialchar=0 ; specialchar<8 ; specialchar++ )
    4010:	19 82       	std	Y+1, r1	; 0x01
    4012:	0e c0       	rjmp	.+28     	; 0x4030 <HLCD_voidSendSpecialChar+0x114>
	{
		HLCD_voidWriteChar(Copy_PSpecialChar[specialchar]);
    4014:	89 81       	ldd	r24, Y+1	; 0x01
    4016:	28 2f       	mov	r18, r24
    4018:	30 e0       	ldi	r19, 0x00	; 0
    401a:	8d 81       	ldd	r24, Y+5	; 0x05
    401c:	9e 81       	ldd	r25, Y+6	; 0x06
    401e:	fc 01       	movw	r30, r24
    4020:	e2 0f       	add	r30, r18
    4022:	f3 1f       	adc	r31, r19
    4024:	80 81       	ld	r24, Z
    4026:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <HLCD_voidWriteChar>
#endif



     /* Display Special Character on LCD */
	for(u8 specialchar=0 ; specialchar<8 ; specialchar++ )
    402a:	89 81       	ldd	r24, Y+1	; 0x01
    402c:	8f 5f       	subi	r24, 0xFF	; 255
    402e:	89 83       	std	Y+1, r24	; 0x01
    4030:	89 81       	ldd	r24, Y+1	; 0x01
    4032:	88 30       	cpi	r24, 0x08	; 8
    4034:	78 f3       	brcs	.-34     	; 0x4014 <HLCD_voidSendSpecialChar+0xf8>
	{
		HLCD_voidWriteChar(Copy_PSpecialChar[specialchar]);
	}

	HLCD_u8_GoTo_XY( Copy_u8X, Copy_u8Y);
    4036:	8b 81       	ldd	r24, Y+3	; 0x03
    4038:	6c 81       	ldd	r22, Y+4	; 0x04
    403a:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <HLCD_u8_GoTo_XY>
	HLCD_voidWriteChar(Copy_u8CharNo);
    403e:	8a 81       	ldd	r24, Y+2	; 0x02
    4040:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <HLCD_voidWriteChar>


}
    4044:	28 96       	adiw	r28, 0x08	; 8
    4046:	0f b6       	in	r0, 0x3f	; 63
    4048:	f8 94       	cli
    404a:	de bf       	out	0x3e, r29	; 62
    404c:	0f be       	out	0x3f, r0	; 63
    404e:	cd bf       	out	0x3d, r28	; 61
    4050:	cf 91       	pop	r28
    4052:	df 91       	pop	r29
    4054:	08 95       	ret

00004056 <HLCD_voidShiftDispRight>:

/*******************************************************************************************************/
/*                        LCD Shift Display to The Right Function                                      */
/*******************************************************************************************************/
void HLCD_voidShiftDispRight(void)
{
    4056:	df 93       	push	r29
    4058:	cf 93       	push	r28
    405a:	cd b7       	in	r28, 0x3d	; 61
    405c:	de b7       	in	r29, 0x3e	; 62
	{
		HLCD_voidSendCmnd(LCD_SHIFT_RIGHT);
	}
#elif(LCD_MODE == LCD_4_BIT_MODE)
	{
		HLCD_voidSendCmnd(LCD_SHIFT_RIGHT>>4);
    405e:	81 e0       	ldi	r24, 0x01	; 1
    4060:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
		HLCD_voidSendCmnd(LCD_SHIFT_RIGHT);
    4064:	8c e1       	ldi	r24, 0x1C	; 28
    4066:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
	}
#endif
}
    406a:	cf 91       	pop	r28
    406c:	df 91       	pop	r29
    406e:	08 95       	ret

00004070 <HLCD_voidShiftDispLeft>:

/*******************************************************************************************************/
/*                        LCD Shift Display to The Left Function                                      */
/*******************************************************************************************************/
void HLCD_voidShiftDispLeft(void)
{
    4070:	df 93       	push	r29
    4072:	cf 93       	push	r28
    4074:	cd b7       	in	r28, 0x3d	; 61
    4076:	de b7       	in	r29, 0x3e	; 62
	{
		HLCD_voidSendCmnd(LCD_SHIFT_LEFT);
	}
#elif(LCD_MODE == LCD_4_BIT_MODE)
	{
		HLCD_voidSendCmnd(LCD_SHIFT_LEFT>>4);
    4078:	81 e0       	ldi	r24, 0x01	; 1
    407a:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
		HLCD_voidSendCmnd(LCD_SHIFT_LEFT);
    407e:	88 e1       	ldi	r24, 0x18	; 24
    4080:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <HLCD_voidSendCmnd>
	}
#endif
}
    4084:	cf 91       	pop	r28
    4086:	df 91       	pop	r29
    4088:	08 95       	ret

0000408a <HKEYPAD_u8GetPressedKey>:
/*                            KEYPAD Function that Gets The Pressed KEY                                */
/*******************************************************************************************************/
/*                         ROWS are Output     &      COLUMNS  are Input                               */
/*******************************************************************************************************/
u8 HKEYPAD_u8GetPressedKey(u8 * Copy_pu8ReturnedKey)
{
    408a:	df 93       	push	r29
    408c:	cf 93       	push	r28
    408e:	cd b7       	in	r28, 0x3d	; 61
    4090:	de b7       	in	r29, 0x3e	; 62
    4092:	a3 97       	sbiw	r28, 0x23	; 35
    4094:	0f b6       	in	r0, 0x3f	; 63
    4096:	f8 94       	cli
    4098:	de bf       	out	0x3e, r29	; 62
    409a:	0f be       	out	0x3f, r0	; 63
    409c:	cd bf       	out	0x3d, r28	; 61
    409e:	9b a3       	std	Y+35, r25	; 0x23
    40a0:	8a a3       	std	Y+34, r24	; 0x22
	u8 Local_u8ErrorState = STD_TYPES_OK;
    40a2:	81 e0       	ldi	r24, 0x01	; 1
    40a4:	88 a3       	std	Y+32, r24	; 0x20
	u8 Local_u8_RowsCounter,Local_u8_ColsCounter,Local_u8ReturnedPinValue,Local_u8Flag = 0;
    40a6:	1d 8e       	std	Y+29, r1	; 0x1d
	/* Check Pointer validation */
	if(Copy_pu8ReturnedKey != NULL)
    40a8:	8a a1       	ldd	r24, Y+34	; 0x22
    40aa:	9b a1       	ldd	r25, Y+35	; 0x23
    40ac:	00 97       	sbiw	r24, 0x00	; 0
    40ae:	09 f4       	brne	.+2      	; 0x40b2 <HKEYPAD_u8GetPressedKey+0x28>
    40b0:	53 c1       	rjmp	.+678    	; 0x4358 <HKEYPAD_u8GetPressedKey+0x2ce>
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
    40b2:	ea a1       	ldd	r30, Y+34	; 0x22
    40b4:	fb a1       	ldd	r31, Y+35	; 0x23
    40b6:	8f ef       	ldi	r24, 0xFF	; 255
    40b8:	80 83       	st	Z, r24
		for(Local_u8_RowsCounter=0 ; Local_u8_RowsCounter <=3 ; Local_u8_RowsCounter++)
    40ba:	1f 8e       	std	Y+31, r1	; 0x1f
    40bc:	48 c1       	rjmp	.+656    	; 0x434e <HKEYPAD_u8GetPressedKey+0x2c4>
		{
			MDIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8_RowsCounter],DIO_u8_LOW);
    40be:	8f 8d       	ldd	r24, Y+31	; 0x1f
    40c0:	88 2f       	mov	r24, r24
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	fc 01       	movw	r30, r24
    40c6:	e8 58       	subi	r30, 0x88	; 136
    40c8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ca:	90 81       	ld	r25, Z
    40cc:	81 e0       	ldi	r24, 0x01	; 1
    40ce:	69 2f       	mov	r22, r25
    40d0:	40 e0       	ldi	r20, 0x00	; 0
    40d2:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
			/* Read Coloumns */
			for(Local_u8_ColsCounter=0 ; Local_u8_ColsCounter<=3 ; Local_u8_ColsCounter++)
    40d6:	1e 8e       	std	Y+30, r1	; 0x1e
    40d8:	24 c1       	rjmp	.+584    	; 0x4322 <HKEYPAD_u8GetPressedKey+0x298>
			{
				MDIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8_ColsCounter],&Local_u8ReturnedPinValue);
    40da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    40dc:	88 2f       	mov	r24, r24
    40de:	90 e0       	ldi	r25, 0x00	; 0
    40e0:	fc 01       	movw	r30, r24
    40e2:	e4 58       	subi	r30, 0x84	; 132
    40e4:	ff 4f       	sbci	r31, 0xFF	; 255
    40e6:	90 81       	ld	r25, Z
    40e8:	9e 01       	movw	r18, r28
    40ea:	2f 5d       	subi	r18, 0xDF	; 223
    40ec:	3f 4f       	sbci	r19, 0xFF	; 255
    40ee:	81 e0       	ldi	r24, 0x01	; 1
    40f0:	69 2f       	mov	r22, r25
    40f2:	a9 01       	movw	r20, r18
    40f4:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <MDIO_u8GetPinValue>
				/* Check if Switch is pressed */
				if(Local_u8ReturnedPinValue == DIO_u8_LOW)
    40f8:	89 a1       	ldd	r24, Y+33	; 0x21
    40fa:	88 23       	and	r24, r24
    40fc:	09 f0       	breq	.+2      	; 0x4100 <HKEYPAD_u8GetPressedKey+0x76>
    40fe:	0e c1       	rjmp	.+540    	; 0x431c <HKEYPAD_u8GetPressedKey+0x292>
    4100:	80 e0       	ldi	r24, 0x00	; 0
    4102:	90 e0       	ldi	r25, 0x00	; 0
    4104:	a0 ea       	ldi	r26, 0xA0	; 160
    4106:	b1 e4       	ldi	r27, 0x41	; 65
    4108:	89 8f       	std	Y+25, r24	; 0x19
    410a:	9a 8f       	std	Y+26, r25	; 0x1a
    410c:	ab 8f       	std	Y+27, r26	; 0x1b
    410e:	bc 8f       	std	Y+28, r27	; 0x1c
    4110:	69 8d       	ldd	r22, Y+25	; 0x19
    4112:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4114:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4116:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4118:	20 e0       	ldi	r18, 0x00	; 0
    411a:	30 e0       	ldi	r19, 0x00	; 0
    411c:	4a ef       	ldi	r20, 0xFA	; 250
    411e:	54 e4       	ldi	r21, 0x44	; 68
    4120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4124:	dc 01       	movw	r26, r24
    4126:	cb 01       	movw	r24, r22
    4128:	8d 8b       	std	Y+21, r24	; 0x15
    412a:	9e 8b       	std	Y+22, r25	; 0x16
    412c:	af 8b       	std	Y+23, r26	; 0x17
    412e:	b8 8f       	std	Y+24, r27	; 0x18
    4130:	6d 89       	ldd	r22, Y+21	; 0x15
    4132:	7e 89       	ldd	r23, Y+22	; 0x16
    4134:	8f 89       	ldd	r24, Y+23	; 0x17
    4136:	98 8d       	ldd	r25, Y+24	; 0x18
    4138:	20 e0       	ldi	r18, 0x00	; 0
    413a:	30 e0       	ldi	r19, 0x00	; 0
    413c:	40 e8       	ldi	r20, 0x80	; 128
    413e:	5f e3       	ldi	r21, 0x3F	; 63
    4140:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4144:	88 23       	and	r24, r24
    4146:	2c f4       	brge	.+10     	; 0x4152 <HKEYPAD_u8GetPressedKey+0xc8>
    4148:	81 e0       	ldi	r24, 0x01	; 1
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	9c 8b       	std	Y+20, r25	; 0x14
    414e:	8b 8b       	std	Y+19, r24	; 0x13
    4150:	3f c0       	rjmp	.+126    	; 0x41d0 <HKEYPAD_u8GetPressedKey+0x146>
    4152:	6d 89       	ldd	r22, Y+21	; 0x15
    4154:	7e 89       	ldd	r23, Y+22	; 0x16
    4156:	8f 89       	ldd	r24, Y+23	; 0x17
    4158:	98 8d       	ldd	r25, Y+24	; 0x18
    415a:	20 e0       	ldi	r18, 0x00	; 0
    415c:	3f ef       	ldi	r19, 0xFF	; 255
    415e:	4f e7       	ldi	r20, 0x7F	; 127
    4160:	57 e4       	ldi	r21, 0x47	; 71
    4162:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4166:	18 16       	cp	r1, r24
    4168:	4c f5       	brge	.+82     	; 0x41bc <HKEYPAD_u8GetPressedKey+0x132>
    416a:	69 8d       	ldd	r22, Y+25	; 0x19
    416c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    416e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4170:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4172:	20 e0       	ldi	r18, 0x00	; 0
    4174:	30 e0       	ldi	r19, 0x00	; 0
    4176:	40 e2       	ldi	r20, 0x20	; 32
    4178:	51 e4       	ldi	r21, 0x41	; 65
    417a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    417e:	dc 01       	movw	r26, r24
    4180:	cb 01       	movw	r24, r22
    4182:	bc 01       	movw	r22, r24
    4184:	cd 01       	movw	r24, r26
    4186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    418a:	dc 01       	movw	r26, r24
    418c:	cb 01       	movw	r24, r22
    418e:	9c 8b       	std	Y+20, r25	; 0x14
    4190:	8b 8b       	std	Y+19, r24	; 0x13
    4192:	0f c0       	rjmp	.+30     	; 0x41b2 <HKEYPAD_u8GetPressedKey+0x128>
    4194:	88 ec       	ldi	r24, 0xC8	; 200
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	9a 8b       	std	Y+18, r25	; 0x12
    419a:	89 8b       	std	Y+17, r24	; 0x11
    419c:	89 89       	ldd	r24, Y+17	; 0x11
    419e:	9a 89       	ldd	r25, Y+18	; 0x12
    41a0:	01 97       	sbiw	r24, 0x01	; 1
    41a2:	f1 f7       	brne	.-4      	; 0x41a0 <HKEYPAD_u8GetPressedKey+0x116>
    41a4:	9a 8b       	std	Y+18, r25	; 0x12
    41a6:	89 8b       	std	Y+17, r24	; 0x11
    41a8:	8b 89       	ldd	r24, Y+19	; 0x13
    41aa:	9c 89       	ldd	r25, Y+20	; 0x14
    41ac:	01 97       	sbiw	r24, 0x01	; 1
    41ae:	9c 8b       	std	Y+20, r25	; 0x14
    41b0:	8b 8b       	std	Y+19, r24	; 0x13
    41b2:	8b 89       	ldd	r24, Y+19	; 0x13
    41b4:	9c 89       	ldd	r25, Y+20	; 0x14
    41b6:	00 97       	sbiw	r24, 0x00	; 0
    41b8:	69 f7       	brne	.-38     	; 0x4194 <HKEYPAD_u8GetPressedKey+0x10a>
    41ba:	24 c0       	rjmp	.+72     	; 0x4204 <HKEYPAD_u8GetPressedKey+0x17a>
    41bc:	6d 89       	ldd	r22, Y+21	; 0x15
    41be:	7e 89       	ldd	r23, Y+22	; 0x16
    41c0:	8f 89       	ldd	r24, Y+23	; 0x17
    41c2:	98 8d       	ldd	r25, Y+24	; 0x18
    41c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41c8:	dc 01       	movw	r26, r24
    41ca:	cb 01       	movw	r24, r22
    41cc:	9c 8b       	std	Y+20, r25	; 0x14
    41ce:	8b 8b       	std	Y+19, r24	; 0x13
    41d0:	8b 89       	ldd	r24, Y+19	; 0x13
    41d2:	9c 89       	ldd	r25, Y+20	; 0x14
    41d4:	98 8b       	std	Y+16, r25	; 0x10
    41d6:	8f 87       	std	Y+15, r24	; 0x0f
    41d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    41da:	98 89       	ldd	r25, Y+16	; 0x10
    41dc:	01 97       	sbiw	r24, 0x01	; 1
    41de:	f1 f7       	brne	.-4      	; 0x41dc <HKEYPAD_u8GetPressedKey+0x152>
    41e0:	98 8b       	std	Y+16, r25	; 0x10
    41e2:	8f 87       	std	Y+15, r24	; 0x0f
    41e4:	0f c0       	rjmp	.+30     	; 0x4204 <HKEYPAD_u8GetPressedKey+0x17a>
				{
					/* Debouncing */
					_delay_ms(20);
					while(Local_u8ReturnedPinValue == DIO_u8_LOW)
					{
						MDIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8_ColsCounter],&Local_u8ReturnedPinValue);
    41e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    41e8:	88 2f       	mov	r24, r24
    41ea:	90 e0       	ldi	r25, 0x00	; 0
    41ec:	fc 01       	movw	r30, r24
    41ee:	e4 58       	subi	r30, 0x84	; 132
    41f0:	ff 4f       	sbci	r31, 0xFF	; 255
    41f2:	90 81       	ld	r25, Z
    41f4:	9e 01       	movw	r18, r28
    41f6:	2f 5d       	subi	r18, 0xDF	; 223
    41f8:	3f 4f       	sbci	r19, 0xFF	; 255
    41fa:	81 e0       	ldi	r24, 0x01	; 1
    41fc:	69 2f       	mov	r22, r25
    41fe:	a9 01       	movw	r20, r18
    4200:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <MDIO_u8GetPinValue>
				/* Check if Switch is pressed */
				if(Local_u8ReturnedPinValue == DIO_u8_LOW)
				{
					/* Debouncing */
					_delay_ms(20);
					while(Local_u8ReturnedPinValue == DIO_u8_LOW)
    4204:	89 a1       	ldd	r24, Y+33	; 0x21
    4206:	88 23       	and	r24, r24
    4208:	71 f3       	breq	.-36     	; 0x41e6 <HKEYPAD_u8GetPressedKey+0x15c>
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	a0 e2       	ldi	r26, 0x20	; 32
    4210:	b1 e4       	ldi	r27, 0x41	; 65
    4212:	8b 87       	std	Y+11, r24	; 0x0b
    4214:	9c 87       	std	Y+12, r25	; 0x0c
    4216:	ad 87       	std	Y+13, r26	; 0x0d
    4218:	be 87       	std	Y+14, r27	; 0x0e
    421a:	6b 85       	ldd	r22, Y+11	; 0x0b
    421c:	7c 85       	ldd	r23, Y+12	; 0x0c
    421e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4220:	9e 85       	ldd	r25, Y+14	; 0x0e
    4222:	20 e0       	ldi	r18, 0x00	; 0
    4224:	30 e0       	ldi	r19, 0x00	; 0
    4226:	4a ef       	ldi	r20, 0xFA	; 250
    4228:	54 e4       	ldi	r21, 0x44	; 68
    422a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    422e:	dc 01       	movw	r26, r24
    4230:	cb 01       	movw	r24, r22
    4232:	8f 83       	std	Y+7, r24	; 0x07
    4234:	98 87       	std	Y+8, r25	; 0x08
    4236:	a9 87       	std	Y+9, r26	; 0x09
    4238:	ba 87       	std	Y+10, r27	; 0x0a
    423a:	6f 81       	ldd	r22, Y+7	; 0x07
    423c:	78 85       	ldd	r23, Y+8	; 0x08
    423e:	89 85       	ldd	r24, Y+9	; 0x09
    4240:	9a 85       	ldd	r25, Y+10	; 0x0a
    4242:	20 e0       	ldi	r18, 0x00	; 0
    4244:	30 e0       	ldi	r19, 0x00	; 0
    4246:	40 e8       	ldi	r20, 0x80	; 128
    4248:	5f e3       	ldi	r21, 0x3F	; 63
    424a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    424e:	88 23       	and	r24, r24
    4250:	2c f4       	brge	.+10     	; 0x425c <HKEYPAD_u8GetPressedKey+0x1d2>
    4252:	81 e0       	ldi	r24, 0x01	; 1
    4254:	90 e0       	ldi	r25, 0x00	; 0
    4256:	9e 83       	std	Y+6, r25	; 0x06
    4258:	8d 83       	std	Y+5, r24	; 0x05
    425a:	3f c0       	rjmp	.+126    	; 0x42da <HKEYPAD_u8GetPressedKey+0x250>
    425c:	6f 81       	ldd	r22, Y+7	; 0x07
    425e:	78 85       	ldd	r23, Y+8	; 0x08
    4260:	89 85       	ldd	r24, Y+9	; 0x09
    4262:	9a 85       	ldd	r25, Y+10	; 0x0a
    4264:	20 e0       	ldi	r18, 0x00	; 0
    4266:	3f ef       	ldi	r19, 0xFF	; 255
    4268:	4f e7       	ldi	r20, 0x7F	; 127
    426a:	57 e4       	ldi	r21, 0x47	; 71
    426c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4270:	18 16       	cp	r1, r24
    4272:	4c f5       	brge	.+82     	; 0x42c6 <HKEYPAD_u8GetPressedKey+0x23c>
    4274:	6b 85       	ldd	r22, Y+11	; 0x0b
    4276:	7c 85       	ldd	r23, Y+12	; 0x0c
    4278:	8d 85       	ldd	r24, Y+13	; 0x0d
    427a:	9e 85       	ldd	r25, Y+14	; 0x0e
    427c:	20 e0       	ldi	r18, 0x00	; 0
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	40 e2       	ldi	r20, 0x20	; 32
    4282:	51 e4       	ldi	r21, 0x41	; 65
    4284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4288:	dc 01       	movw	r26, r24
    428a:	cb 01       	movw	r24, r22
    428c:	bc 01       	movw	r22, r24
    428e:	cd 01       	movw	r24, r26
    4290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4294:	dc 01       	movw	r26, r24
    4296:	cb 01       	movw	r24, r22
    4298:	9e 83       	std	Y+6, r25	; 0x06
    429a:	8d 83       	std	Y+5, r24	; 0x05
    429c:	0f c0       	rjmp	.+30     	; 0x42bc <HKEYPAD_u8GetPressedKey+0x232>
    429e:	88 ec       	ldi	r24, 0xC8	; 200
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	9c 83       	std	Y+4, r25	; 0x04
    42a4:	8b 83       	std	Y+3, r24	; 0x03
    42a6:	8b 81       	ldd	r24, Y+3	; 0x03
    42a8:	9c 81       	ldd	r25, Y+4	; 0x04
    42aa:	01 97       	sbiw	r24, 0x01	; 1
    42ac:	f1 f7       	brne	.-4      	; 0x42aa <HKEYPAD_u8GetPressedKey+0x220>
    42ae:	9c 83       	std	Y+4, r25	; 0x04
    42b0:	8b 83       	std	Y+3, r24	; 0x03
    42b2:	8d 81       	ldd	r24, Y+5	; 0x05
    42b4:	9e 81       	ldd	r25, Y+6	; 0x06
    42b6:	01 97       	sbiw	r24, 0x01	; 1
    42b8:	9e 83       	std	Y+6, r25	; 0x06
    42ba:	8d 83       	std	Y+5, r24	; 0x05
    42bc:	8d 81       	ldd	r24, Y+5	; 0x05
    42be:	9e 81       	ldd	r25, Y+6	; 0x06
    42c0:	00 97       	sbiw	r24, 0x00	; 0
    42c2:	69 f7       	brne	.-38     	; 0x429e <HKEYPAD_u8GetPressedKey+0x214>
    42c4:	14 c0       	rjmp	.+40     	; 0x42ee <HKEYPAD_u8GetPressedKey+0x264>
    42c6:	6f 81       	ldd	r22, Y+7	; 0x07
    42c8:	78 85       	ldd	r23, Y+8	; 0x08
    42ca:	89 85       	ldd	r24, Y+9	; 0x09
    42cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    42ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42d2:	dc 01       	movw	r26, r24
    42d4:	cb 01       	movw	r24, r22
    42d6:	9e 83       	std	Y+6, r25	; 0x06
    42d8:	8d 83       	std	Y+5, r24	; 0x05
    42da:	8d 81       	ldd	r24, Y+5	; 0x05
    42dc:	9e 81       	ldd	r25, Y+6	; 0x06
    42de:	9a 83       	std	Y+2, r25	; 0x02
    42e0:	89 83       	std	Y+1, r24	; 0x01
    42e2:	89 81       	ldd	r24, Y+1	; 0x01
    42e4:	9a 81       	ldd	r25, Y+2	; 0x02
    42e6:	01 97       	sbiw	r24, 0x01	; 1
    42e8:	f1 f7       	brne	.-4      	; 0x42e6 <HKEYPAD_u8GetPressedKey+0x25c>
    42ea:	9a 83       	std	Y+2, r25	; 0x02
    42ec:	89 83       	std	Y+1, r24	; 0x01
					{
						MDIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColsPins[Local_u8_ColsCounter],&Local_u8ReturnedPinValue);
					}
					_delay_ms(10);
					* Copy_pu8ReturnedKey = KPD_Au8Keys[Local_u8_RowsCounter][Local_u8_ColsCounter];
    42ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    42f0:	48 2f       	mov	r20, r24
    42f2:	50 e0       	ldi	r21, 0x00	; 0
    42f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    42f6:	28 2f       	mov	r18, r24
    42f8:	30 e0       	ldi	r19, 0x00	; 0
    42fa:	ca 01       	movw	r24, r20
    42fc:	88 0f       	add	r24, r24
    42fe:	99 1f       	adc	r25, r25
    4300:	88 0f       	add	r24, r24
    4302:	99 1f       	adc	r25, r25
    4304:	82 0f       	add	r24, r18
    4306:	93 1f       	adc	r25, r19
    4308:	fc 01       	movw	r30, r24
    430a:	e8 59       	subi	r30, 0x98	; 152
    430c:	ff 4f       	sbci	r31, 0xFF	; 255
    430e:	80 81       	ld	r24, Z
    4310:	ea a1       	ldd	r30, Y+34	; 0x22
    4312:	fb a1       	ldd	r31, Y+35	; 0x23
    4314:	80 83       	st	Z, r24
					Local_u8Flag = 1;
    4316:	81 e0       	ldi	r24, 0x01	; 1
    4318:	8d 8f       	std	Y+29, r24	; 0x1d
    431a:	07 c0       	rjmp	.+14     	; 0x432a <HKEYPAD_u8GetPressedKey+0x2a0>
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8_RowsCounter=0 ; Local_u8_RowsCounter <=3 ; Local_u8_RowsCounter++)
		{
			MDIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8_RowsCounter],DIO_u8_LOW);
			/* Read Coloumns */
			for(Local_u8_ColsCounter=0 ; Local_u8_ColsCounter<=3 ; Local_u8_ColsCounter++)
    431c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    431e:	8f 5f       	subi	r24, 0xFF	; 255
    4320:	8e 8f       	std	Y+30, r24	; 0x1e
    4322:	8e 8d       	ldd	r24, Y+30	; 0x1e
    4324:	84 30       	cpi	r24, 0x04	; 4
    4326:	08 f4       	brcc	.+2      	; 0x432a <HKEYPAD_u8GetPressedKey+0x2a0>
    4328:	d8 ce       	rjmp	.-592    	; 0x40da <HKEYPAD_u8GetPressedKey+0x50>
					break;

				}
			}
			/* Deactivate currently Row  */
			MDIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowsPins[Local_u8_RowsCounter],DIO_u8_HIGH);
    432a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    432c:	88 2f       	mov	r24, r24
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	fc 01       	movw	r30, r24
    4332:	e8 58       	subi	r30, 0x88	; 136
    4334:	ff 4f       	sbci	r31, 0xFF	; 255
    4336:	90 81       	ld	r25, Z
    4338:	81 e0       	ldi	r24, 0x01	; 1
    433a:	69 2f       	mov	r22, r25
    433c:	41 e0       	ldi	r20, 0x01	; 1
    433e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
			if(Local_u8Flag == 1)
    4342:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4344:	81 30       	cpi	r24, 0x01	; 1
    4346:	49 f0       	breq	.+18     	; 0x435a <HKEYPAD_u8GetPressedKey+0x2d0>
	u8 Local_u8_RowsCounter,Local_u8_ColsCounter,Local_u8ReturnedPinValue,Local_u8Flag = 0;
	/* Check Pointer validation */
	if(Copy_pu8ReturnedKey != NULL)
	{
		*Copy_pu8ReturnedKey = KPD_u8_KEY_NOT_PRESSED;
		for(Local_u8_RowsCounter=0 ; Local_u8_RowsCounter <=3 ; Local_u8_RowsCounter++)
    4348:	8f 8d       	ldd	r24, Y+31	; 0x1f
    434a:	8f 5f       	subi	r24, 0xFF	; 255
    434c:	8f 8f       	std	Y+31, r24	; 0x1f
    434e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4350:	84 30       	cpi	r24, 0x04	; 4
    4352:	08 f4       	brcc	.+2      	; 0x4356 <HKEYPAD_u8GetPressedKey+0x2cc>
    4354:	b4 ce       	rjmp	.-664    	; 0x40be <HKEYPAD_u8GetPressedKey+0x34>
    4356:	01 c0       	rjmp	.+2      	; 0x435a <HKEYPAD_u8GetPressedKey+0x2d0>
		}

	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    4358:	18 a2       	std	Y+32, r1	; 0x20
	}
	return Local_u8ErrorState;
    435a:	88 a1       	ldd	r24, Y+32	; 0x20

}
    435c:	a3 96       	adiw	r28, 0x23	; 35
    435e:	0f b6       	in	r0, 0x3f	; 63
    4360:	f8 94       	cli
    4362:	de bf       	out	0x3e, r29	; 62
    4364:	0f be       	out	0x3f, r0	; 63
    4366:	cd bf       	out	0x3d, r28	; 61
    4368:	cf 91       	pop	r28
    436a:	df 91       	pop	r29
    436c:	08 95       	ret

0000436e <DC_voidRotation>:
#include "DCMTR_private.h"
/*#####################################################################################################*/


void DC_voidRotation(u8 Copy_u8Direction)
{
    436e:	df 93       	push	r29
    4370:	cf 93       	push	r28
    4372:	0f 92       	push	r0
    4374:	cd b7       	in	r28, 0x3d	; 61
    4376:	de b7       	in	r29, 0x3e	; 62
    4378:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Direction == DCMTR_Clockwise)
    437a:	89 81       	ldd	r24, Y+1	; 0x01
    437c:	88 23       	and	r24, r24
    437e:	59 f4       	brne	.+22     	; 0x4396 <DC_voidRotation+0x28>
	{
		MDIO_u8SetPinValue(DC_MOTOR,DC_MOTOR_REVERSE,DIO_u8_LOW);
    4380:	80 e0       	ldi	r24, 0x00	; 0
    4382:	61 e0       	ldi	r22, 0x01	; 1
    4384:	40 e0       	ldi	r20, 0x00	; 0
    4386:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
		MDIO_u8SetPinValue(DC_MOTOR,DC_MOTOR_FORWARD,DIO_u8_HIGH);
    438a:	80 e0       	ldi	r24, 0x00	; 0
    438c:	60 e0       	ldi	r22, 0x00	; 0
    438e:	41 e0       	ldi	r20, 0x01	; 1
    4390:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
    4394:	0d c0       	rjmp	.+26     	; 0x43b0 <DC_voidRotation+0x42>
	}
	else if(Copy_u8Direction == DCMTR_AntiClockwise)
    4396:	89 81       	ldd	r24, Y+1	; 0x01
    4398:	81 30       	cpi	r24, 0x01	; 1
    439a:	51 f4       	brne	.+20     	; 0x43b0 <DC_voidRotation+0x42>
	{
		MDIO_u8SetPinValue(DC_MOTOR,DC_MOTOR_FORWARD,DIO_u8_LOW);
    439c:	80 e0       	ldi	r24, 0x00	; 0
    439e:	60 e0       	ldi	r22, 0x00	; 0
    43a0:	40 e0       	ldi	r20, 0x00	; 0
    43a2:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
		MDIO_u8SetPinValue(DC_MOTOR,DC_MOTOR_REVERSE,DIO_u8_HIGH);
    43a6:	80 e0       	ldi	r24, 0x00	; 0
    43a8:	61 e0       	ldi	r22, 0x01	; 1
    43aa:	41 e0       	ldi	r20, 0x01	; 1
    43ac:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
	}


}
    43b0:	0f 90       	pop	r0
    43b2:	cf 91       	pop	r28
    43b4:	df 91       	pop	r29
    43b6:	08 95       	ret

000043b8 <DC_voidStop>:

void DC_voidStop(void)
{
    43b8:	df 93       	push	r29
    43ba:	cf 93       	push	r28
    43bc:	cd b7       	in	r28, 0x3d	; 61
    43be:	de b7       	in	r29, 0x3e	; 62
	MDIO_u8SetPinValue(DC_MOTOR,DC_MOTOR_FORWARD,DIO_u8_LOW);
    43c0:	80 e0       	ldi	r24, 0x00	; 0
    43c2:	60 e0       	ldi	r22, 0x00	; 0
    43c4:	40 e0       	ldi	r20, 0x00	; 0
    43c6:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
	MDIO_u8SetPinValue(DC_MOTOR,DC_MOTOR_REVERSE,DIO_u8_LOW);
    43ca:	80 e0       	ldi	r24, 0x00	; 0
    43cc:	61 e0       	ldi	r22, 0x01	; 1
    43ce:	40 e0       	ldi	r20, 0x00	; 0
    43d0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <MDIO_u8SetPinValue>
}
    43d4:	cf 91       	pop	r28
    43d6:	df 91       	pop	r29
    43d8:	08 95       	ret

000043da <main>:




int main(void)
{
    43da:	df 93       	push	r29
    43dc:	cf 93       	push	r28
    43de:	cd b7       	in	r28, 0x3d	; 61
    43e0:	de b7       	in	r29, 0x3e	; 62
    43e2:	6f 97       	sbiw	r28, 0x1f	; 31
    43e4:	0f b6       	in	r0, 0x3f	; 63
    43e6:	f8 94       	cli
    43e8:	de bf       	out	0x3e, r29	; 62
    43ea:	0f be       	out	0x3f, r0	; 63
    43ec:	cd bf       	out	0x3d, r28	; 61
	u8 a;
	u16 b;

	/* Peripherals Initialization */
	MDIO_u8Init  ();
    43ee:	0e 94 1d 0c 	call	0x183a	; 0x183a <MDIO_u8Init>
	MADC_voidInit();
    43f2:	0e 94 c0 11 	call	0x2380	; 0x2380 <MADC_voidInit>
    HLCD_voidInit();
    43f6:	0e 94 27 1a 	call	0x344e	; 0x344e <HLCD_voidInit>


    MEXTI_u8Enable(EXTI_u8_INT0,EXTI_u8_RISING_EDGE);
    43fa:	80 e0       	ldi	r24, 0x00	; 0
    43fc:	61 e0       	ldi	r22, 0x01	; 1
    43fe:	0e 94 28 0a 	call	0x1450	; 0x1450 <MEXTI_u8Enable>

    while(1)
    {

    	MADC_u8GetDigitalValueSynchNonBlocking(ADC_u8_CHANNEL_0,&b);
    4402:	9e 01       	movw	r18, r28
    4404:	22 5e       	subi	r18, 0xE2	; 226
    4406:	3f 4f       	sbci	r19, 0xFF	; 255
    4408:	80 e0       	ldi	r24, 0x00	; 0
    440a:	b9 01       	movw	r22, r18
    440c:	0e 94 ff 11 	call	0x23fe	; 0x23fe <MADC_u8GetDigitalValueSynchNonBlocking>
    	HLCD_voidWriteChar('a');
    4410:	81 e6       	ldi	r24, 0x61	; 97
    4412:	0e 94 71 1e 	call	0x3ce2	; 0x3ce2 <HLCD_voidWriteChar>
    4416:	80 e0       	ldi	r24, 0x00	; 0
    4418:	90 e0       	ldi	r25, 0x00	; 0
    441a:	aa e7       	ldi	r26, 0x7A	; 122
    441c:	b4 e4       	ldi	r27, 0x44	; 68
    441e:	89 8f       	std	Y+25, r24	; 0x19
    4420:	9a 8f       	std	Y+26, r25	; 0x1a
    4422:	ab 8f       	std	Y+27, r26	; 0x1b
    4424:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4426:	69 8d       	ldd	r22, Y+25	; 0x19
    4428:	7a 8d       	ldd	r23, Y+26	; 0x1a
    442a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    442c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    442e:	20 e0       	ldi	r18, 0x00	; 0
    4430:	30 e0       	ldi	r19, 0x00	; 0
    4432:	4a ef       	ldi	r20, 0xFA	; 250
    4434:	54 e4       	ldi	r21, 0x44	; 68
    4436:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    443a:	dc 01       	movw	r26, r24
    443c:	cb 01       	movw	r24, r22
    443e:	8d 8b       	std	Y+21, r24	; 0x15
    4440:	9e 8b       	std	Y+22, r25	; 0x16
    4442:	af 8b       	std	Y+23, r26	; 0x17
    4444:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4446:	6d 89       	ldd	r22, Y+21	; 0x15
    4448:	7e 89       	ldd	r23, Y+22	; 0x16
    444a:	8f 89       	ldd	r24, Y+23	; 0x17
    444c:	98 8d       	ldd	r25, Y+24	; 0x18
    444e:	20 e0       	ldi	r18, 0x00	; 0
    4450:	30 e0       	ldi	r19, 0x00	; 0
    4452:	40 e8       	ldi	r20, 0x80	; 128
    4454:	5f e3       	ldi	r21, 0x3F	; 63
    4456:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    445a:	88 23       	and	r24, r24
    445c:	2c f4       	brge	.+10     	; 0x4468 <main+0x8e>
		__ticks = 1;
    445e:	81 e0       	ldi	r24, 0x01	; 1
    4460:	90 e0       	ldi	r25, 0x00	; 0
    4462:	9c 8b       	std	Y+20, r25	; 0x14
    4464:	8b 8b       	std	Y+19, r24	; 0x13
    4466:	3f c0       	rjmp	.+126    	; 0x44e6 <main+0x10c>
	else if (__tmp > 65535)
    4468:	6d 89       	ldd	r22, Y+21	; 0x15
    446a:	7e 89       	ldd	r23, Y+22	; 0x16
    446c:	8f 89       	ldd	r24, Y+23	; 0x17
    446e:	98 8d       	ldd	r25, Y+24	; 0x18
    4470:	20 e0       	ldi	r18, 0x00	; 0
    4472:	3f ef       	ldi	r19, 0xFF	; 255
    4474:	4f e7       	ldi	r20, 0x7F	; 127
    4476:	57 e4       	ldi	r21, 0x47	; 71
    4478:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    447c:	18 16       	cp	r1, r24
    447e:	4c f5       	brge	.+82     	; 0x44d2 <main+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4480:	69 8d       	ldd	r22, Y+25	; 0x19
    4482:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4484:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4486:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4488:	20 e0       	ldi	r18, 0x00	; 0
    448a:	30 e0       	ldi	r19, 0x00	; 0
    448c:	40 e2       	ldi	r20, 0x20	; 32
    448e:	51 e4       	ldi	r21, 0x41	; 65
    4490:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4494:	dc 01       	movw	r26, r24
    4496:	cb 01       	movw	r24, r22
    4498:	bc 01       	movw	r22, r24
    449a:	cd 01       	movw	r24, r26
    449c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44a0:	dc 01       	movw	r26, r24
    44a2:	cb 01       	movw	r24, r22
    44a4:	9c 8b       	std	Y+20, r25	; 0x14
    44a6:	8b 8b       	std	Y+19, r24	; 0x13
    44a8:	0f c0       	rjmp	.+30     	; 0x44c8 <main+0xee>
    44aa:	88 ec       	ldi	r24, 0xC8	; 200
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	9a 8b       	std	Y+18, r25	; 0x12
    44b0:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    44b2:	89 89       	ldd	r24, Y+17	; 0x11
    44b4:	9a 89       	ldd	r25, Y+18	; 0x12
    44b6:	01 97       	sbiw	r24, 0x01	; 1
    44b8:	f1 f7       	brne	.-4      	; 0x44b6 <main+0xdc>
    44ba:	9a 8b       	std	Y+18, r25	; 0x12
    44bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44be:	8b 89       	ldd	r24, Y+19	; 0x13
    44c0:	9c 89       	ldd	r25, Y+20	; 0x14
    44c2:	01 97       	sbiw	r24, 0x01	; 1
    44c4:	9c 8b       	std	Y+20, r25	; 0x14
    44c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44c8:	8b 89       	ldd	r24, Y+19	; 0x13
    44ca:	9c 89       	ldd	r25, Y+20	; 0x14
    44cc:	00 97       	sbiw	r24, 0x00	; 0
    44ce:	69 f7       	brne	.-38     	; 0x44aa <main+0xd0>
    44d0:	14 c0       	rjmp	.+40     	; 0x44fa <main+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44d2:	6d 89       	ldd	r22, Y+21	; 0x15
    44d4:	7e 89       	ldd	r23, Y+22	; 0x16
    44d6:	8f 89       	ldd	r24, Y+23	; 0x17
    44d8:	98 8d       	ldd	r25, Y+24	; 0x18
    44da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    44de:	dc 01       	movw	r26, r24
    44e0:	cb 01       	movw	r24, r22
    44e2:	9c 8b       	std	Y+20, r25	; 0x14
    44e4:	8b 8b       	std	Y+19, r24	; 0x13
    44e6:	8b 89       	ldd	r24, Y+19	; 0x13
    44e8:	9c 89       	ldd	r25, Y+20	; 0x14
    44ea:	98 8b       	std	Y+16, r25	; 0x10
    44ec:	8f 87       	std	Y+15, r24	; 0x0f
    44ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    44f0:	98 89       	ldd	r25, Y+16	; 0x10
    44f2:	01 97       	sbiw	r24, 0x01	; 1
    44f4:	f1 f7       	brne	.-4      	; 0x44f2 <main+0x118>
    44f6:	98 8b       	std	Y+16, r25	; 0x10
    44f8:	8f 87       	std	Y+15, r24	; 0x0f

    	_delay_ms(1000);
        HLCD_voidClear();
    44fa:	0e 94 1d 1c 	call	0x383a	; 0x383a <HLCD_voidClear>
    44fe:	80 e0       	ldi	r24, 0x00	; 0
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	aa e7       	ldi	r26, 0x7A	; 122
    4504:	b4 e4       	ldi	r27, 0x44	; 68
    4506:	8b 87       	std	Y+11, r24	; 0x0b
    4508:	9c 87       	std	Y+12, r25	; 0x0c
    450a:	ad 87       	std	Y+13, r26	; 0x0d
    450c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    450e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4510:	7c 85       	ldd	r23, Y+12	; 0x0c
    4512:	8d 85       	ldd	r24, Y+13	; 0x0d
    4514:	9e 85       	ldd	r25, Y+14	; 0x0e
    4516:	20 e0       	ldi	r18, 0x00	; 0
    4518:	30 e0       	ldi	r19, 0x00	; 0
    451a:	4a ef       	ldi	r20, 0xFA	; 250
    451c:	54 e4       	ldi	r21, 0x44	; 68
    451e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4522:	dc 01       	movw	r26, r24
    4524:	cb 01       	movw	r24, r22
    4526:	8f 83       	std	Y+7, r24	; 0x07
    4528:	98 87       	std	Y+8, r25	; 0x08
    452a:	a9 87       	std	Y+9, r26	; 0x09
    452c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    452e:	6f 81       	ldd	r22, Y+7	; 0x07
    4530:	78 85       	ldd	r23, Y+8	; 0x08
    4532:	89 85       	ldd	r24, Y+9	; 0x09
    4534:	9a 85       	ldd	r25, Y+10	; 0x0a
    4536:	20 e0       	ldi	r18, 0x00	; 0
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	40 e8       	ldi	r20, 0x80	; 128
    453c:	5f e3       	ldi	r21, 0x3F	; 63
    453e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4542:	88 23       	and	r24, r24
    4544:	2c f4       	brge	.+10     	; 0x4550 <main+0x176>
		__ticks = 1;
    4546:	81 e0       	ldi	r24, 0x01	; 1
    4548:	90 e0       	ldi	r25, 0x00	; 0
    454a:	9e 83       	std	Y+6, r25	; 0x06
    454c:	8d 83       	std	Y+5, r24	; 0x05
    454e:	3f c0       	rjmp	.+126    	; 0x45ce <main+0x1f4>
	else if (__tmp > 65535)
    4550:	6f 81       	ldd	r22, Y+7	; 0x07
    4552:	78 85       	ldd	r23, Y+8	; 0x08
    4554:	89 85       	ldd	r24, Y+9	; 0x09
    4556:	9a 85       	ldd	r25, Y+10	; 0x0a
    4558:	20 e0       	ldi	r18, 0x00	; 0
    455a:	3f ef       	ldi	r19, 0xFF	; 255
    455c:	4f e7       	ldi	r20, 0x7F	; 127
    455e:	57 e4       	ldi	r21, 0x47	; 71
    4560:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4564:	18 16       	cp	r1, r24
    4566:	4c f5       	brge	.+82     	; 0x45ba <main+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4568:	6b 85       	ldd	r22, Y+11	; 0x0b
    456a:	7c 85       	ldd	r23, Y+12	; 0x0c
    456c:	8d 85       	ldd	r24, Y+13	; 0x0d
    456e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4570:	20 e0       	ldi	r18, 0x00	; 0
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	40 e2       	ldi	r20, 0x20	; 32
    4576:	51 e4       	ldi	r21, 0x41	; 65
    4578:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    457c:	dc 01       	movw	r26, r24
    457e:	cb 01       	movw	r24, r22
    4580:	bc 01       	movw	r22, r24
    4582:	cd 01       	movw	r24, r26
    4584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4588:	dc 01       	movw	r26, r24
    458a:	cb 01       	movw	r24, r22
    458c:	9e 83       	std	Y+6, r25	; 0x06
    458e:	8d 83       	std	Y+5, r24	; 0x05
    4590:	0f c0       	rjmp	.+30     	; 0x45b0 <main+0x1d6>
    4592:	88 ec       	ldi	r24, 0xC8	; 200
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	9c 83       	std	Y+4, r25	; 0x04
    4598:	8b 83       	std	Y+3, r24	; 0x03
    459a:	8b 81       	ldd	r24, Y+3	; 0x03
    459c:	9c 81       	ldd	r25, Y+4	; 0x04
    459e:	01 97       	sbiw	r24, 0x01	; 1
    45a0:	f1 f7       	brne	.-4      	; 0x459e <main+0x1c4>
    45a2:	9c 83       	std	Y+4, r25	; 0x04
    45a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45a6:	8d 81       	ldd	r24, Y+5	; 0x05
    45a8:	9e 81       	ldd	r25, Y+6	; 0x06
    45aa:	01 97       	sbiw	r24, 0x01	; 1
    45ac:	9e 83       	std	Y+6, r25	; 0x06
    45ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45b0:	8d 81       	ldd	r24, Y+5	; 0x05
    45b2:	9e 81       	ldd	r25, Y+6	; 0x06
    45b4:	00 97       	sbiw	r24, 0x00	; 0
    45b6:	69 f7       	brne	.-38     	; 0x4592 <main+0x1b8>
    45b8:	14 c0       	rjmp	.+40     	; 0x45e2 <main+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45ba:	6f 81       	ldd	r22, Y+7	; 0x07
    45bc:	78 85       	ldd	r23, Y+8	; 0x08
    45be:	89 85       	ldd	r24, Y+9	; 0x09
    45c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    45c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45c6:	dc 01       	movw	r26, r24
    45c8:	cb 01       	movw	r24, r22
    45ca:	9e 83       	std	Y+6, r25	; 0x06
    45cc:	8d 83       	std	Y+5, r24	; 0x05
    45ce:	8d 81       	ldd	r24, Y+5	; 0x05
    45d0:	9e 81       	ldd	r25, Y+6	; 0x06
    45d2:	9a 83       	std	Y+2, r25	; 0x02
    45d4:	89 83       	std	Y+1, r24	; 0x01
    45d6:	89 81       	ldd	r24, Y+1	; 0x01
    45d8:	9a 81       	ldd	r25, Y+2	; 0x02
    45da:	01 97       	sbiw	r24, 0x01	; 1
    45dc:	f1 f7       	brne	.-4      	; 0x45da <main+0x200>
    45de:	9a 83       	std	Y+2, r25	; 0x02
    45e0:	89 83       	std	Y+1, r24	; 0x01
    	_delay_ms(1000);

    	HLED_VoidLed_Toggle(LED_PORTA,LED_PIN6);
    45e2:	80 e0       	ldi	r24, 0x00	; 0
    45e4:	66 e0       	ldi	r22, 0x06	; 6
    45e6:	0e 94 c3 19 	call	0x3386	; 0x3386 <HLED_VoidLed_Toggle>

    	HKEYPAD_u8GetPressedKey(&a);
    45ea:	ce 01       	movw	r24, r28
    45ec:	4d 96       	adiw	r24, 0x1d	; 29
    45ee:	0e 94 45 20 	call	0x408a	; 0x408a <HKEYPAD_u8GetPressedKey>
    45f2:	07 cf       	rjmp	.-498    	; 0x4402 <main+0x28>

000045f4 <__mulsi3>:
    45f4:	62 9f       	mul	r22, r18
    45f6:	d0 01       	movw	r26, r0
    45f8:	73 9f       	mul	r23, r19
    45fa:	f0 01       	movw	r30, r0
    45fc:	82 9f       	mul	r24, r18
    45fe:	e0 0d       	add	r30, r0
    4600:	f1 1d       	adc	r31, r1
    4602:	64 9f       	mul	r22, r20
    4604:	e0 0d       	add	r30, r0
    4606:	f1 1d       	adc	r31, r1
    4608:	92 9f       	mul	r25, r18
    460a:	f0 0d       	add	r31, r0
    460c:	83 9f       	mul	r24, r19
    460e:	f0 0d       	add	r31, r0
    4610:	74 9f       	mul	r23, r20
    4612:	f0 0d       	add	r31, r0
    4614:	65 9f       	mul	r22, r21
    4616:	f0 0d       	add	r31, r0
    4618:	99 27       	eor	r25, r25
    461a:	72 9f       	mul	r23, r18
    461c:	b0 0d       	add	r27, r0
    461e:	e1 1d       	adc	r30, r1
    4620:	f9 1f       	adc	r31, r25
    4622:	63 9f       	mul	r22, r19
    4624:	b0 0d       	add	r27, r0
    4626:	e1 1d       	adc	r30, r1
    4628:	f9 1f       	adc	r31, r25
    462a:	bd 01       	movw	r22, r26
    462c:	cf 01       	movw	r24, r30
    462e:	11 24       	eor	r1, r1
    4630:	08 95       	ret

00004632 <__udivmodhi4>:
    4632:	aa 1b       	sub	r26, r26
    4634:	bb 1b       	sub	r27, r27
    4636:	51 e1       	ldi	r21, 0x11	; 17
    4638:	07 c0       	rjmp	.+14     	; 0x4648 <__udivmodhi4_ep>

0000463a <__udivmodhi4_loop>:
    463a:	aa 1f       	adc	r26, r26
    463c:	bb 1f       	adc	r27, r27
    463e:	a6 17       	cp	r26, r22
    4640:	b7 07       	cpc	r27, r23
    4642:	10 f0       	brcs	.+4      	; 0x4648 <__udivmodhi4_ep>
    4644:	a6 1b       	sub	r26, r22
    4646:	b7 0b       	sbc	r27, r23

00004648 <__udivmodhi4_ep>:
    4648:	88 1f       	adc	r24, r24
    464a:	99 1f       	adc	r25, r25
    464c:	5a 95       	dec	r21
    464e:	a9 f7       	brne	.-22     	; 0x463a <__udivmodhi4_loop>
    4650:	80 95       	com	r24
    4652:	90 95       	com	r25
    4654:	bc 01       	movw	r22, r24
    4656:	cd 01       	movw	r24, r26
    4658:	08 95       	ret

0000465a <__udivmodsi4>:
    465a:	a1 e2       	ldi	r26, 0x21	; 33
    465c:	1a 2e       	mov	r1, r26
    465e:	aa 1b       	sub	r26, r26
    4660:	bb 1b       	sub	r27, r27
    4662:	fd 01       	movw	r30, r26
    4664:	0d c0       	rjmp	.+26     	; 0x4680 <__udivmodsi4_ep>

00004666 <__udivmodsi4_loop>:
    4666:	aa 1f       	adc	r26, r26
    4668:	bb 1f       	adc	r27, r27
    466a:	ee 1f       	adc	r30, r30
    466c:	ff 1f       	adc	r31, r31
    466e:	a2 17       	cp	r26, r18
    4670:	b3 07       	cpc	r27, r19
    4672:	e4 07       	cpc	r30, r20
    4674:	f5 07       	cpc	r31, r21
    4676:	20 f0       	brcs	.+8      	; 0x4680 <__udivmodsi4_ep>
    4678:	a2 1b       	sub	r26, r18
    467a:	b3 0b       	sbc	r27, r19
    467c:	e4 0b       	sbc	r30, r20
    467e:	f5 0b       	sbc	r31, r21

00004680 <__udivmodsi4_ep>:
    4680:	66 1f       	adc	r22, r22
    4682:	77 1f       	adc	r23, r23
    4684:	88 1f       	adc	r24, r24
    4686:	99 1f       	adc	r25, r25
    4688:	1a 94       	dec	r1
    468a:	69 f7       	brne	.-38     	; 0x4666 <__udivmodsi4_loop>
    468c:	60 95       	com	r22
    468e:	70 95       	com	r23
    4690:	80 95       	com	r24
    4692:	90 95       	com	r25
    4694:	9b 01       	movw	r18, r22
    4696:	ac 01       	movw	r20, r24
    4698:	bd 01       	movw	r22, r26
    469a:	cf 01       	movw	r24, r30
    469c:	08 95       	ret

0000469e <__prologue_saves__>:
    469e:	2f 92       	push	r2
    46a0:	3f 92       	push	r3
    46a2:	4f 92       	push	r4
    46a4:	5f 92       	push	r5
    46a6:	6f 92       	push	r6
    46a8:	7f 92       	push	r7
    46aa:	8f 92       	push	r8
    46ac:	9f 92       	push	r9
    46ae:	af 92       	push	r10
    46b0:	bf 92       	push	r11
    46b2:	cf 92       	push	r12
    46b4:	df 92       	push	r13
    46b6:	ef 92       	push	r14
    46b8:	ff 92       	push	r15
    46ba:	0f 93       	push	r16
    46bc:	1f 93       	push	r17
    46be:	cf 93       	push	r28
    46c0:	df 93       	push	r29
    46c2:	cd b7       	in	r28, 0x3d	; 61
    46c4:	de b7       	in	r29, 0x3e	; 62
    46c6:	ca 1b       	sub	r28, r26
    46c8:	db 0b       	sbc	r29, r27
    46ca:	0f b6       	in	r0, 0x3f	; 63
    46cc:	f8 94       	cli
    46ce:	de bf       	out	0x3e, r29	; 62
    46d0:	0f be       	out	0x3f, r0	; 63
    46d2:	cd bf       	out	0x3d, r28	; 61
    46d4:	09 94       	ijmp

000046d6 <__epilogue_restores__>:
    46d6:	2a 88       	ldd	r2, Y+18	; 0x12
    46d8:	39 88       	ldd	r3, Y+17	; 0x11
    46da:	48 88       	ldd	r4, Y+16	; 0x10
    46dc:	5f 84       	ldd	r5, Y+15	; 0x0f
    46de:	6e 84       	ldd	r6, Y+14	; 0x0e
    46e0:	7d 84       	ldd	r7, Y+13	; 0x0d
    46e2:	8c 84       	ldd	r8, Y+12	; 0x0c
    46e4:	9b 84       	ldd	r9, Y+11	; 0x0b
    46e6:	aa 84       	ldd	r10, Y+10	; 0x0a
    46e8:	b9 84       	ldd	r11, Y+9	; 0x09
    46ea:	c8 84       	ldd	r12, Y+8	; 0x08
    46ec:	df 80       	ldd	r13, Y+7	; 0x07
    46ee:	ee 80       	ldd	r14, Y+6	; 0x06
    46f0:	fd 80       	ldd	r15, Y+5	; 0x05
    46f2:	0c 81       	ldd	r16, Y+4	; 0x04
    46f4:	1b 81       	ldd	r17, Y+3	; 0x03
    46f6:	aa 81       	ldd	r26, Y+2	; 0x02
    46f8:	b9 81       	ldd	r27, Y+1	; 0x01
    46fa:	ce 0f       	add	r28, r30
    46fc:	d1 1d       	adc	r29, r1
    46fe:	0f b6       	in	r0, 0x3f	; 63
    4700:	f8 94       	cli
    4702:	de bf       	out	0x3e, r29	; 62
    4704:	0f be       	out	0x3f, r0	; 63
    4706:	cd bf       	out	0x3d, r28	; 61
    4708:	ed 01       	movw	r28, r26
    470a:	08 95       	ret

0000470c <_exit>:
    470c:	f8 94       	cli

0000470e <__stop_program>:
    470e:	ff cf       	rjmp	.-2      	; 0x470e <__stop_program>
